predicate;formula;frequency;closest_solution;closest_solution_edit_distance
this/inv3;(all ref0:(one Exit)|(no (ref0 . (Track <: succs))));125;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));6
this/inv3;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) => (ref0 in Exit)));89;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));4
this/inv3;(all ref0:(one Track)|((ref0 in Exit) => (no (ref0 . (Track <: succs)))));84;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (Track <: succs)))));8
this/inv3;(no (Exit . (Track <: succs)));81;((all ref0:(one (Track - Exit))|(some (ref0 . (Track <: succs)))) && (no (Exit . (Track <: succs))));6
this/inv8;(all ref0:(one Entry),ref1:(one Exit)|(ref1 in (ref0 . (^ (Track <: succs)))));73;(all ref0:(one Entry),ref1:(one (Exit - ref0))|(ref1 in (ref0 . (^ (Track <: succs)))));4
this/inv8;(all ref0:(one Entry)|(Exit in (ref0 . (^ (Track <: succs)))));42;(all ref0:(one Entry)|(Exit in (ref0 . (* (Track <: succs)))));4
this/inv9;(all ref0:(one Junction),ref1:(one Semaphore),ref2:(one Track)|((ref0 !in (ref2 . (Track <: succs))) => (ref1 !in (ref2 . (Track <: signals)))));34;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));10
this/inv3;(all ref0:(one Track)|((ref0 in Exit) => (no (ref0 . (^ (Track <: succs))))));27;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (^ (Track <: succs))))));8
this/inv1;((one Entry) && (one Exit));25;((some Entry) && (some Exit));4
this/inv5;(all ref0:(one Track)|((ref0 in Junction) <=> (some ((Track <: succs) . ref0))));21;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});9
this/inv3;(all ref0:(one Exit)|((# (ref0 . (Track <: succs))) = 0));20;(all ref0:(one Track)|(((# (ref0 . (Track <: succs))) = 0) <=> (ref0 in Exit)));6
this/inv3;(all ref0:(one Track)|(((# (ref0 . (Track <: succs))) = 0) => (ref0 in Exit)));19;(all ref0:(one Track)|(((# (ref0 . (Track <: succs))) = 0) <=> (ref0 in Exit)));4
this/inv2;(all ref0:(one Signal)|(ref0 in (Track . (Track <: signals))));16;(all ref0:(one Signal)|(one ref1:(one Track)|(ref0 in (ref1 . (Track <: signals)))));5
this/inv8;(all ref0:(one Track),ref1:(one Track)|(((ref0 in Entry) && (ref1 in Exit)) => (ref1 in (ref0 . (^ (Track <: succs))))));16;(all ref0:(one Track),ref1:(one (Track - ref0))|(((ref0 in Entry) && (ref1 in Exit)) => (ref1 in (ref0 . (^ (Track <: succs))))));4
this/inv1;((one Exit) && (some Entry));15;((some Entry) && (some Exit));4
this/inv8;(Exit in (Entry . (* (Track <: succs))));15;(all ref0:(one Entry)|(Exit in (ref0 . (* (Track <: succs)))));3
this/inv5;(all ref0:(one Track)|((some ((Track <: succs) . ref0)) => (ref0 in Junction)));14;(all ref0:(one Track)|((! (lone ((Track <: succs) . ref0))) <=> (ref0 in Junction)));7
this/inv3;(all ref0:(one Exit),ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs)));14;(all ref0:(one Track)|((all ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))) <=> (ref0 in Exit)));8
this/inv8;(Exit in (Entry . (^ (Track <: succs))));14;(all ref0:(one Entry)|(Exit in (ref0 . (* (Track <: succs)))));5
this/inv6;(all ref0:(one Entry)|(Speed in (ref0 . (Track <: signals))));14;(all ref0:(one Entry)|(some ref1:(one Speed)|(ref1 in (ref0 . (Track <: signals)))));5
this/inv9;(all ref0:(one Track)|((Junction !in (ref0 . (Track <: succs))) => (Semaphore !in (ref0 . (Track <: signals)))));13;(all ref0:(one Track)|((all ref1:(one Junction)|(ref1 !in (ref0 . (Track <: succs)))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));8
this/inv3;(all ref0:(one Exit)|(no (ref0 . (^ (Track <: succs)))));12;(all ref0:(one Track)|((no (ref0 . (^ (Track <: succs)))) <=> (ref0 in Exit)));6
this/inv9;(all ref0:(one Junction),ref1:(one Track)|((ref0 !in (ref1 . (Track <: succs))) => (all ref2:(one Semaphore)|(ref2 !in (ref1 . (Track <: signals))))));12;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));10
this/inv1;(all ref0:(one Track)|(some ref1:(one Entry),ref2:(one Exit)|((ref1 in (ref0 . (Track <: succs))) && (ref2 in (ref0 . (Track <: succs))))));12;(some ref0:(one Track)|((some ref1:(one Track)|(ref1 in Exit)) && (ref0 in Entry)));13
this/inv3;(all ref0:(one Track)|((Exit in ref0) => (no (ref0 . (Track <: succs)))));12;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));10
this/inv1;((lone Entry) && (lone Exit));11;((some Entry) && (some Exit));4
this/inv2;(all ref0:(one Signal)|(some ref1:(one Track)|(ref0 in (ref1 . (Track <: signals)))));11;(all ref0:(one Signal)|(one ref1:(one Track)|(ref0 in (ref1 . (Track <: signals)))));4
this/inv4;(all ref0:(one Entry)|(no ((Track <: succs) . ref0)));11;(Entry = {ref0:(one Track)|(no ((Track <: succs) . ref0))});4
this/inv6;(all ref0:(one Entry)|(some (ref0 . (Track <: signals))));11;(all ref0:(one Entry)|(some ((ref0 . (Track <: signals)) & Speed)));4
this/inv6;(some ((Entry . (Track <: signals)) & Speed));11;(all ref0:(one Entry)|(some ((ref0 . (Track <: signals)) & Speed)));3
