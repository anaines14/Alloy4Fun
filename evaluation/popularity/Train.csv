predicate;formula;frequency;closest_solution;solution_distance
this/inv3;(all ref0:(one Exit)|(no (ref0 . (Track <: succs))));125;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));6
this/inv3;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) => (ref0 in Exit)));89;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));4
this/inv3;(all ref0:(one Track)|((ref0 in Exit) => (no (ref0 . (Track <: succs)))));84;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (Track <: succs)))));8
this/inv3;(no (Exit . (Track <: succs)));81;((all ref0:(one (Track - Exit))|(some (ref0 . (Track <: succs)))) && (no (Exit . (Track <: succs))));6
this/inv8;(all ref0:(one Entry),ref1:(one Exit)|(ref1 in (ref0 . (^ (Track <: succs)))));73;(all ref0:(one Entry),ref1:(one (Exit - ref0))|(ref1 in (ref0 . (^ (Track <: succs)))));4
this/inv8;(all ref0:(one Entry)|(Exit in (ref0 . (^ (Track <: succs)))));42;(all ref0:(one Entry)|(Exit in (ref0 . (* (Track <: succs)))));4
this/inv9;(all ref0:(one Junction),ref1:(one Semaphore),ref2:(one Track)|((ref0 !in (ref2 . (Track <: succs))) => (ref1 !in (ref2 . (Track <: signals)))));34;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));10
this/inv3;(all ref0:(one Track)|((ref0 in Exit) => (no (ref0 . (^ (Track <: succs))))));27;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (^ (Track <: succs))))));8
this/inv1;((one Entry) && (one Exit));25;((some Entry) && (some Exit));4
this/inv5;(all ref0:(one Track)|((ref0 in Junction) <=> (some ((Track <: succs) . ref0))));21;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});9
this/inv3;(all ref0:(one Exit)|((# (ref0 . (Track <: succs))) = 0));20;(all ref0:(one Track)|(((# (ref0 . (Track <: succs))) = 0) <=> (ref0 in Exit)));6
this/inv3;(all ref0:(one Track)|(((# (ref0 . (Track <: succs))) = 0) => (ref0 in Exit)));19;(all ref0:(one Track)|(((# (ref0 . (Track <: succs))) = 0) <=> (ref0 in Exit)));4
this/inv2;(all ref0:(one Signal)|(ref0 in (Track . (Track <: signals))));16;(all ref0:(one Signal)|(one ref1:(one Track)|(ref0 in (ref1 . (Track <: signals)))));5
this/inv8;(all ref0:(one Track),ref1:(one Track)|(((ref0 in Entry) && (ref1 in Exit)) => (ref1 in (ref0 . (^ (Track <: succs))))));16;(all ref0:(one Track),ref1:(one (Track - ref0))|(((ref0 in Entry) && (ref1 in Exit)) => (ref1 in (ref0 . (^ (Track <: succs))))));4
this/inv1;((one Exit) && (some Entry));15;((some Entry) && (some Exit));4
this/inv8;(Exit in (Entry . (* (Track <: succs))));15;(all ref0:(one Entry)|(Exit in (ref0 . (* (Track <: succs)))));3
this/inv5;(all ref0:(one Track)|((some ((Track <: succs) . ref0)) => (ref0 in Junction)));14;(all ref0:(one Track)|((! (lone ((Track <: succs) . ref0))) <=> (ref0 in Junction)));7
this/inv3;(all ref0:(one Exit),ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs)));14;(all ref0:(one Track)|((all ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))) <=> (ref0 in Exit)));8
this/inv8;(Exit in (Entry . (^ (Track <: succs))));14;(all ref0:(one Entry)|(Exit in (ref0 . (* (Track <: succs)))));5
this/inv6;(all ref0:(one Entry)|(Speed in (ref0 . (Track <: signals))));14;(all ref0:(one Entry)|(some ref1:(one Speed)|(ref1 in (ref0 . (Track <: signals)))));5
this/inv9;(all ref0:(one Track)|((Junction !in (ref0 . (Track <: succs))) => (Semaphore !in (ref0 . (Track <: signals)))));13;(all ref0:(one Track)|((all ref1:(one Junction)|(ref1 !in (ref0 . (Track <: succs)))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));8
this/inv3;(all ref0:(one Exit)|(no (ref0 . (^ (Track <: succs)))));12;(all ref0:(one Track)|((no (ref0 . (^ (Track <: succs)))) <=> (ref0 in Exit)));6
this/inv9;(all ref0:(one Junction),ref1:(one Track)|((ref0 !in (ref1 . (Track <: succs))) => (all ref2:(one Semaphore)|(ref2 !in (ref1 . (Track <: signals))))));12;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));10
this/inv1;(all ref0:(one Track)|(some ref1:(one Entry),ref2:(one Exit)|((ref1 in (ref0 . (Track <: succs))) && (ref2 in (ref0 . (Track <: succs))))));12;(some ref0:(one Track)|((some ref1:(one Track)|(ref1 in Exit)) && (ref0 in Entry)));13
this/inv3;(all ref0:(one Track)|((Exit in ref0) => (no (ref0 . (Track <: succs)))));12;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));10
this/inv1;((lone Entry) && (lone Exit));11;((some Entry) && (some Exit));4
this/inv2;(all ref0:(one Signal)|(some ref1:(one Track)|(ref0 in (ref1 . (Track <: signals)))));11;(all ref0:(one Signal)|(one ref1:(one Track)|(ref0 in (ref1 . (Track <: signals)))));4
this/inv4;(all ref0:(one Entry)|(no ((Track <: succs) . ref0)));11;(Entry = {ref0:(one Track)|(no ((Track <: succs) . ref0))});4
this/inv6;(all ref0:(one Entry)|(some (ref0 . (Track <: signals))));11;(all ref0:(one Entry)|(some ((ref0 . (Track <: signals)) & Speed)));4
this/inv6;(some ((Entry . (Track <: signals)) & Speed));11;(all ref0:(one Entry)|(some ((ref0 . (Track <: signals)) & Speed)));3
this/inv5;(all ref0:(one Junction)|(some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))));11;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));10
this/inv7;(all ref0:(one Track)|(ref0 !in (ref0 . (Track <: succs))));11;(all ref0:(one Track)|(ref0 !in (ref0 . (^ (Track <: succs)))));3
this/inv6;(all ref0:(one Entry)|(one ref1:(one Speed)|(ref1 in (ref0 . (Track <: signals)))));11;(all ref0:(one Entry)|(some ref1:(one Speed)|(ref1 in (ref0 . (Track <: signals)))));4
this/inv4;(no ((Track <: succs) . Entry));10;(Entry = {ref0:(one Track)|(no ((Track <: succs) . ref0))});5
this/inv3;(all ref0:(one Exit)|(no ((Track <: succs) . ref0)));10;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));8
this/inv4;(all ref0:(one Entry)|(ref0 !in (Track . (Track <: succs))));10;(all ref0:(one Track)|((ref0 !in (Track . (Track <: succs))) <=> (ref0 in Entry)));6
this/inv3;(all ref0:(one Exit),ref1:(one Track)|(ref1 !in (ref0 . (Track <: succs))));9;(all ref0:(one Track)|((all ref1:(one Track)|(ref1 !in (ref0 . (Track <: succs)))) <=> (ref0 in Exit)));8
this/inv4;(all ref0:(one Track)|((ref0 in Entry) => (no ((Track <: succs) . ref0))));9;(Entry = {ref0:(one Track)|(no ((Track <: succs) . ref0))});6
this/inv5;(all ref0:(one Track)|((ref0 in Junction) => ((# ((Track <: succs) . ref0)) > 1)));9;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) <=> (ref0 in Junction)));10
this/inv9;(all ref0:(one Junction),ref1:(one Track)|((! ((ref1 -> ref0) in (Track <: succs))) => (! (some ref2:(one Semaphore)|((ref1 -> ref2) in (Track <: signals))))));9;(all ref0:(one Track)|((! (some ref1:(one Junction)|((ref0 -> ref1) in (Track <: succs)))) => (! (some ref2:(one Semaphore)|((ref0 -> ref2) in (Track <: signals))))));10
this/inv3;(all ref0:(one Track)|((no ((Track <: succs) . ref0)) => (ref0 in Exit)));9;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));6
this/inv4;(all ref0:(one Track)|((no ((Track <: succs) . ref0)) => (ref0 in Entry)));8;(all ref0:(one Track)|((no ((Track <: succs) . ref0)) <=> (ref0 in Entry)));4
this/inv4;(all ref0:(one Track)|((ref0 in Entry) => (ref0 !in (Track . (Track <: succs)))));8;(Entry = (Track - (Track . (Track <: succs))));9
this/inv2;(all ref0:(one Signal),ref1:(one Track),ref2:(one Track)|(((ref0 in (ref1 . (Track <: signals))) && (ref0 in (ref2 . (Track <: signals)))) => (ref1 = ref2)));8;((all ref0:(one Signal),ref1:(one Track),ref2:(one Track)|(((ref0 in (ref1 . (Track <: signals))) && (ref0 in (ref2 . (Track <: signals)))) => (ref1 = ref2))) && (all ref3:(one Signal)|(some ref4:(one Track)|(ref3 in (ref4 . (Track <: signals))))));14
this/inv5;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) => (ref0 in Junction)));8;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) <=> (ref0 in Junction)));4
this/inv8;(all ref0:(one Entry)|(((ref0 . (^ (Track <: succs))) & Exit) = Exit));8;(all ref0:(one Entry)|(((ref0 + (ref0 . (^ (Track <: succs)))) & Exit) = Exit));4
this/inv10;(all ref0:(one Track)|(((ref0 . (Track <: succs)) in Junction) => (some ((ref0 . (Track <: signals)) & Semaphore))));8;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (some ((ref0 . (Track <: signals)) & Semaphore))));4
this/inv8;(all ref0:(one Entry)|((ref0 . (^ (Track <: succs))) in Exit));8;(all ref0:(one Entry),ref1:(one (Exit - ref0))|(ref1 in (ref0 . (^ (Track <: succs)))));5
this/inv4;(all ref0:(one Track),ref1:(one Track)|((ref0 in Entry) => ((ref1 -> ref0) in (Track <: succs))));8;(all ref0:(one Track)|((! (ref0 in (Track . (Track <: succs)))) <=> (ref0 in Entry)));14
this/inv8;(all ref0:(one Entry),ref1:(one Exit)|(ref1 in (ref0 . (Track <: succs))));7;(all ref0:(one Entry),ref1:(one Exit)|(ref1 in (ref0 . (* (Track <: succs)))));5
this/inv9;(all ref0:(one Semaphore),ref1:(one Track),ref2:(one Track)|((! disj[ref1,ref2]) || (((ref2 !in (ref1 . (Track <: succs))) && (ref2 in Junction)) => (ref0 !in (ref1 . (Track <: signals))))));7;(all ref0:(one Semaphore),ref1:(one Track)|((no ((ref1 . (Track <: succs)) & Junction)) => (ref0 !in (ref1 . (Track <: signals)))));17
this/inv1;(all ref0:(one Track)|((ref0 in Entry) && (ref0 in Exit)));7;((some ref0:(one Track)|(ref0 in Entry)) && (some ref1:(one Track)|(ref1 in Exit)));5
this/inv9;(all ref0:(one Track)|(((ref0 . (Track <: succs)) !in Junction) => ((ref0 . (Track <: signals)) !in Semaphore)));7;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));6
this/inv8;(all ref0:(one Entry)|(some ref1:(one Exit)|(ref1 in (ref0 . (^ (Track <: succs))))));7;(all ref0:(one Entry),ref1:(one (Exit - ref0))|(ref1 in (ref0 . (^ (Track <: succs)))));4
this/inv4;(all ref0:(one Track),ref1:(one Track)|((ref0 !in (ref1 . (Track <: succs))) <=> (ref0 in Entry)));7;(all ref0:(one Track)|((all ref1:(one Track)|(ref0 !in (ref1 . (Track <: succs)))) <=> (ref0 in Entry)));4
this/inv5;(all ref0:(one Track)|(((# (ref0 & (Track . (Track <: succs)))) > 1) <=> (ref0 in Junction)));7;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) <=> (ref0 in Junction)));6
this/inv9;(all ref0:(one Junction),ref1:(one Semaphore),ref2:(one Track)|((ref0 !in (ref2 . (Track <: succs))) <=> (ref1 !in (ref2 . (Track <: signals)))));7;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));12
this/inv8;(all ref0:(one Exit)|(ref0 in (Entry . (^ (Track <: succs)))));7;(all ref0:(one Entry)|(Exit in (ref0 + (ref0 . (^ (Track <: succs))))));6
this/inv9;(all ref0:(one Track)|((no ((ref0 . (^ (Track <: succs))) & Junction)) => (no ((ref0 . (Track <: signals)) & Semaphore))));7;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => (no ((ref0 . (Track <: signals)) & Semaphore))));3
this/inv10;(all ref0:(one Track)|(some ref1:(one Junction),ref2:(one Semaphore)|((ref1 in (ref0 . (Track <: succs))) => (ref2 in (ref0 . (Track <: signals))))));7;(all ref0:(one Track)|((some ref1:(one Junction)|(ref1 in (ref0 . (Track <: succs)))) => (some ref2:(one Semaphore)|(ref2 in (ref0 . (Track <: signals))))));6
this/inv4;(all ref0:(one Track)|((no (ref0 . (^ (Track <: succs)))) <=> (ref0 in Entry)));7;(all ref0:(one Track)|((no (ref0 . (~ (Track <: succs)))) <=> (ref0 in Entry)));4
this/inv3;(all ref0:(one univ)|(((no (ref0 . (Track <: succs))) && (ref0 in Track)) => (ref0 in Exit)));7;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));8
this/inv1;((some ref0:(one Track)|(ref0 = Entry)) && (some ref1:(one Track)|(ref1 = Exit)));7;((some ref0:(one Track)|(ref0 in Entry)) && (some ref1:(one Track)|(ref1 in Exit)));8
this/inv3;(all ref0:(one (Exit & Track))|(no (ref0 . (Track <: succs))));6;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));6
this/inv5;(all ref0:(one Junction)|((# ((Track <: succs) . ref0)) > 1));6;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) <=> (ref0 in Junction)));6
this/inv4;(all ref0:(one Entry),ref1:(one Track)|(ref0 !in (ref1 . (^ (Track <: succs)))));6;(all ref0:(one Track)|((all ref1:(one Track)|(ref0 !in (ref1 . (Track <: succs)))) <=> (ref0 in Entry)));9
this/inv6;(all ref0:(one Track)|((ref0 in Entry) => (Speed in (ref0 . (Track <: signals)))));6;(all ref0:(one Track)|((ref0 in Entry) => (some ref1:(one Speed)|(ref1 in (ref0 . (Track <: signals))))));5
this/inv6;(all ref0:(one Speed),ref1:(one Track)|((ref1 in Entry) => (ref0 in (ref1 . (Track <: signals)))));6;(all ref0:(one Track)|(some ref1:(one Speed)|((ref0 in Entry) => ((ref0 -> ref1) in (Track <: signals)))));8
this/inv5;(all ref0:(one Track)|(some ref1:(one Track),ref2:(one Track)|((((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs)))) <=> (ref0 in Junction)) && disj[ref1,ref2])));6;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));13
this/inv5;(all ref0:(one Track),ref1:(one Track),ref2:(one Track)|(((ref0 in ((ref1 . (Track <: succs)) & (ref1 . (Track <: succs)))) && (ref1 != ref2)) <=> (ref0 in Junction)));6;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));13
this/inv1;(all ref0:(one Track)|((some ((ref0 . (Track <: succs)) & Entry)) && (some ((ref0 . (Track <: succs)) & Exit))));6;((some (Entry & Track)) && (some (Exit & Track)));9
this/inv3;(all ref0:(one Track)|((none = (ref0 . (Track <: succs))) => (ref0 in Exit)));6;(all ref0:(one Track)|((none = (ref0 . (Track <: succs))) <=> (ref0 in Exit)));4
this/inv3;(all ref0:(one Track)|((ref0 in Exit) => ((# (ref0 . (Track <: succs))) = 0)));6;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (Track <: succs)))));10
this/inv9;(all ref0:(one Junction),ref1:(one Semaphore),ref2:(one Track)|((ref0 !in (ref2 . (^ (Track <: succs)))) => (ref1 !in (ref2 . (Track <: signals)))));6;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));11
this/inv3;(all ref0:(one Track),ref1:(one (Track - ref0))|((ref0 in Entry) => ((ref0 -> ref1) in (Track <: succs))));6;(all ref0:(one Track)|(((ref0 . (Track <: succs)) in none) <=> (ref0 in Exit)));13
this/inv3;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) => (Exit in ref0)));6;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));6
this/inv5;(all ref0:(one Junction)|(some ((Track <: succs) . ref0)));6;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});7
this/inv4;(all ref0:(one Entry)|(no (ref0 . (^ (Track <: succs)))));6;(Entry = {ref0:(one Track)|(no ((Track <: succs) . ref0))});7
this/inv1;(all ref0:(one Track)|((some Entry) && (some Exit)));5;((some Entry) && (some Exit));1
this/inv1;(all ref0:(one Track)|((ref0 in Entry) || (ref0 in Exit)));5;((some ref0:(one Track)|(ref0 in Entry)) && (some ref1:(one Track)|(ref1 in Exit)));7
this/inv1;(all ref0:(one Track)|((one Entry) && (one Exit)));5;((some Entry) && (some Exit));5
this/inv3;((no (Exit . (Track <: signals))) && (no (Exit . (Track <: succs))));5;((all ref0:(one (Track - Exit))|(some (ref0 . (Track <: succs)))) && (no (Exit . (Track <: succs))));7
this/inv3;(no (Exit & (Track . (Track <: succs))));5;(Exit = (Track - (Track . (~ (Track <: succs)))));6
this/inv4;(no (Entry & (Track . (Track <: succs))));5;(Entry = (Track - (Track . (Track <: succs))));5
this/inv5;(all ref0:(one Track)|((ref0 in Junction) => ((# (ref0 . (Track <: succs))) > 1)));5;(all ref0:(one Track)|(((# (ref0 . (~ (Track <: succs)))) > 1) <=> (ref0 in Junction)));11
this/inv6;(all ref0:(one Track)|(some ref1:(one Speed)|(ref1 in (ref0 . (Track <: signals)))));5;(all ref0:(one Entry)|(some ref1:(one Speed)|(ref1 in (ref0 . (Track <: signals)))));4
this/inv4;(all ref0:(one Track),ref1:(one Track)|(((ref1 -> ref0) !in (Track <: succs)) => (ref0 in Entry)));5;(all ref0:(one Track)|((all ref1:(one Track)|((ref1 -> ref0) !in (Track <: succs))) <=> (ref0 in Entry)));6
this/inv3;(no ((Track <: succs) . Exit));5;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));7
this/inv9;(all ref0:(one Semaphore),ref1:(one Track)|(((ref1 . (Track <: succs)) !in Junction) => (ref0 !in (ref1 . (Track <: signals)))));5;(all ref0:(one Semaphore),ref1:(one Track)|((no ((ref1 . (Track <: succs)) & Junction)) => (ref0 !in (ref1 . (Track <: signals)))));7
this/inv10;(all ref0:(one Track)|(some ref1:(one Junction)|((ref1 in (ref0 . (Track <: succs))) => (some ref2:(one Semaphore)|(ref2 in (ref0 . (Track <: signals)))))));5;(all ref0:(one Track)|((some ref1:(one Junction)|(ref1 in (ref0 . (Track <: succs)))) => (some ref2:(one Semaphore)|(ref2 in (ref0 . (Track <: signals))))));6
this/inv1;(all ref0:(one Track)|(some ref1:(one Entry),ref2:(one Exit)|((ref1 in ref0) && (ref2 in ref0))));5;(some ref0:(one Track)|((some ref1:(one Track)|(ref1 in Exit)) && (ref0 in Entry)));9
this/inv9;(all ref0:(one Track)|((no ((ref0 . (Track <: signals)) & Semaphore)) <=> (no ((ref0 . (Track <: succs)) & Junction))));5;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => (no ((ref0 . (Track <: signals)) & Semaphore))));12
this/inv7;(all ref0:(one Track)|(no (ref0 & (ref0 . (Track <: succs)))));5;(all ref0:(one Track)|(no (ref0 & (ref0 . (^ (Track <: succs))))));3
this/inv9;(all ref0:(one Track),ref1:(one Track)|(((ref1 !in (ref0 . (Track <: succs))) && (ref1 in Junction)) => (no ref2:(one Semaphore)|(ref2 in (ref0 . (Track <: signals))))));5;(all ref0:(one Track)|((all ref1:(one Junction)|(ref1 !in (ref0 . (Track <: succs)))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));12
this/inv6;(all ref0:(one Entry),ref1:(one Speed)|(ref1 in (ref0 . (Track <: signals))));5;(all ref0:(one Entry)|(some ref1:(one Speed)|(ref1 in (ref0 . (Track <: signals)))));4
this/inv10;(all ref0:(one Track)|(((ref0 . (Track <: succs)) in Junction) => (some ref1:(one Semaphore)|(ref1 in (ref0 . (Track <: signals))))));5;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (ref0 in ((Track <: signals) . Semaphore))));9
this/inv10;(all ref0:(one Track)|((Junction in (ref0 . (Track <: succs))) => (Semaphore in (ref0 . (Track <: signals)))));5;(all ref0:(one Track)|((some ref1:(one Junction)|(ref1 in (ref0 . (Track <: succs)))) => (some ref2:(one Semaphore)|(ref2 in (ref0 . (Track <: signals))))));8
this/inv8;(all ref0:(one Entry),ref1:(one Exit)|((ref0 != ref1) && (ref1 in (ref0 . (^ (Track <: succs))))));5;(all ref0:(one Entry),ref1:(one Exit)|((ref0 != ref1) => (ref1 in (ref0 . (^ (Track <: succs))))));6
this/inv5;(all ref0:(one Track)|(((# ((^ (Track <: succs)) . ref0)) > 1) <=> (ref0 in Junction)));5;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) <=> (ref0 in Junction)));3
this/inv8;(((Entry . (^ (Track <: succs))) & Exit) = Exit);5;(all ref0:(one Entry)|(((ref0 + (ref0 . (^ (Track <: succs)))) & Exit) = Exit));5
this/inv6;(all ref0:(one Track)|((ref0 in Entry) => (some (ref0 . (Track <: signals)))));5;(all ref0:(one Track)|((ref0 in Entry) => (some ((ref0 . (Track <: signals)) & Speed))));4
this/inv3;(all ref0:(one Track)|((ref0 in Exit) => (no ((Track <: succs) . ref0))));5;(Exit = (Track - ((Track <: succs) . Track)));10
this/inv10;(all ref0:(one Track)|((some (((Track <: succs) . ref0) & Junction)) => (some ((ref0 . (Track <: signals)) & Semaphore))));5;(all ref0:(one Track)|((some ((ref0 . (Track <: succs)) & Junction)) => (some ((ref0 . (Track <: signals)) & Semaphore))));4
this/inv3;(all ref0:(one univ)|(((no (ref0 . (^ (Track <: succs)))) && (ref0 in Track)) => (ref0 in Exit)));5;(all ref0:(one Track)|((no (ref0 . (^ (Track <: succs)))) <=> (ref0 in Exit)));8
this/inv5;(all ref0:(one Track)|((ref0 in Junction) => (some ((Track <: succs) . ref0))));5;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});9
this/inv3;(all ref0:(one Exit)|((ref0 in Track) => (no (ref0 . (Track <: succs)))));5;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));10
this/inv1;((all ref0:(one Track)|(some ref1:(one Entry)|((ref1 -> ref0) in (Track <: succs)))) && (all ref2:(one Track)|(one ref3:(one Exit)|((ref2 -> ref3) in (Track <: succs)))));5;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) && (ref1 in Track)));16
this/inv3;(all ref0:(one Track)|((ref0 = Exit) => (no (ref0 . (Track <: succs)))));5;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (Track <: succs)))));8
this/inv9;(all ref0:(one Track)|(some ref1:(one Track)|((((ref0 -> ref1) in (Track <: succs)) && (ref1 !in Junction)) => (all ref2:(one Semaphore)|((ref0 -> ref2) !in (Track <: signals))))));5;(all ref0:(one Track)|((! (some ref1:(one Junction)|((ref0 -> ref1) in (Track <: succs)))) => (! (some ref2:(one Semaphore)|((ref0 -> ref2) in (Track <: signals))))));14
this/inv5;(all ref0:(one Track)|((1 < (# ((^ (Track <: succs)) . ref0))) <=> (ref0 in Junction)));5;(all ref0:(one Track)|((2 < (# ((Track <: succs) . ref0))) <=> (ref0 in Junction)));3
this/inv1;((some (Entry & Junction)) && (some (Exit & Junction)));5;((some (Entry & Track)) && (some (Exit & Track)));4
this/inv5;(all ref0:(one Track)|(((# (ref0 . (Track <: succs))) > 1) <=> (ref0 in Junction)));5;(all ref0:(one Track)|(((# (ref0 . (~ (Track <: succs)))) > 1) <=> (ref0 in Junction)));3
this/inv8;((all ref0:(one Entry)|(Exit in (ref0 . (^ (Track <: succs))))) && (no Semaphore) && (no Signal) && (no Speed));5;(all ref0:(one Entry)|(Exit in (ref0 . (* (Track <: succs)))));11
this/inv10;(all ref0:(one Track)|(some ref1:(one Track)|(((one (ref1 & Junction)) && (ref1 in (ref0 . (Track <: succs)))) => (Semaphore in (ref0 . (Track <: signals))))));5;(all ref0:(one Track),ref1:(one Track)|(((one (ref1 & Junction)) && (ref1 in (ref0 . (Track <: succs)))) => (some ref2:(one Semaphore)|(ref2 in (ref0 . (Track <: signals))))));7
this/inv2;(all ref0:(one Signal),ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: signals))) => (ref0 !in (ref2 . (Track <: signals)))));4;(all ref0:(one Signal)|(one ref1:(one Track)|(ref0 in (ref1 . (Track <: signals)))));11
this/inv3;(all ref0:(one Track),ref1:(one (Track - ref0))|(((ref0 -> ref1) !in (Track <: succs)) => (ref0 in Exit)));4;(all ref0:(one Track)|((all ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))) <=> (ref0 in Exit)));6
this/inv3;(all ref0:(one Track)|((ref0 !in (ref0 . (Track <: succs))) => (ref0 in Exit)));4;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));7
this/inv2;(all ref0:(one Signal)|(lone ((Track <: signals) . ref0)));4;(all ref0:(one Signal)|(one ((Track <: signals) . ref0)));4
this/inv1;((all ref0:(one Exit),ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))) && (all ref2:(one Entry),ref3:(one Track)|((ref3 -> ref2) !in (Track <: succs))) && (all ref4:(one Junction)|(some ref5:(one Track),ref6:(one Track)|(((ref4 -> ref6) in (Track <: succs)) && ((ref5 -> ref4) in (Track <: succs))))) && (some ref7:(one Track),ref8:(one Track)|((((ref8 -> ref7) in (Track <: succs)) && (ref8 in Entry)) => (some ref9:(one Track)|(((ref7 -> ref9) in (Track <: succs)) && (ref9 in Exit))))));4;((some ref0:(one Track)|(ref0 in Entry)) && (some ref1:(one Track)|(ref1 in Exit)));50
this/inv3;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) => (ref0 = Exit)));4;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));6
this/inv7;(all ref0:(one Track)|(no (ref0 . (^ (Track <: succs)))));4;(all ref0:(one Track)|(no (ref0 & (ref0 . (^ (Track <: succs))))));4
this/inv6;((Track <: signals) in (Entry ->some Speed));4;(Entry in ((Track <: signals) . Speed));4
this/inv2;(Signal = (Track . (Track <: signals)));4;(all ref0:(one Signal)|(one ((Track <: signals) . ref0)));6
this/inv5;(all ref0:(one Track)|(some ref1:(one Track),ref2:(one Track)|(((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2)) <=> (ref0 in Junction))));4;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));6
this/inv5;(all ref0:(one Track),ref1:(one Track),ref2:(one Track)|(((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs)))) <=> (ref0 in Junction)));4;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));9
this/inv5;(all ref0:(one Track)|((ref0 in Junction) <=> (ref0 in (Track . (Track <: succs)))));4;(all ref0:(one Track)|((some ref1:(one (ref0 . (~ (Track <: succs)))),ref2:(one (ref0 . (~ (Track <: succs))))|(ref1 != ref2)) <=> (ref0 in Junction)));12
this/inv6;(all ref0:(one Entry)|(some ref1:(one Signal)|(ref1 in (ref0 . (Track <: signals)))));4;(all ref0:(one Entry)|(some ref1:(one Speed)|(ref1 in (ref0 . (Track <: signals)))));4
this/inv5;(all ref0:(one Track)|(some ref1:(one (Track - ref0)),ref2:(one ((Track - ref0) - ref1))|(((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs)))) => (ref0 in Junction))));4;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));11
this/inv3;(all ref0:(one Track),ref1:(one Track)|(((ref0 -> ref1) in (Track <: succs)) => (ref0 !in Exit)));4;(all ref0:(one Track)|((all ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))) <=> (ref0 in Exit)));10
this/inv10;(all ref0:(one Track)|(some ref1:(one Semaphore)|((Junction in (ref0 . (Track <: succs))) => (ref1 in (ref0 . (Track <: signals))))));4;(all ref0:(one Track)|((some ref1:(one Junction)|(ref1 in (ref0 . (Track <: succs)))) => (some ref2:(one Semaphore)|(ref2 in (ref0 . (Track <: signals))))));9
this/inv5;(all ref0:(one Track),ref1:(one Track),ref2:(one Track)|((! disj[ref0,ref1,ref2]) || (((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs)))) <=> (ref0 in Junction))));4;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));15
this/inv1;(all ref0:(one Track)|((Entry in ref0) && (Exit in ref0)));4;((some ref0:(one Track)|(ref0 in Entry)) && (some ref1:(one Track)|(ref1 in Exit)));7
this/inv1;(some Entry);4;(some (Entry -> Exit));2
this/inv2;(all ref0:(one Signal)|(one ref1:(one Track)|(ref0 in ref1)));4;(all ref0:(one Signal)|(one ref1:(one Track)|(ref0 in (ref1 . (Track <: signals)))));6
this/inv5;(all ref0:(one Junction)|(! (lone ((Track <: succs) . ref0))));4;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});4
this/inv8;(all ref0:(one Track),ref1:(one Track)|((! disj[ref0,ref1]) || (((ref0 in Entry) && (ref1 in Exit)) => (ref1 in (ref0 . (Track <: succs))))));4;(all ref0:(one Track),ref1:(one Track)|((! disj[ref0,ref1]) || (((ref0 in Entry) && (ref1 in Exit)) => (ref1 in (ref0 . (^ (Track <: succs)))))));5
this/inv4;(all ref0:(one Track)|((ref0 in Entry) => (ref0 !in (Track . (^ (Track <: succs))))));4;(Entry = (Track - (Track . (^ (Track <: succs)))));9
this/inv5;(some ref0:(one Track),ref1:(one Track)|(all ref2:(one Track)|((ref2 in Junction) => ((ref0 != ref1) && ((ref0 -> ref2) in (Track <: succs)) && ((ref1 -> ref2) in (Track <: succs))))));4;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref1 != ref2) && ((ref1 -> ref0) in (Track <: succs)) && ((ref2 -> ref0) in (Track <: succs)))) <=> (ref0 in Junction)));20
this/inv4;(all ref0:(one Track),ref1:(one Track)|((ref0 in Entry) => (ref0 !in (ref1 . (Track <: succs)))));4;(all ref0:(one Track)|((all ref1:(one Track)|(ref0 !in (ref1 . (Track <: succs)))) <=> (ref0 in Entry)));12
this/inv4;((all ref0:(one Entry),ref1:(one Track)|(ref0 !in (ref1 . (^ (Track <: succs))))) && (all ref2:(one Track),ref3:(one Track)|((ref2 !in (ref3 . (Track <: succs))) => (ref2 in Entry))));4;((all ref0:(one Entry),ref1:(one Track)|(ref0 !in (ref1 . (^ (Track <: succs))))) && (all ref2:(one Track)|((ref2 !in (Track . (^ (Track <: succs)))) => (ref2 in Entry))));10
this/inv10;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (one ((ref0 . (Track <: signals)) & Semaphore))));4;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (some ((ref0 . (Track <: signals)) & Semaphore))));4
this/inv3;(all ref0:(one Track),ref1:(one Track)|(((ref0 -> ref1) !in (Track <: succs)) => (ref0 in Exit)));4;(all ref0:(one Track)|((all ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))) <=> (ref0 in Exit)));6
this/inv9;(all ref0:(one Track),ref1:(one Track)|(((ref0 !in Junction) && (ref1 in (ref0 . (Track <: succs)))) => (some ((ref1 . (Track <: signals)) & Semaphore))));4;(all ref0:(one Track)|((! (some ((ref0 . (Track <: succs)) & Junction))) => (! (some ((ref0 . (Track <: signals)) & Semaphore)))));16
this/inv2;(all ref0:(one Signal)|(one (ref0 . (Track <: signals))));4;(all ref0:(one Signal)|(one (ref0 . (~ (Track <: signals)))));3
this/inv3;(all ref0:(one ((Track - Junction) - Entry))|(no (ref0 . (Track <: succs))));4;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));6
this/inv4;(all ref0:(one Entry),ref1:(one Track)|((ref1 -> ref0) !in (Track <: succs)));4;(all ref0:(one Track)|((all ref1:(one Track)|((ref1 -> ref0) !in (Track <: succs))) <=> (ref0 in Entry)));8
this/inv3;(all ref0:(one Track)|((no ((Track <: succs) . ref0)) <=> (ref0 in Exit)));4;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));4
this/inv9;(all ref0:(one Track)|(((ref0 . (Track <: succs)) !in Junction) => (no ((ref0 . (Track <: signals)) & Semaphore))));4;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => (no ((ref0 . (Track <: signals)) & Semaphore))));5
this/inv3;(all ref0:(one Track)|((ref0 in Exit) => (ref0 !in (ref0 . (Track <: succs)))));4;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (Track <: succs)))));9
this/inv3;(all ref0:(one univ)|((ref0 in Exit) => (no (ref0 . (^ (Track <: succs))))));4;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (^ (Track <: succs))))));8
this/inv1;(all ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) && (ref1 in Track)));4;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) && (ref1 in Track)));4
this/inv6;(Speed in (Entry . (Track <: signals)));4;(Entry in ((Track <: signals) . Speed));4
this/inv10;(all ref0:(one Track)|(some ref1:(one Junction)|(((ref0 -> ref1) in (Track <: succs)) => (some ref2:(one Semaphore)|((ref0 -> ref2) in (Track <: signals))))));4;(all ref0:(one Junction),ref1:(one Track)|(some ref2:(one Semaphore)|((ref0 in (ref1 . (Track <: succs))) => ((ref1 -> ref2) in (Track <: signals)))));10
this/inv10;(all ref0:(one Track)|((Junction in ((Track <: succs) . ref0)) => (some ref1:(one Semaphore)|(ref1 in (ref0 . (Track <: signals))))));4;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (ref0 in ((Track <: signals) . Semaphore))));11
this/inv6;((Track <: signals) in (Entry ->one Speed));4;(Entry in ((Track <: signals) . Speed));4
this/inv2;(all ref0:(one Signal),ref1:(one Track),ref2:(one Track)|((((ref1 -> ref0) in (Track <: signals)) && ((ref2 -> ref0) in (Track <: signals))) => (ref1 = ref2)));4;((all ref0:(one Signal),ref1:(one Track),ref2:(one Track)|((((ref1 -> ref0) in (Track <: signals)) && ((ref2 -> ref0) in (Track <: signals))) => (ref1 = ref2))) && (all ref3:(one Signal)|(some ref4:(one Track)|((ref4 -> ref3) in (Track <: signals)))));14
this/inv2;(all ref0:(one Signal),ref1:(one Track)|(ref0 in (ref1 . (Track <: signals))));4;(all ref0:(one Signal)|(one ref1:(one Track)|(ref0 in (ref1 . (Track <: signals)))));4
this/inv3;(all ref0:(one Track)|((no (ref0 . (^ (Track <: succs)))) => (ref0 in Exit)));4;(all ref0:(one Track)|((no (ref0 . (^ (Track <: succs)))) <=> (ref0 in Exit)));4
this/inv3;(all ref0:(one Track)|(no (ref0 . (Track <: succs))));4;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));6
this/inv5;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 2) <=> (ref0 in Junction)));4;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) <=> (ref0 in Junction)));2
this/inv5;(all ref0:(one Junction)|(some ref1:(one Track)|(ref0 in (ref1 . (Track <: succs)))));4;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});11
this/inv1;(some ref0:(one Track)|((some (((Track <: succs) . ref0) & Entry)) && (some ((ref0 . (Track <: succs)) & Exit))));4;((some (Entry & Track)) && (some (Exit & Track)));9
this/inv9;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => (no (ref0 . (Track <: signals)))));4;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => (no ((ref0 . (Track <: signals)) & Semaphore))));4
this/inv4;(all ref0:(one Track)|((ref0 in Entry) => (Entry !in ((Track <: succs) . ref0))));4;(Entry = {ref0:(one Track)|(no ((Track <: succs) . ref0))});9
this/inv3;(all ref0:(one Track)|(((no (ref0 . (Track <: succs))) || (ref0 in (ref0 . (Track <: succs)))) => (ref0 in Exit)));4;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));10
this/inv5;((all ref0:(one Track)|((ref0 !in (Track . (Track <: succs))) => (ref0 !in Junction))) && (all ref1:(one Track),ref2:(one Track),ref3:(one Track)|(((ref1 != ref2) && (ref1 !in (ref3 . (Track <: succs))) && (ref1 in (ref2 . (Track <: succs))) && (ref2 != ref3)) => (ref1 !in Junction))));4;((all ref0:(one ((Track - Junction) - Entry))|(one ref1:(one Track)|(ref0 in (ref1 . (Track <: succs))))) && (all ref2:(one Junction)|(some ref3:(one Track),ref4:(one Track)|((ref2 in (ref3 . (Track <: succs))) && (ref2 in (ref4 . (Track <: succs))) && (ref3 != ref4)))));32
this/inv10;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => ((ref0 . (Track <: signals)) in Semaphore)));4;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (ref0 in ((Track <: signals) . Semaphore))));4
this/inv2;(all ref0:(one Signal)|(one ref1:(one Track)|((ref0 -> ref1) in (Track <: signals))));3;(all ref0:(one Signal)|(one ref1:(one Track)|((ref1 -> ref0) in (Track <: signals))));6
this/inv2;(all ref0:(one Track),ref1:(one Track)|(no ((ref0 . (Track <: signals)) & (ref1 . (Track <: signals)))));3;(all ref0:(one Signal)|(one ref1:(one Track)|(ref0 in (ref1 . (Track <: signals)))));9
this/inv2;(no (Signal - (Track . (Track <: signals))));3;((all ref0:(one Signal)|(lone ((Track <: signals) . ref0))) && (no (Signal - (Track . (Track <: signals)))));6
this/inv3;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) => ((ref0 !in (Entry + Junction)) && (ref0 in Exit))));3;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));10
this/inv3;(all ref0:(one Track),ref1:(one Track)|((ref1 !in (ref0 . (Track <: succs))) => (ref0 in Exit)));3;(all ref0:(one Track)|((all ref1:(one Track)|(ref1 !in (ref0 . (Track <: succs)))) <=> (ref0 in Exit)));6
this/inv5;(all ref0:(one Junction)|(ref0 in ((Track . (Track <: succs)) . (^ (Track <: succs)))));3;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});13
this/inv9;(all ref0:(one Signal),ref1:(one Track),ref2:(one Track)|(((ref1 !in Junction) && ((ref1 -> ref2) in (Track <: succs))) => ((ref0 !in Semaphore) && ((ref2 -> ref0) in (Track <: signals)))));3;(all ref0:(one Track)|((! (some ref1:(one Junction)|((ref0 -> ref1) in (Track <: succs)))) => (! (some ref2:(one Semaphore)|((ref0 -> ref2) in (Track <: signals))))));20
this/inv8;((Entry -> Exit) in (^ (Track <: succs)));3;((Entry -> Exit) in (* (Track <: succs)));2
this/inv5;(all ref0:(one Track)|(((some ((Track <: succs) . ref0)) && (some (ref0 . (Track <: succs)))) <=> (ref0 in Junction)));3;(all ref0:(one Track)|(((! (one ((Track <: succs) . ref0))) && (some ((Track <: succs) . ref0))) <=> (ref0 in Junction)));7
this/inv7;(all ref0:(one Track),ref1:(one Track)|(((ref0 in Entry) && (ref1 in Exit)) => ((ref1 -> ref0) !in (Track <: succs))));3;(all ref0:(one Track)|((ref0 -> ref0) !in (^ (Track <: succs))));14
this/inv5;(all ref0:(one Junction)|((# (ref0 & (Track . (Track <: succs)))) > 1));3;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) <=> (ref0 in Junction)));10
this/inv7;(all ref0:(one Track)|(ref0 in (ref0 . (^ (Track <: succs)))));3;(no ref0:(one Track)|(ref0 in (ref0 . (^ (Track <: succs)))));2
this/inv3;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) => ((ref0 !in Entry) && (ref0 in Exit))));3;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));8
this/inv4;((all ref0:(one Track)|((ref0 !in (Track . (^ (Track <: succs)))) => (ref0 in Entry))) && (Entry !in (Track . (^ (Track <: succs)))));3;((all ref0:(one Track)|((ref0 !in (Track . (^ (Track <: succs)))) => (ref0 in Entry))) && (all ref1:(one Entry)|(ref1 !in (Track . (^ (Track <: succs))))));5
this/inv2;(some ref0:(one Signal)|(ref0 in Track));3;((Track <: signals) in (Track one-> Signal));5
this/inv5;(all ref0:(one Track)|(((# (ref0 & (Track . (Track <: succs)))) > 1) => (ref0 in Junction)));3;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) <=> (ref0 in Junction)));8
this/inv2;(one ((Track <: signals) . Signal));3;(all ref0:(one Signal)|(one ((Track <: signals) . ref0)));3
this/inv3;(all ref0:(one Exit)|(lone (ref0 . (Track <: succs))));3;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));8
this/inv5;(all ref0:(one (Track - Junction))|(lone ((Track <: succs) . ref0)));3;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});5
this/inv5;(all ref0:(one Track),ref1:(one Track),ref2:(one Track)|(((ref0 != ref1) && (ref0 != ref2) && (ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2)) <=> (ref0 in Junction)));3;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));12
this/inv10;(all ref0:(one Junction),ref1:(one Track)|((ref0 in (ref1 . (Track <: succs))) => (some (ref1 . (Track <: signals)))));3;(all ref0:(one Junction),ref1:(one Track)|((ref0 in (ref1 . (Track <: succs))) => (some ((ref1 . (Track <: signals)) & Semaphore))));6
this/inv10;(all ref0:(one Junction)|(some ref1:(one Semaphore)|(all ref2:(one ((Track <: succs) . ref0))|(ref1 in (ref2 . (Track <: signals))))));3;(((Track <: succs) . Junction) in ((Track <: signals) . Semaphore));9
this/inv8;(all ref0:(one Entry),ref1:(one Exit)|((ref0 in Exit) || (ref1 in (ref0 . (^ (Track <: succs))))));3;(all ref0:(one Entry),ref1:(one Exit)|((ref0 = ref1) || (ref1 in (ref0 . (^ (Track <: succs))))));8
this/inv5;(all ref0:(one Track)|(((# ((ref0 & Track) - (ref0 . (Track <: succs)))) > 1) <=> (ref0 in Junction)));3;(all ref0:(one Track)|(((# (ref0 . (~ (Track <: succs)))) > 1) <=> (ref0 in Junction)));7
this/inv8;(all ref0:(one Exit)|(some ref1:(one Entry)|(ref0 in (ref1 . (^ (Track <: succs))))));3;(all ref0:(one Entry)|(Exit in (ref0 + (ref0 . (^ (Track <: succs))))));7
this/inv6;(one ((Entry . (Track <: signals)) & Speed));3;(Entry in ((Track <: signals) . Speed));5
this/inv10;(all ref0:(one Track)|(((ref0 . (Track <: succs)) in Junction) => (Semaphore in (ref0 . (Track <: signals)))));3;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (ref0 in ((Track <: signals) . Semaphore))));8
this/inv8;(all ref0:(one Entry)|(some ref1:(one Exit)|(ref1 in (ref0 . (* (Track <: succs))))));3;(all ref0:(one Entry),ref1:(one Exit)|(ref1 in (ref0 . (* (Track <: succs)))));4
this/inv10;(all ref0:(one Track)|((Junction in (ref0 . (Track <: succs))) => (some ref1:(one Semaphore)|(ref1 in (ref0 . (Track <: signals))))));3;(all ref0:(one Track)|((some ref1:(one Junction)|(ref1 in (ref0 . (Track <: succs)))) => (some ref2:(one Semaphore)|(ref2 in (ref0 . (Track <: signals))))));9
this/inv2;(Signal in (Track . (Track <: signals)));3;((Track <: signals) in (Track one-> Signal));6
this/inv5;(all ref0:(one Track)|((ref0 in Junction) => ((# ((^ (Track <: succs)) . ref0)) > 1)));3;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) <=> (ref0 in Junction)));11
this/inv3;(all ref0:(one Exit)|(none = (ref0 . (Track <: succs))));3;(all ref0:(one Track)|((none = (ref0 . (Track <: succs))) <=> (ref0 in Exit)));6
this/inv4;((all ref0:(one Entry),ref1:(one Track)|(ref0 !in (ref1 . (^ (Track <: succs))))) && (all ref2:(one Track),ref3:(one Track)|((ref2 !in (ref3 . (^ (Track <: succs)))) => (ref2 in Entry))));3;((all ref0:(one Entry),ref1:(one Track)|(ref0 !in (ref1 . (^ (Track <: succs))))) && (all ref2:(one Track)|((ref2 !in (Track . (^ (Track <: succs)))) => (ref2 in Entry))));9
this/inv4;(all ref0:(one Entry),ref1:(one Track)|(ref0 !in (ref1 . (Track <: succs))));3;(all ref0:(one Track)|((all ref1:(one Track)|(ref0 !in (ref1 . (Track <: succs)))) <=> (ref0 in Entry)));8
this/inv9;(all ref0:(one Track),ref1:(one Track)|(((ref0 !in Junction) && (ref1 in (ref0 . (Track <: succs)))) => (no ((ref0 . (Track <: signals)) & Semaphore))));3;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => (no ((ref0 . (Track <: signals)) & Semaphore))));12
this/inv9;((all ref0:(one Track),ref1:(one Track)|(((ref0 !in Junction) && (ref1 in (ref0 . (Track <: succs)))) => (no ((ref0 . (Track <: signals)) & Semaphore)))) && (all ref2:(one Track)|((no (ref2 . (Track <: succs))) => (no ((ref2 . (Track <: signals)) & Semaphore)))));3;((all ref0:(one Track)|((no (ref0 . (Track <: succs))) => (no ((ref0 . (Track <: signals)) & Semaphore)))) && (all ref1:(one Track)|((no ((ref1 . (Track <: succs)) & Junction)) => (no ((ref1 . (Track <: signals)) & Semaphore)))));18
this/inv9;(all ref0:(one Track),ref1:(one Track)|((((ref0 -> ref1) !in (Track <: succs)) && (ref1 in Junction)) => (all ref2:(one Semaphore)|((ref0 -> ref2) !in (Track <: signals)))));3;(all ref0:(one Track)|((! (some ref1:(one Junction)|((ref0 -> ref1) in (Track <: succs)))) => (! (some ref2:(one Semaphore)|((ref0 -> ref2) in (Track <: signals))))));16
this/inv3;(all ref0:(one Track)|((some (ref0 & Exit)) => ((no (ref0 . (Track <: signals))) && (no (ref0 . (Track <: succs))))));3;((all ref0:(one (Track - Exit))|(some (ref0 . (Track <: succs)))) && (no (Exit . (Track <: succs))));13
this/inv8;(all ref0:(one Track)|(Exit in (ref0 . (^ (Track <: succs)))));3;(all ref0:(one Entry)|(Exit in (ref0 . (* (Track <: succs)))));4
this/inv1;(some ref0:(one Track)|((ref0 in Entry) || (ref0 in Exit)));3;((some ref0:(one Track)|(ref0 in Entry)) && (some ref1:(one Track)|(ref1 in Exit)));7
this/inv1;((Entry in Track) && (Exit in Track));3;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) && (ref1 in Track)));6
this/inv6;(all ref0:(one Track)|(some ((ref0 . (Track <: signals)) & Speed)));3;(all ref0:(one Entry)|(some ((ref0 . (Track <: signals)) & Speed)));2
this/inv3;(all ref0:(one univ)|((ref0 in Exit) => (no (ref0 . (Track <: succs)))));3;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (Track <: succs)))));8
this/inv10;(all ref0:(one Track)|((some ((ref0 . (Track <: succs)) & Junction)) => (one ((ref0 . (Track <: signals)) & Semaphore))));3;(all ref0:(one Track)|((some ((ref0 . (Track <: succs)) & Junction)) => (some ((ref0 . (Track <: signals)) & Semaphore))));4
this/inv2;(all ref0:(one Signal)|(one Track));3;((Track <: signals) in (Track one-> Signal));6
this/inv5;(all ref0:(one Track)|((ref0 in Junction) => (! (lone ((Track <: succs) . ref0)))));3;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});6
this/inv9;(all ref0:(one Signal),ref1:(one Track)|(((ref0 in Semaphore) && ((ref1 -> ref0) in (Track <: signals))) => (ref1 in Junction)));3;(all ref0:(one Track)|((ref0 in ((Track <: signals) . Semaphore)) => (ref0 in ((Track <: succs) . Junction))));15
this/inv1;(one ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) && (ref1 in Track)));3;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) && (ref1 in Track)));4
this/inv8;(all ref0:(one Track)|((ref0 in Entry) => (all ref1:(one Track)|((ref1 in (ref0 . (^ (Track <: succs)))) && (ref1 in Exit)))));3;(all ref0:(one Entry),ref1:(one Exit)|((ref0 != ref1) => (ref1 in (ref0 . (^ (Track <: succs))))));12
this/inv9;(all ref0:(one Track)|((Junction !in (ref0 . (^ (Track <: succs)))) => (no ref1:(one Semaphore)|(ref1 in (ref0 . (* (Track <: signals)))))));3;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => (! (some ref1:(one Semaphore)|(ref1 in (ref0 . (Track <: signals)))))));12
this/inv10;(all ref0:(one Junction),ref1:(one Track)|(some ref2:(one Semaphore)|((ref0 in (ref1 . (^ (Track <: succs)))) => (ref2 in (ref1 . (Track <: signals))))));3;(all ref0:(one Junction),ref1:(one Track)|(some ref2:(one Semaphore)|((ref0 in (ref1 . (Track <: succs))) => (ref2 in (ref1 . (Track <: signals))))));7
this/inv9;(all ref0:(one Junction),ref1:(one Track)|(some ref2:(one Semaphore)|((ref0 !in (ref1 . (Track <: succs))) => (ref2 !in (ref1 . (Track <: signals))))));3;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));10
this/inv5;(all ref0:(one Track)|((ref0 in Junction) <=> (some (ref0 . (Track <: succs)))));3;(all ref0:(one Track)|((some ref1:(one (ref0 . (~ (Track <: succs)))),ref2:(one (ref0 . (~ (Track <: succs))))|(ref1 != ref2)) <=> (ref0 in Junction)));11
this/inv3;(all ref0:(one Track)|((Exit in ref0) => (no ((Track <: succs) . ref0))));3;(Exit = (Track - ((Track <: succs) . Track)));10
this/inv1;(all ref0:(one Junction)|(some ref1:(one Entry),ref2:(one Exit)|(((ref0 -> ref2) in (Track <: succs)) && ((ref1 -> ref0) in (Track <: succs)))));3;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) && (ref1 in Track)));13
this/inv5;(all ref0:(one Junction)|(! (lone (((Track <: succs) . ref0) & (Track - ref0)))));3;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});8
this/inv2;(all ref0:(one Signal),ref1:(one Signal),ref2:(one Track)|((((ref2 -> ref0) in (Track <: signals)) && ((ref2 -> ref1) in (Track <: signals))) => (ref0 = ref1)));3;(all ref0:(one univ)|((ref0 in Signal) => (one ref1:(one Track)|((ref1 -> ref0) in (Track <: signals)))));15
this/inv5;(all ref0:(one Track)|((! (lone ((^ (Track <: succs)) . ref0))) <=> (ref0 in Junction)));3;(all ref0:(one Track)|((! (lone ((Track <: succs) . ref0))) <=> (ref0 in Junction)));3
this/inv8;(all ref0:(one Entry),ref1:(one Exit)|(ref0 in (ref1 . (^ (Track <: succs)))));3;(all ref0:(one Entry)|(Exit in (ref0 + (ref0 . (^ (Track <: succs))))));7
this/inv3;(Exit = (Track - (Track . (Track <: succs))));3;(Exit = (Track - (Track . (~ (Track <: succs)))));1
this/inv8;(all ref0:(one Entry),ref1:(one Exit)|(some ref2:(one Track)|(((ref0 -> ref2) in (Track <: succs)) && ((ref2 -> ref1) in (Track <: succs)))));3;(all ref0:(one Entry),ref1:(one Exit)|((ref0 -> ref1) in (* (Track <: succs))));14
this/inv1;((all ref0:(one Track)|(some (ref0 & Entry))) && (all ref1:(one Track)|(some (ref1 & Exit))));3;((some (Entry & Track)) && (some (Exit & Track)));6
this/inv1;(some ref0:(one Track)|(((# (ref0 . (Track <: succs))) > 1) && (ref0 in ((Entry + Junction) + Exit))));3;((some Entry) && (some Exit));14
this/inv3;(all ref0:(one Track)|((ref0 in Exit) => (all ref1:(one Signal),ref2:(one Track)|((ref0 != ref2) && ((ref0 -> ref1) !in (Track <: signals)) && ((ref0 -> ref2) !in (Track <: succs))))));3;((all ref0:(one Track)|((ref0 in Exit) => (all ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))))) && (all ref2:(one Track)|((all ref3:(one Track)|((ref2 -> ref3) !in (Track <: succs))) => (ref2 in Exit))));22
this/inv10;(all ref0:(one Track)|((some ((ref0 . (~ (Track <: succs))) & Junction)) => (some ((ref0 . (Track <: signals)) & Semaphore))));3;(all ref0:(one Track)|((some ((ref0 . (Track <: succs)) & Junction)) => (some ((ref0 . (Track <: signals)) & Semaphore))));3
this/inv1;(all ref0:(one Track)|((some ref1:(one Entry)|(ref1 in (ref0 . (Track <: succs)))) && (some ref2:(one Exit)|(ref2 in (ref0 . (Track <: succs))))));3;(some ref0:(one Track)|((some ref1:(one Track)|(ref1 in Exit)) && (ref0 in Entry)));13
this/inv3;(all ref0:(one ((Track - Entry) - Junction))|(no (ref0 . (Track <: succs))));3;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));6
this/inv9;(all ref0:(one Junction),ref1:(one Track)|((ref0 !in (ref1 . (Track <: succs))) => (no (ref1 . (Track <: signals)))));3;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));10
this/inv5;(all ref0:(one Junction)|(some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))))));3;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));13
this/inv2;(all ref0:(one Signal)|((ref0 in (Track . (Track <: signals))) || (ref0 in ((Track . (^ (Track <: succs))) . (Track <: signals)))));3;((all ref0:(one Signal)|(lone ((Track <: signals) . ref0))) && (Signal in (Track . (Track <: signals))));14
this/inv10;(all ref0:(one Track)|(some ref1:(one Semaphore)|((Junction in ((Track <: succs) . ref0)) => (ref1 in (ref0 . (Track <: signals))))));3;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (ref0 in ((Track <: signals) . Semaphore))));11
this/inv3;(all ref0:(one Track)|(((# (ref0 . (Track <: succs))) = 0) => (Exit in ref0)));3;(all ref0:(one Track)|(((# (ref0 . (Track <: succs))) = 0) <=> (ref0 in Exit)));6
this/inv3;(all ref0:(one Exit),ref1:(one Exit)|((ref0 -> ref1) !in (Track <: succs)));3;(all ref0:(one Track)|((all ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))) <=> (ref0 in Exit)));8
this/inv3;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) = 0) => (Exit in ref0)));3;(all ref0:(one Track)|(((# (ref0 . (Track <: succs))) = 0) <=> (ref0 in Exit)));8
this/inv3;(all ref0:(one Exit),ref1:(one Exit)|(((ref0 -> ref1) !in (Track <: succs)) => (ref0 != ref1)));3;(all ref0:(one Track)|((all ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))) <=> (ref0 in Exit)));10
this/inv4;(all ref0:(one Track),ref1:(one Track)|((ref0 !in (ref1 . (^ (Track <: succs)))) => (ref0 in Entry)));3;(all ref0:(one Track)|((all ref1:(one Track)|(ref0 !in (ref1 . (Track <: succs)))) <=> (ref0 in Entry)));7
this/inv5;(all ref0:(one Track)|((ref0 in Junction) <=> (ref0 in (Track . (^ (Track <: succs))))));3;(all ref0:(one Track)|((some ref1:(one (ref0 . (~ (Track <: succs)))),ref2:(one (ref0 . (~ (Track <: succs))))|(ref1 != ref2)) <=> (ref0 in Junction)));13
this/inv5;(all ref0:(one Junction)|((# ((Track <: succs) . ref0)) > 2));3;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) <=> (ref0 in Junction)));6
this/inv1;((some (Entry & (Track . (Track <: succs)))) && (some (Exit & (Track . (Track <: succs)))));3;((some (Entry & Track)) && (some (Exit & Track)));4
this/inv9;((all ref0:(one Junction),ref1:(one Track)|((! ((ref1 -> ref0) in (Track <: succs))) => (! (some ref2:(one Semaphore)|((ref1 -> ref2) in (Track <: signals)))))) || (no Junction));3;(all ref0:(one Track)|((! (some ref1:(one Junction)|((ref0 -> ref1) in (Track <: succs)))) => (! (some ref2:(one Semaphore)|((ref0 -> ref2) in (Track <: signals))))));13
this/inv4;(all ref0:(one Track),ref1:(one (Track - ref0))|((ref0 !in (ref1 . (^ (Track <: succs)))) <=> (ref0 in Entry)));3;(all ref0:(one Track)|((all ref1:(one Track)|(ref0 !in (ref1 . (Track <: succs)))) <=> (ref0 in Entry)));5
this/inv5;(all ref0:(one Track),ref1:(one Track),ref2:(one Track)|(((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs)))) => (ref0 in Junction)));3;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));11
this/inv8;(all ref0:(one Track)|((ref0 in Entry) => (one ((ref0 . (^ (Track <: succs))) & Exit))));3;(all ref0:(one Entry)|(((ref0 + (ref0 . (^ (Track <: succs)))) & Exit) = Exit));11
this/inv3;(all ref0:(one Track)|((Exit in ref0) => ((# (ref0 . (Track <: succs))) = 0)));3;(all ref0:(one Track)|(((# (ref0 . (Track <: succs))) = 0) <=> (ref0 in Exit)));10
this/inv5;(all ref0:(one Track)|((one ref1:(one Track)|((one ref2:(one Track)|((ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) && (ref0 in (ref1 . (Track <: succs))))) <=> (ref0 in Junction)));3;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));17
this/inv3;(all ref0:(one Track)|(((# (ref0 . (Track <: succs))) = 0) => ((ref0 !in Entry) && (ref0 !in Junction) && (ref0 in Exit))));3;(all ref0:(one Track)|(((# (ref0 . (Track <: succs))) = 0) <=> (ref0 in Exit)));11
this/inv4;(all ref0:(one Track),ref1:(one Track)|(((ref0 -> ref1) in (Track <: succs)) => (ref1 !in Entry)));3;(all ref0:(one Track)|((! (some ref1:(one Track)|(ref0 in (ref1 . (Track <: succs))))) <=> (ref0 in Entry)));13
this/inv4;(all ref0:(one Track),ref1:(one Track)|(((ref0 -> ref1) in (Track <: succs)) => (ref0 !in Entry)));3;(all ref0:(one Track)|((! (some ref1:(one Track)|(ref0 in (ref1 . (Track <: succs))))) <=> (ref0 in Entry)));11
this/inv8;(all ref0:(one Track)|((ref0 in Entry) => ((ref0 . (^ (Track <: succs))) in Exit)));3;(all ref0:(one Track)|((some (ref0 & Entry)) => (Exit in (ref0 . (* (Track <: succs))))));9
this/inv4;(all ref0:(one (Track - Entry))|(no ((ref0 . (^ (Track <: succs))) & Entry)));3;(Entry = {ref0:(one Track)|(no ((Track <: succs) . ref0))});9
this/inv5;(all ref0:(one Track)|((all ref1:(one (Track - ref0)),ref2:(one (Track - ref0))|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));3;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));6
this/inv3;(all ref0:(one Exit),ref1:(one Track)|((ref0 in (ref1 . (Track <: signals))) => (no (ref1 . (Track <: succs)))));3;((all ref0:(one (Track - Exit))|(some (ref0 . (Track <: succs)))) && (no (Exit . (Track <: succs))));14
this/inv3;(all ref0:(one Exit),ref1:(one Track)|((no ((Track <: succs) . ref1)) <=> (ref0 in (ref1 . (Track <: signals)))));3;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));9
this/inv4;(all ref0:(one Track)|((ref0 !in (Track . (^ (Track <: succs)))) => (Entry in ref0)));3;(all ref0:(one Track)|((ref0 !in (Track . (^ (Track <: succs)))) <=> (ref0 in Entry)));6
this/inv5;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) = 2) => (ref0 in Junction)));3;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) <=> (ref0 in Junction)));6
this/inv4;(Exit = (Track - (Track . (Track <: succs))));2;(Entry = (Track - (Track . (Track <: succs))));2
this/inv1;(((Track <: succs) in (Track ->one Exit)) && ((Track <: succs) in (Track ->some Entry)));2;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) && (ref1 in Track)));10
this/inv3;(some ((Track <: succs) . none));2;(Exit = (Track - ((Track <: succs) . Track)));7
this/inv2;(all ref0:(one Signal)|(one (ref0 & (Track . (Track <: signals)))));2;(all ref0:(one Signal)|(one ((Track <: signals) . ref0)));6
this/inv3;(all ref0:(one Track)|((ref0 !in (ref0 . (^ (Track <: succs)))) => (ref0 in Exit)));2;(all ref0:(one Track)|((no (ref0 . (^ (Track <: succs)))) <=> (ref0 in Exit)));7
this/inv3;(all ref0:(one Exit)|(none in (ref0 . (Track <: succs))));2;(all ref0:(one Track)|(((ref0 . (Track <: succs)) in none) <=> (ref0 in Exit)));8
this/inv5;(all ref0:(one Track)|((ref0 in Junction) => ((# (ref0 . (^ (Track <: succs)))) > 1)));2;(all ref0:(one Track)|(((# (ref0 . (~ (Track <: succs)))) > 1) <=> (ref0 in Junction)));12
this/inv5;(Junction in (Track . (^ (Track <: succs))));2;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});8
this/inv3;(all ref0:(one Track)|((ref0 in (ref0 . (Track <: succs))) => (ref0 in Exit)));2;(all ref0:(one Track)|(((ref0 . (Track <: succs)) in none) <=> (ref0 in Exit)));6
this/inv5;(Junction in (Track . (* (Track <: succs))));2;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});8
this/inv1;(some ref0:(one Entry),ref1:(one Junction)|((ref0 in Track) || (ref1 in Track)));2;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) || (ref1 in Track)));4
this/inv5;(all ref0:(one Track)|((ref0 in Junction) <=> (ref0 in ((Track . (Track <: succs)) . (^ (Track <: succs))))));2;(all ref0:(one Track)|((some ref1:(one (ref0 . (~ (Track <: succs)))),ref2:(one (ref0 . (~ (Track <: succs))))|(ref1 != ref2)) <=> (ref0 in Junction)));15
this/inv5;(all ref0:(one Track),ref1:(one Track),ref2:(one Track)|(((ref1 in ((Track <: succs) . ref0)) && (ref2 in ((Track <: succs) . ref0))) => (ref0 in Junction)));2;(all ref0:(one Track)|(((! (one ((Track <: succs) . ref0))) && (some ((Track <: succs) . ref0))) <=> (ref0 in Junction)));13
this/inv5;(all ref0:(one Track)|((ref0 in Junction) <=> (ref0 in (((Track . (Track <: succs)) . (Track <: succs)) . (* (Track <: succs))))));2;(all ref0:(one Track)|((some ref1:(one (ref0 . (~ (Track <: succs)))),ref2:(one (ref0 . (~ (Track <: succs))))|(ref1 != ref2)) <=> (ref0 in Junction)));17
this/inv8;(all ref0:(one Exit),ref1:(one Track)|((ref1 in Entry) => (ref0 in (ref1 . (Track <: succs)))));2;(all ref0:(one Track),ref1:(one Track)|(((ref0 in Exit) && (ref1 in Entry)) => (ref0 in (ref1 . (* (Track <: succs))))));9
this/inv5;(all ref0:(one Junction)|((# (ref0 & (Track . (Track <: succs)))) > 2));2;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) <=> (ref0 in Junction)));10
this/inv3;((all ref0:(one Exit),ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))) && (all ref2:(one Exit)|(no (ref2 . (Track <: succs)))));2;((all ref0:(one (Track - Exit))|(some (ref0 . (Track <: succs)))) && (no (Exit . (Track <: succs))));11
this/inv10;(all ref0:(one Junction),ref1:(one Track)|(some ref2:(one Semaphore)|((ref1 in (ref0 . (Track <: succs))) => (ref2 in (ref1 . (Track <: signals))))));2;(all ref0:(one Track)|((some ref1:(one Junction)|(ref1 in (ref0 . (Track <: succs)))) => (some ref2:(one Semaphore)|(ref2 in (ref0 . (Track <: signals))))));8
this/inv3;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) => ((ref0 !in (Track - Exit)) && (ref0 in Exit))));2;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));10
this/inv5;(all ref0:(one Track)|(some ref1:(one Track),ref2:(one Track)|(((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2)) => (ref0 in Junction))));2;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));8
this/inv5;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) => (ref0 in ((Junction - Entry) - Exit))));2;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) <=> (ref0 in Junction)));8
this/inv5;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) => ((ref0 !in (Track - Junction)) && (ref0 in Junction))));2;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) <=> (ref0 in Junction)));10
this/inv9;(all ref0:(one Track)|((no ((ref0 . (Track <: signals)) & Speed)) <=> (no ((ref0 . (Track <: succs)) & Junction))));2;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => (no ((ref0 . (Track <: signals)) & Semaphore))));12
this/inv1;((Entry + Exit) = Track);2;(some (Entry -> Exit));5
this/inv9;(all ref0:(one Junction),ref1:(one Track)|((ref1 !in (ref0 . (Track <: succs))) => (all ref2:(one Semaphore)|(ref2 !in (ref1 . (Track <: signals))))));2;(all ref0:(one Track)|((all ref1:(one Junction)|(ref1 !in (ref0 . (Track <: succs)))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));8
this/inv9;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => (no ((ref0 . (Track <: signals)) & Speed))));2;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => (no ((ref0 . (Track <: signals)) & Semaphore))));4
this/inv6;(all ref0:(one Entry)|(some Speed));2;(Entry in ((Track <: signals) . Speed));6
this/inv3;(one (Exit . (Track <: succs)));2;(Exit = (Track - ((Track <: succs) . Track)));7
this/inv9;(all ref0:(one Junction),ref1:(one Track)|((ref0 !in (ref1 . (^ (Track <: succs)))) => (all ref2:(one Semaphore)|(ref2 !in (ref1 . (Track <: signals))))));2;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));11
this/inv5;(all ref0:(one Track),ref1:(one Track)|(((ref0 in (ref1 . (Track <: succs))) && (ref0 in ((Track - ref1) . (Track <: succs)))) <=> (ref0 in Junction)));2;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));12
this/inv1;((all ref0:(one Track)|(some Entry)) && (all ref1:(one Track)|(some Exit)));2;((some Entry) && (some Exit));2
this/inv2;(all ref0:(one Signal)|(ref0 in Track));2;((Track <: signals) in (Track one-> Signal));5
this/inv1;((all ref0:(one Track)|(ref0 in Entry)) && (all ref1:(one Track)|(ref1 in Exit)));2;((some ref0:(one Track)|(ref0 in Entry)) && (some ref1:(one Track)|(ref1 in Exit)));4
this/inv8;(all ref0:(one Track),ref1:(one Track)|((ref1 in Exit) => ((ref0 in ((Track <: succs) . ref1)) && (ref0 in Entry))));2;(all ref0:(one Entry)|(Exit in (ref0 . (* (Track <: succs)))));16
this/inv5;(all ref0:(one Track)|(((# (ref0 . (Track <: succs))) > 1) => (ref0 in Junction)));2;(all ref0:(one Track)|(((# (ref0 . (~ (Track <: succs)))) > 1) <=> (ref0 in Junction)));5
this/inv3;(all ref0:(one Track)|(ref0 !in (Exit . (Track <: succs))));2;((all ref0:(one (Track - Exit))|(some (ref0 . (Track <: succs)))) && (no (Exit . (Track <: succs))));8
this/inv3;(some ref0:(one Exit),ref1:(one Track)|((no (ref1 . (Track <: succs))) => (ref0 in ref1)));2;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));9
this/inv5;(all ref0:(one Track)|(((# (ref0 . (Track <: succs))) > 1) => ((ref0 !in (Track - Junction)) && (ref0 in Junction))));2;(all ref0:(one Track)|(((# (ref0 . (~ (Track <: succs)))) > 1) <=> (ref0 in Junction)));11
this/inv3;(all ref0:(one Exit)|(ref0 !in (ref0 . (Track <: succs))));2;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (Track <: succs)))));7
this/inv8;(all ref0:(one Entry)|((ref0 in Exit) || (Exit in (ref0 . (^ (Track <: succs))))));2;(all ref0:(one Entry)|(Exit in (ref0 . (* (Track <: succs)))));8
this/inv5;(all ref0:(one Track)|(some ref1:(one Track),ref2:(one Track)|(((ref0 != ref1) && (ref0 != ref2) && (ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2)) <=> (ref0 in Junction))));2;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));12
this/inv3;((all ref0:(one Track)|((ref0 in Exit) => (no (ref0 . (Track <: succs))))) && (((Entry + Junction) + Exit) = Track));2;((all ref0:(one Track)|((ref0 in Exit) => (no (ref0 . (Track <: succs))))) && (all ref1:(one Track)|((no (ref1 . (Track <: succs))) => (ref1 in Exit))));16
this/inv5;(all ref0:(one Track),ref1:(one Track),ref2:(one Track)|(((ref0 != ref1) && (ref0 in ((ref1 . (Track <: succs)) & (ref1 . (Track <: succs)))) && (ref1 != ref2)) <=> (ref0 in Junction)));2;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));16
this/inv2;(one ref0:(one Track)|(all ref1:(one Signal)|(ref1 in (ref0 . (Track <: signals)))));2;(all ref0:(one Signal)|(one ref1:(one Track)|((ref1 -> ref0) in (Track <: signals))));6
this/inv5;(all ref0:(one Track),ref1:(one Track),ref2:(one Track)|(((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2)) <=> (ref0 in Junction)));2;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));6
this/inv9;(all ref0:(one Track)|((some ((ref0 . (Track <: signals)) & Semaphore)) <=> (some ((ref0 . (Track <: succs)) & Junction))));2;(((Track <: signals) . Semaphore) in ((Track <: succs) . Junction));13
this/inv5;(all ref0:(one Track)|(some ref1:(one Track),ref2:(one Track)|(((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs)))) <=> (ref0 in Junction))));2;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));9
this/inv3;(all ref0:(one Track)|((ref0 in Exit) => (no ((Track <: succs) . Track))));2;(Exit = (Track - ((Track <: succs) . Track)));8
this/inv4;(all ref0:(one Track)|((no (Track . (Track <: succs))) <=> (ref0 in Entry)));2;(all ref0:(one Track)|((no (ref0 & (Track . (Track <: succs)))) <=> (ref0 in Entry)));4
this/inv5;(all ref0:(one Track),ref1:(one Track),ref2:(one Track)|((((ref0 -> ref1) in (Track <: succs)) && ((ref2 -> ref1) in (Track <: succs))) => (ref1 in Junction)));2;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|(((ref0 -> ref1) in (~ (Track <: succs))) && ((ref0 -> ref2) in (~ (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));17
this/inv5;(Junction = (Track . {ref0:(one Track),ref1:(one Track)|((lone ((Track <: succs) . ref0)) && ((ref0 -> ref1) in (Track <: succs)))}));2;(Junction = (Track . {ref0:(one Track),ref1:(one Track)|((! (lone ((Track <: succs) . ref1))) && ((ref0 -> ref1) in (Track <: succs)))}));7
this/inv3;(none = (Exit . (Track <: succs)));2;(Exit = (Track - ((Track <: succs) . Track)));6
this/inv8;(all ref0:(one Entry)|(some ((ref0 . (Track <: succs)) & Exit)));2;(all ref0:(one Entry)|(((ref0 . (* (Track <: succs))) & Exit) = Exit));6
this/inv5;(all ref0:(one Track)|(some ref1:(one Track),ref2:(one Track)|(((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs)))) => (ref0 in Junction))));2;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));11
this/inv5;(all ref0:(one Track)|((ref0 in Junction) <=> (some (ref0 & (Track . (Track <: succs))))));2;(all ref0:(one Track)|((some ref1:(one (ref0 . (~ (Track <: succs)))),ref2:(one (ref0 . (~ (Track <: succs))))|(ref1 != ref2)) <=> (ref0 in Junction)));13
this/inv3;(Exit !in (Track . (Track <: succs)));2;(Exit = (Track - (Track . (~ (Track <: succs)))));5
this/inv8;(all ref0:(one Entry)|(some ((ref0 . (^ (Track <: succs))) & Exit)));2;(all ref0:(one Entry)|(((ref0 + (ref0 . (^ (Track <: succs)))) & Exit) = Exit));7
this/inv8;(all ref0:(one Entry),ref1:(one (ref0 . (Track <: succs)))|(some ((ref1 . (Track <: succs)) & Exit)));2;(all ref0:(one Entry)|(((ref0 . (* (Track <: succs))) & Exit) = Exit));9
this/inv3;(one ref0:(one Track)|(all ref1:(one (Track - ref0))|(((ref1 -> ref0) !in (Track <: succs)) => (ref0 in Exit))));2;(all ref0:(one Track)|((all ref1:(one Track)|(ref1 !in (ref0 . (Track <: succs)))) <=> (ref0 in Exit)));8
this/inv5;(some ref0:(one Track),ref1:(one Track)|(all ref2:(one Track)|(((ref0 != ref1) && ((ref0 -> ref1) in (Track <: succs)) && ((ref2 -> ref1) in (Track <: succs))) => (ref1 in Junction))));2;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref1 != ref2) && ((ref1 -> ref0) in (Track <: succs)) && ((ref2 -> ref0) in (Track <: succs)))) <=> (ref0 in Junction)));16
this/inv5;(some ref0:(one Track),ref1:(one Track)|(all ref2:(one Track)|(((ref0 != ref2) && ((ref0 -> ref1) in (Track <: succs)) && ((ref2 -> ref1) in (Track <: succs))) => (ref1 in Junction))));2;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref1 != ref2) && ((ref1 -> ref0) in (Track <: succs)) && ((ref2 -> ref0) in (Track <: succs)))) <=> (ref0 in Junction)));16
this/inv10;(all ref0:(one Track)|((Semaphore in (ref0 . (Track <: signals))) => (Junction in (ref0 . (Track <: succs)))));2;(((Track <: signals) . Semaphore) = ((Track <: succs) . Junction));11
this/inv9;(((Track <: signals) . Semaphore) = ((Track <: succs) . Junction));2;(((Track <: signals) . Semaphore) in ((Track <: succs) . Junction));2
this/inv6;(((Track <: signals) . Speed) = Entry);2;(Entry in ((Track <: signals) . Speed));4
this/inv9;(all ref0:(one Track)|(some ref1:(one Junction)|((ref1 !in (ref0 . (Track <: succs))) => (one ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals)))))));2;(all ref0:(one Track)|((all ref1:(one Junction)|(ref1 !in (ref0 . (Track <: succs)))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));6
this/inv3;(all ref0:(one Track)|((none in (ref0 . (Track <: succs))) <=> (ref0 in Exit)));2;(all ref0:(one Track)|(((ref0 . (Track <: succs)) in none) <=> (ref0 in Exit)));4
this/inv1;(one ref0:(one Track)|((ref0 in Entry) && (ref0 in Exit)));2;((some ref0:(one Track)|(ref0 in Entry)) && (some ref1:(one Track)|(ref1 in Exit)));5
this/inv9;(all ref0:(one Track)|(((ref0 . (Track <: succs)) !in Junction) => (Semaphore !in (ref0 . (Track <: signals)))));2;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));8
this/inv3;(all ref0:(one Track),ref1:(one Track)|((ref0 in Exit) => ((ref0 -> ref1) !in (Track <: succs))));2;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (Track <: succs)))));12
this/inv1;(all ref0:(one Track)|(some ref1:(one Track)|((((ref1 -> ref0) in (Track <: succs)) && (ref1 in Entry)) => (some ref2:(one Track)|(((ref0 -> ref2) in (Track <: succs)) && (ref2 in Exit))))));2;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) && (ref1 in Track)));21
this/inv10;(all ref0:(one Semaphore),ref1:(one Track),ref2:(one Track)|(((ref2 in (ref1 . (Track <: succs))) && (ref2 in Junction)) => (ref0 in (ref1 . (Track <: signals)))));2;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (ref0 in ((Track <: signals) . Semaphore))));14
this/inv3;(all ref0:(one (Track - (Entry + Junction)))|(no (ref0 . (Track <: succs))));2;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));6
this/inv3;(all ref0:(one Track),ref1:(one Track)|((ref0 in Exit) => (no (ref0 . (Track <: succs)))));2;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (Track <: succs)))));9
this/inv10;(all ref0:(one Track)|(some ref1:(one Junction)|((ref1 in (ref0 . (Track <: succs))) => (Semaphore in (ref0 . (Track <: signals))))));2;(all ref0:(one Track)|((some ref1:(one Junction)|(ref1 in (ref0 . (Track <: succs)))) => (some ref2:(one Semaphore)|(ref2 in (ref0 . (Track <: signals))))));7
this/inv1;((all ref0:(one Exit),ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))) && (all ref2:(one Entry),ref3:(one Track)|((ref3 -> ref2) !in (Track <: succs))) && (all ref4:(one Track)|(some ref5:(one Track)|((((ref5 -> ref4) in (Track <: succs)) && (ref5 in Entry)) => (some ref6:(one Track)|(((ref4 -> ref6) in (Track <: succs)) && (ref6 in Exit)))))));2;((some ref0:(one Track)|(ref0 in Entry)) && (some ref1:(one Track)|(ref1 in Exit)));36
this/inv9;(no ((((Track <: succs) . (Track - Junction)) . (Track <: signals)) :> Semaphore));2;(no (((Track - ((Track <: succs) . Junction)) . (Track <: signals)) :> Semaphore));4
this/inv6;(all ref0:(one Track)|((ref0 in Entry) => ((ref0 . (Track <: signals)) in Speed)));2;(all ref0:(one Track)|((ref0 in Entry) => (some ((ref0 . (Track <: signals)) & Speed))));5
this/inv3;(some ref0:(one Track)|((no (ref0 . (Track <: succs))) => (ref0 in Exit)));2;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));4
this/inv3;(all ref0:(one (Exit - (Entry + Junction)))|(no (ref0 . (Track <: succs))));2;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));6
this/inv9;(no (((Track <: signals) . Semaphore) & ((Track <: succs) . (Track - Junction))));2;(((Track <: signals) . Semaphore) in ((Track <: succs) . Junction));5
this/inv4;(all ref0:(one Track),ref1:(one (Track - ref0))|((ref0 in Exit) => ((ref1 -> ref0) !in (Track <: succs))));2;(all ref0:(one Track)|((all ref1:(one Track)|((ref1 -> ref0) !in (Track <: succs))) <=> (ref0 in Entry)));12
this/inv9;(all ref0:(one Junction),ref1:(one Track)|((ref0 !in (ref1 . (Track <: succs))) => (no ref2:(one Semaphore)|(ref2 in (ref1 . (Track <: signals))))));2;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));12
this/inv2;(all ref0:(one Signal)|(some ref1:(one Track)|((ref1 -> ref0) in (Track <: signals))));2;(all ref0:(one Signal)|(one ref1:(one Track)|((ref1 -> ref0) in (Track <: signals))));4
this/inv3;(no ((Exit :> Track) . (Track <: succs)));2;(Exit = (Track - ((Track <: succs) . Track)));7
this/inv3;(all ref0:(one univ)|(ref0 in Exit));2;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));7
this/inv3;(all ref0:(one Exit)|(some ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))));2;(all ref0:(one Track)|((all ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))) <=> (ref0 in Exit)));8
this/inv9;(all ref0:(one Track)|(some ref1:(one Junction)|((! ((ref0 -> ref1) in (Track <: succs))) => (! (some ref2:(one Semaphore)|((ref0 -> ref2) in (Track <: signals)))))));2;(all ref0:(one Track)|((! (some ref1:(one Junction)|((ref0 -> ref1) in (Track <: succs)))) => (! (some ref2:(one Semaphore)|((ref0 -> ref2) in (Track <: signals))))));6
this/inv10;(all ref0:(one Track)|((ref0 in Junction) => (some ref1:(one Semaphore)|(all ref2:(one Track)|((ref2 in ((Track <: succs) . ref0)) => (ref1 in (ref2 . (Track <: signals))))))));2;(all ref0:(one Junction),ref1:(one Track)|((ref1 in ((Track <: succs) . ref0)) => (some ref2:(one Semaphore)|((ref1 -> ref2) in (Track <: signals)))));14
this/inv3;(all ref0:(one univ)|((ref0 in Exit) => (none in (ref0 . (Track <: succs)))));2;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (Track <: succs)))));9
this/inv8;(all ref0:(one Exit)|(ref0 in (Entry . (* (Track <: succs)))));2;((Entry -> Exit) in (* (Track <: succs)));5
this/inv3;(all ref0:(one Track)|((some (ref0 & Exit)) => (no (ref0 . (Track <: succs)))));2;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (Track <: succs)))));9
this/inv1;(one ref0:(one Track)|(some ref1:(one Entry),ref2:(one Exit)|((ref1 in (ref0 . (Track <: succs))) && (ref2 in (ref0 . (Track <: succs))))));2;(some ref0:(one Track)|((some ref1:(one Track)|(ref1 in Exit)) && (ref0 in Entry)));13
this/inv3;(all ref0:(one univ)|((ref0 in Exit) => (none in (ref0 . (* (Track <: succs))))));2;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (Track <: succs)))));10
this/inv10;(all ref0:(one Track),ref1:(one (Track - ref0))|(one ref2:(one Semaphore)|((((ref0 -> ref1) in (Track <: succs)) && (ref1 in Junction)) => ((ref0 -> ref2) in (Track <: signals)))));2;(all ref0:(one Track)|((some ref1:(one Track)|(((ref0 -> ref1) in (Track <: succs)) && (ref1 in Junction))) => (some ref2:(one Signal)|(((ref0 -> ref2) in (Track <: signals)) && (ref2 in Semaphore)))));10
this/inv3;(all ref0:(one univ)|((ref0 in Exit) => (all ref1:(one Track)|(ref1 in (ref0 . (* (Track <: succs)))))));2;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (Track <: succs)))));11
this/inv3;(all ref0:(one Exit)|(no ref1:(one Track)|((ref0 -> ref1) in (Track <: succs))));2;(all ref0:(one Track)|((all ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))) <=> (ref0 in Exit)));10
this/inv3;(all ref0:(one Exit),ref1:(one Signal),ref2:(one Track)|(((ref0 -> ref1) !in (Track <: signals)) && ((ref0 -> ref2) !in (Track <: succs))));2;((all ref0:(one Exit),ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))) && (all ref2:(one Track)|((all ref3:(one Track)|((ref2 -> ref3) !in (Track <: succs))) => (ref2 in Exit))));15
this/inv8;(all ref0:(one Track)|((ref0 in Entry) => (Exit in (ref0 . (^ (Track <: succs))))));2;(all ref0:(one Track)|((some (ref0 & Entry)) => (Exit in (ref0 . (* (Track <: succs))))));7
this/inv10;(all ref0:(one Track)|((some ((ref0 . (Track <: succs)) & Junction)) => (Semaphore in (ref0 . (Track <: signals)))));2;(all ref0:(one Track)|((some ((ref0 . (Track <: succs)) & Junction)) => (some ((ref0 . (Track <: signals)) & Semaphore))));7
this/inv8;(all ref0:(one Entry)|(some ref1:(one Track)|((some ref2:(one Track)|(((ref1 -> ref2) in (Track <: succs)) && (ref2 in Exit))) && ((ref0 -> ref1) in (Track <: succs)))));2;(all ref0:(one Entry),ref1:(one Exit)|((ref0 -> ref1) in (* (Track <: succs))));16
this/inv9;(all ref0:(one Track),ref1:(one Track)|(((ref0 !in Junction) && (ref1 in (ref0 . (Track <: succs)))) => (no ((ref1 . (Track <: signals)) & Semaphore))));2;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => (no ((ref0 . (Track <: signals)) & Semaphore))));14
this/inv6;(all ref0:(one Track)|(some ref1:(one Speed)|((ref0 in Track) => (ref1 in (ref0 . (Track <: signals))))));2;(all ref0:(one Track)|((ref0 in Entry) => (some ref1:(one Speed)|(ref1 in (ref0 . (Track <: signals))))));6
this/inv5;(all ref0:(one univ)|((ref0 in Junction) => ((# (ref0 . (^ (Track <: succs)))) > 1)));2;(all ref0:(one Track)|(((# (ref0 . (~ (Track <: succs)))) > 1) <=> (ref0 in Junction)));12
this/inv5;((# (Junction . (Track <: succs))) > 1);2;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) <=> (ref0 in Junction)));7
this/inv2;(all ref0:(one Signal),ref1:(one Track)|(ref0 !in ((Track . (Track <: signals)) - (ref1 . (Track <: signals)))));2;(all ref0:(one Signal)|(one ref1:(one Track)|(ref0 in (ref1 . (Track <: signals)))));10
this/inv6;(all ref0:(one Speed)|(ref0 in (Entry . (Track <: signals))));2;(Entry in ((Track <: signals) . Speed));5
this/inv5;(all ref0:(one Track)|(((# (Track . (Track <: succs))) > 1) <=> (ref0 in Junction)));2;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) <=> (ref0 in Junction)));4
this/inv4;(all ref0:(one univ)|((ref0 in Entry) => (no ((Track <: succs) . ref0))));2;(Entry = {ref0:(one Track)|(no ((Track <: succs) . ref0))});6
this/inv6;(all ref0:(one Track)|((ref0 in Entry) <=> (some (ref0 . (Track <: signals)))));2;(all ref0:(one Track)|((ref0 in Entry) => (some ((ref0 . (Track <: signals)) & Speed))));6
this/inv3;(all ref0:(one Track)|(no ((ref0 . (Track <: succs)) & Exit)));2;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));8
this/inv1;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in (Track . (Track <: succs))) && (ref1 in (Track . (Track <: succs)))));2;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) && (ref1 in Track)));8
this/inv6;(some ref0:(one Speed)|(ref0 in (Entry . (Track <: signals))));2;(Entry in ((Track <: signals) . Speed));5
this/inv1;(all ref0:(one Track)|(one ref1:(one Entry),ref2:(one Exit)|((ref1 in Track) && (ref2 in Track))));2;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) && (ref1 in Track)));9
this/inv4;(all ref0:(one Track)|((ref0 in Entry) => (all ref1:(one Track)|((ref1 -> ref0) !in (Track <: succs)))));2;(all ref0:(one Track)|((all ref1:(one Track)|((ref1 -> ref0) !in (Track <: succs))) <=> (ref0 in Entry)));12
this/inv1;(all ref0:(one Entry)|(some ref0));2;(some (Entry -> Exit));5
this/inv1;(all ref0:(one Track)|(one ref1:(one Entry),ref2:(one Exit)|((ref1 in ref0) && (ref2 in ref0))));2;(some ref0:(one Track)|((some ref1:(one Track)|(ref1 in Exit)) && (ref0 in Entry)));9
this/inv9;(all ref0:(one Junction),ref1:(one Semaphore),ref2:(one Track)|(((ref2 -> ref0) !in (Track <: succs)) => ((ref2 -> ref1) !in (Track <: signals))));2;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));14
this/inv3;(all ref0:(one Track)|(((# (ref0 . (Track <: succs))) = 0) => (ref0 = Exit)));2;(all ref0:(one Track)|(((# (ref0 . (Track <: succs))) = 0) <=> (ref0 in Exit)));6
this/inv1;(all ref0:(one Track)|(some ref1:(one Entry),ref2:(one Exit)|(((ref0 -> ref1) in (Track <: succs)) && ((ref0 -> ref2) in (Track <: succs)))));2;(some ref0:(one Track)|((some ref1:(one Track)|(ref1 in Exit)) && (ref0 in Entry)));13
this/inv10;(all ref0:(one Track)|((ref0 in Junction) => (all ref1:(one ((* (Track <: succs)) . ref0))|(some ref2:(one Semaphore)|(ref2 in (ref1 . (Track <: signals)))))));2;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (ref0 in ((Track <: signals) . Semaphore))));10
this/inv5;(all ref0:(one Track)|((some ref1:(one Track)|(((Track <: succs) in (ref1 -> ref0)) && (ref0 != ref1))) <=> (ref0 in Junction)));2;(all ref0:(one Track)|((some ref1:(one (ref0 . (~ (Track <: succs)))),ref2:(one (ref0 . (~ (Track <: succs))))|(ref1 != ref2)) <=> (ref0 in Junction)));13
this/inv1;(some (Entry & Exit));2;(some (Entry -> Exit));2
this/inv10;(all ref0:(one Track)|((ref0 in Junction) => (all ref1:(one ((^ (Track <: succs)) . ref0))|(some ref2:(one Semaphore)|(ref2 in (ref1 . (Track <: signals)))))));2;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (ref0 in ((Track <: signals) . Semaphore))));10
this/inv6;(all ref0:(one ((Entry & Track) - Exit))|(some ref1:(one Speed)|(ref0 in (ref0 . (Track <: signals)))));2;(all ref0:(one Entry)|(some ref1:(one Speed)|(ref1 in (ref0 . (Track <: signals)))));6
this/inv6;(all ref0:(one Track)|(one ((ref0 . (Track <: signals)) & Speed)));2;(all ref0:(one Entry)|(some ((ref0 . (Track <: signals)) & Speed)));4
this/inv9;(all ref0:(one Track)|(((ref0 . (* (Track <: succs))) !in Junction) => ((ref0 . (Track <: signals)) !in Semaphore)));2;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));7
this/inv1;((some Entry) && (some Junction));2;((some Entry) && (some Exit));2
this/inv9;(all ref0:(one Junction),ref1:(one Track)|(((ref1 -> ref0) !in (Track <: succs)) => (all ref2:(one Semaphore)|((ref1 -> ref2) !in (Track <: signals)))));2;(all ref0:(one Track)|((all ref1:(one Junction)|(ref1 !in (ref0 . (Track <: succs)))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));12
this/inv6;(all ref0:(one Track)|(one ref1:(one Signal)|((ref1 in (ref0 . (Track <: signals))) && (ref1 in Speed))));2;(all ref0:(one Entry)|(some ref1:(one Signal)|((ref1 in (ref0 . (Track <: signals))) && (ref1 in Speed))));4
this/inv8;(all ref0:(one univ)|((ref0 in Entry) => (all ref1:(one Exit)|(ref1 in (ref0 . (^ (Track <: succs)))))));2;(all ref0:(one Entry),ref1:(one Exit)|((ref0 != ref1) => (ref1 in (ref0 . (^ (Track <: succs))))));8
this/inv4;(all ref0:(one Entry)|(no (ref0 . (integer/prev[]))));2;(Entry = {ref0:(one Track)|(no ((Track <: succs) . ref0))});6
this/inv5;(all ref0:(one Track)|((ref0 in Junction) <=> (some (ref0 . (^ (Track <: succs))))));2;(all ref0:(one Track)|((some ref1:(one (ref0 . (~ (Track <: succs)))),ref2:(one (ref0 . (~ (Track <: succs))))|(ref1 != ref2)) <=> (ref0 in Junction)));12
this/inv4;(all ref0:(one Entry)|(no ((ref0 . (Track <: succs)) . (integer/prev[]))));2;(Entry = {ref0:(one Track)|(no ((Track <: succs) . ref0))});8
this/inv5;(all ref0:(one Track)|((ref0 in Junction) <=> (some ((^ (Track <: succs)) . ref0))));2;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});10
this/inv5;(all ref0:(one Track)|((ref0 in Junction) <=> (some (((* (Track <: succs)) . (Track <: succs)) . ref0))));2;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});12
this/inv5;(all ref0:(one Junction)|(some ref1:(one (Track - ref0)),ref2:(one (Track - ref0))|(((ref1 -> ref0) in (Track <: succs)) && ((ref2 -> ref0) in (Track <: succs)))));2;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref1 != ref2) && ((ref1 -> ref0) in (Track <: succs)) && ((ref2 -> ref0) in (Track <: succs)))) <=> (ref0 in Junction)));13
this/inv1;(all ref0:(one Track)|(some ref1:(one Entry),ref2:(one Exit)|((ref1 + ref2) in (ref0 . (* (Track <: succs))))));2;(some ref0:(one Entry),ref1:(one Exit)|((ref0 + ref1) in Track));12
this/inv3;(some ref0:(one Track)|((ref0 in Exit) => (all ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs)))));2;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (Track <: succs)))));12
this/inv3;(some ref0:(one Track)|((ref0 in Exit) => (all ref1:(one Track)|((ref0 != ref1) && ((ref0 -> ref1) !in (Track <: succs))))));2;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (Track <: succs)))));16
this/inv5;(all ref0:(one Track)|(((# ((~ (Track <: succs)) . ref0)) > 1) => (ref0 in Junction)));2;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) <=> (ref0 in Junction)));5
this/inv3;(all ref0:(one Track),ref1:(one (Track - ref0))|(((ref1 -> ref0) !in (Track <: succs)) => (ref0 in Exit)));2;(all ref0:(one Track)|((all ref1:(one Track)|(ref1 !in (ref0 . (Track <: succs)))) <=> (ref0 in Exit)));8
this/inv1;(all ref0:(one Track)|(some ref1:(one Entry),ref2:(one Exit)|((ref1 + ref2) in (ref0 . (^ (Track <: succs))))));2;(some ref0:(one Entry),ref1:(one Exit)|((ref0 + ref1) in Track));12
this/inv5;(all ref0:(one Track)|((! (lone (ref0 . (Track <: succs)))) <=> (ref0 in Junction)));2;(all ref0:(one Track)|((! (lone ((Track <: succs) . ref0))) <=> (ref0 in Junction)));4
this/inv8;(all ref0:(one Entry),ref1:(one Exit)|((ref0 -> ref1) in (Track <: succs)));2;(all ref0:(one Entry),ref1:(one Exit)|((ref0 -> ref1) in (* (Track <: succs))));5
this/inv1;(all ref0:(one Track)|(some ref1:(one Entry),ref2:(one Exit)|((ref1 in ((^ (Track <: succs)) . ref0)) && (ref2 in (ref0 . (^ (Track <: succs)))))));2;(some ref0:(one Track)|((some ref1:(one Track)|(ref1 in Exit)) && (ref0 in Entry)));15
this/inv1;((Entry in (Track . (^ (Track <: succs)))) && (Exit in (Track . (^ (Track <: succs)))));2;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) && (ref1 in Track)));12
this/inv3;(no (Exit . (^ (Track <: succs))));2;((all ref0:(one (Track - Exit))|(some (ref0 . (Track <: succs)))) && (no (Exit . (Track <: succs))));7
this/inv3;(all ref0:(one Exit),ref1:(one Signal),ref2:(one Track)|((ref0 != ref2) && ((ref0 -> ref1) !in (Track <: signals)) && ((ref0 -> ref2) !in (Track <: succs))));2;((all ref0:(one Exit),ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))) && (all ref2:(one Track)|((all ref3:(one Track)|((ref2 -> ref3) !in (Track <: succs))) => (ref2 in Exit))));18
this/inv3;(all ref0:(one Track)|((no (ref0 . (^ (Track <: succs)))) => ((ref0 !in Entry) && (ref0 !in Junction) && (ref0 in Exit))));2;(all ref0:(one Track)|((no (ref0 . (^ (Track <: succs)))) <=> (ref0 in Exit)));11
this/inv1;(all ref0:(one Track)|((ref0 in (Entry + Junction)) => (((# ((ref0 . (Track <: succs)) & Entry)) > 0) && ((# ((ref0 . (Track <: succs)) & Exit)) > 0))));2;(((# Entry) > 0) && ((# Exit) > 0));15
this/inv1;((Entry = (Track . (^ (Track <: succs)))) && (Exit = (Track . (^ (Track <: succs)))));2;((some (Entry & Track)) && (some (Exit & Track)));12
this/inv3;(all ref0:(one Track)|(ref0 !in (ref0 . (Track <: succs))));2;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (Track <: succs)))));7
this/inv3;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) => ((ref0 !in Entry) && (ref0 !in Junction) && (ref0 in Exit))));2;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));11
this/inv3;(all ref0:(one Exit)|((no (ref0 . (^ (Track <: succs)))) && (ref0 !in (ref0 . (^ (Track <: succs))))));2;((all ref0:(one Track)|((no (ref0 . (Track <: succs))) => (ref0 in Exit))) && (no (Exit . (Track <: succs))));11
this/inv3;(all ref0:(one Exit)|(ref0 !in (Track . (Track <: succs))));2;(Exit = (Track - (Track . (~ (Track <: succs)))));8
this/inv1;(all ref0:(one Track)|(((ref0 . (^ (Track <: succs))) = Entry) && ((ref0 . (^ (Track <: succs))) = Exit)));2;((some Entry) && (some Exit));13
this/inv3;(all ref0:(one Exit),ref1:(one Track)|(ref0 !in ((Track <: succs) . ref1)));2;(Exit = (Track - ((Track <: succs) . Track)));10
this/inv10;(all ref0:(one Track)|((all ref1:(one Junction)|(ref1 in (ref0 . (Track <: succs)))) => (all ref2:(one Semaphore)|(ref2 in (ref0 . (Track <: signals))))));2;(all ref0:(one Track)|((some ref1:(one Junction)|(ref1 in (ref0 . (Track <: succs)))) => (some ref2:(one Semaphore)|(ref2 in (ref0 . (Track <: signals))))));6
this/inv10;(all ref0:(one Junction),ref1:(one Track)|(one ref2:(one Semaphore)|((ref0 in (ref1 . (Track <: succs))) => (ref2 in (ref1 . (Track <: signals))))));2;(all ref0:(one Junction),ref1:(one Track)|(some ref2:(one Semaphore)|((ref0 in (ref1 . (Track <: succs))) => (ref2 in (ref1 . (Track <: signals))))));6
this/inv10;(all ref0:(one Track)|((all ref1:(one Junction)|(ref1 in (ref0 . (Track <: succs)))) => (some ref2:(one Semaphore)|(ref2 in (ref0 . (Track <: signals))))));2;(all ref0:(one Track)|((some ref1:(one Junction)|(ref1 in (ref0 . (Track <: succs)))) => (some ref2:(one Semaphore)|(ref2 in (ref0 . (Track <: signals))))));6
this/inv4;(all ref0:(one Track)|((ref0 !in (Track . (Track <: succs))) => (ref0 in Entry)));2;(all ref0:(one Track)|((ref0 !in (Track . (Track <: succs))) <=> (ref0 in Entry)));4
this/inv4;(all ref0:(one Track)|(((ref0 !in Exit) || (ref0 in Exit)) && ((ref0 !in Junction) || (ref0 in Junction)) && (no ((Track <: succs) . ref0))));2;(all ref0:(one Track)|(((no ((Track <: succs) . ref0)) => (ref0 in Entry)) && ((ref0 in Entry) => (no ((Track <: succs) . ref0)))));18
this/inv3;(all ref0:(one Track),ref1:(one Track)|((ref0 !in Exit) => (some (ref0 . (Track <: succs)))));2;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (Track <: succs)))));5
this/inv4;(all ref0:(one Entry)|(no (ref0 . (~ (Track <: succs)))));2;(all ref0:(one Track)|((no (ref0 . (~ (Track <: succs)))) <=> (ref0 in Entry)));6
this/inv4;(all ref0:(one Entry)|(no (ref0 . (~ (^ (Track <: succs))))));2;(all ref0:(one Track)|((no (ref0 . (~ (Track <: succs)))) <=> (ref0 in Entry)));7
this/inv2;(all ref0:(one Signal),ref1:(one Track)|((ref1 -> ref0) in (Track <: signals)));2;(all ref0:(one Signal)|(one ref1:(one Track)|((ref1 -> ref0) in (Track <: signals))));4
this/inv3;(all ref0:(one Exit)|((no (ref0 . (Track <: succs))) && (ref0 !in Entry)));2;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));8
this/inv2;(all ref0:(one Signal),ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: signals))) && (ref0 in (ref2 . (Track <: signals))) && (ref1 = ref2)));2;(all ref0:(one Signal)|(one ref1:(one Track)|(ref0 in (ref1 . (Track <: signals)))));14
this/inv9;(all ref0:(one Track),ref1:(one (Junction - ref0))|((ref1 !in (ref0 . (^ (Track <: succs)))) => (Semaphore !in (ref0 . (^ (Track <: signals))))));2;(all ref0:(one Track)|((all ref1:(one Junction)|(ref1 !in (ref0 . (Track <: succs)))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));9
this/inv5;(all ref0:(one Track)|((some ref1:(one Track)|(ref0 in (ref1 . (Track <: succs)))) <=> (ref0 in Junction)));2;(all ref0:(one Track)|((! (lone ((Track <: succs) . ref0))) <=> (ref0 in Junction)));9
this/inv9;(all ref0:(one Track)|(! (some ref1:(one Junction)|(((ref0 -> ref1) in (Track <: succs)) => (! (some ref2:(one Semaphore)|((ref0 -> ref2) in (Track <: signals))))))));2;(all ref0:(one Track)|((! (some ref1:(one Junction)|((ref0 -> ref1) in (Track <: succs)))) => (! (some ref2:(one Semaphore)|((ref0 -> ref2) in (Track <: signals))))));8
this/inv3;(all ref0:(one Track)|((no ((Track <: succs) . ref0)) => (Exit in ref0)));2;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));8
this/inv5;(all ref0:(one Track)|((! (lone (((^ (Track <: succs)) . Track) & ref0))) <=> (ref0 in Junction)));2;(all ref0:(one Track)|((! (lone ((Track <: succs) . ref0))) <=> (ref0 in Junction)));7
this/inv8;(all ref0:(one Entry),ref1:(one Entry)|(ref1 in (ref0 . (^ (Track <: succs)))));2;(all ref0:(one Entry),ref1:(one (Exit - ref0))|(ref1 in (ref0 . (^ (Track <: succs)))));4
this/inv10;(all ref0:(one Track)|(some ref1:(one (ref0 . (Track <: signals)))|(((ref0 . (^ (Track <: succs))) in Junction) => (ref1 in Semaphore))));2;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (ref0 in ((Track <: signals) . Semaphore))));10
this/inv5;(all ref0:(one Track)|((ref0 in Junction) => (ref0 in (Track . (^ (Track <: succs))))));2;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});13
this/inv2;(all ref0:(one Track)|(lone (ref0 . (Track <: signals))));2;(all ref0:(one Signal)|(one (ref0 . (~ (Track <: signals)))));5
this/inv9;(all ref0:(one Semaphore),ref1:(one Track)|((no ((ref1 . (Track <: succs)) & Junction)) <=> (ref0 !in (ref1 . (Track <: signals)))));2;(all ref0:(one Semaphore),ref1:(one Track)|((no ((ref1 . (Track <: succs)) & Junction)) => (ref0 !in (ref1 . (Track <: signals)))));6
this/inv10;(all ref0:(one Track)|(some ref1:(one (ref0 . (Track <: signals)))|(((ref0 . (Track <: succs)) in Junction) => (ref1 in Semaphore))));2;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (ref0 in ((Track <: signals) . Semaphore))));9
this/inv3;(all ref0:(one (Track - ((Track <: succs) . Track)))|(ref0 in Exit));2;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));7
this/inv3;(all ref0:(one Entry)|((ref0 !in Exit) && (ref0 !in Junction)));2;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (Track <: succs)))));9
this/inv3;(all ref0:(one (Track - ((Track <: succs) . Track)))|(Exit in ref0));2;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));9
this/inv6;(all ref0:(one Track)|((ref0 in Entry) => (one (ref0 . (Track <: signals)))));2;(all ref0:(one Track)|((ref0 in Entry) => (some ((ref0 . (Track <: signals)) & Speed))));6
this/inv5;(all ref0:(one Track)|(((no ((Track <: succs) . ref0)) && (one ((Track <: succs) . ref0))) <=> (ref0 !in Junction)));2;(all ref0:(one Track)|(((! (one ((Track <: succs) . ref0))) && (some ((Track <: succs) . ref0))) <=> (ref0 in Junction)));9
this/inv9;(all ref0:(one Junction),ref1:(one Track)|((ref0 !in (ref1 . (Track <: succs))) => (no ((ref1 . (Track <: signals)) & Semaphore))));2;(all ref0:(one Track)|((ref0 in (Track - ((Track <: succs) . Junction))) => (no ((ref0 . (Track <: signals)) & Semaphore))));11
this/inv5;(all ref0:(one Track),ref1:(one Track),ref2:(one Track)|((! disj[ref0,ref1,ref2]) || ((one (ref1 . (Track <: succs))) && (one (ref2 . (Track <: succs))) && (ref0 !in (ref0 . (^ (Track <: succs)))) && (ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs)))) || ((ref0 in Junction) <=> (ref0 in (Track . (^ (Track <: succs)))))));2;((all ref0:(one Track),ref1:(one Track),ref2:(one Track)|((! disj[ref1,ref2]) || (((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs)))) => (ref0 in Junction)))) && (all ref3:(one Junction)|((# ((Track <: succs) . ref3)) > 1)));35
this/inv9;((some Junction) implies (all ref0:(one Junction),ref1:(one Track)|((! ((ref1 -> ref0) in (Track <: succs))) => (! (some ref2:(one Semaphore)|((ref1 -> ref2) in (Track <: signals)))))) else (all ref3:(one Track)|(! (some ref4:(one Semaphore)|((ref3 -> ref4) in (Track <: signals))))));2;(all ref0:(one Track)|((! (some ref1:(one Junction)|((ref0 -> ref1) in (Track <: succs)))) => (! (some ref2:(one Semaphore)|((ref0 -> ref2) in (Track <: signals))))));19
this/inv8;(all ref0:(one Entry),ref1:(one Exit)|(ref1 in (Entry . (^ (Track <: succs)))));2;(all ref0:(one Entry),ref1:(one (Exit - ref0))|(ref1 in (ref0 . (^ (Track <: succs)))));6
this/inv10;(all ref0:(one Track)|(((ref0 . (Track <: succs)) in Junction) => ((ref0 . (Track <: signals)) in Semaphore)));2;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (ref0 in ((Track <: signals) . Semaphore))));6
this/inv5;(all ref0:(one Track)|((all ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));2;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));6
this/inv3;(all ref0:(one Exit)|(! (some ref1:(one Track)|((ref0 -> ref1) in (Track <: succs)))));2;(all ref0:(one Track)|((all ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))) <=> (ref0 in Exit)));11
this/inv3;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) = 0) && (ref0 in Exit)));2;(all ref0:(one Track)|(((# (ref0 . (Track <: succs))) = 0) <=> (ref0 in Exit)));6
this/inv9;(all ref0:(one Junction),ref1:(one Semaphore),ref2:(one Track)|((ref0 !in ((Track <: succs) . ref2)) => (ref1 !in (ref2 . (Track <: signals)))));2;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));10
this/inv3;(all ref0:(one Exit)|((# ((Track <: succs) . ref0)) = 0));2;(Exit = (Track - ((Track <: succs) . Track)));8
this/inv3;(all ref0:(one (Track - Exit))|(some (ref0 . (Track <: succs))));2;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (Track <: succs)))));6
this/inv5;(all ref0:(one Junction)|(some ref1:(one Track)|((2 < (# ref1)) && (ref0 in (ref1 . (Track <: succs))))));2;(all ref0:(one Track)|((2 < (# ((Track <: succs) . ref0))) <=> (ref0 in Junction)));13
this/inv10;(all ref0:(one Junction),ref1:(one Semaphore),ref2:(one Track)|((ref0 in (ref2 . (Track <: succs))) => (ref1 in (ref2 . (Track <: signals)))));2;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (ref0 in ((Track <: signals) . Semaphore))));10
this/inv10;(all ref0:(one Junction),ref1:(one Track)|(some ref2:(one Semaphore)|(((ref0 -> ref1) in (Track <: succs)) => ((ref1 -> ref2) in (Track <: signals)))));2;(all ref0:(one Junction),ref1:(one Track)|(some ref2:(one Semaphore)|((ref0 in (ref1 . (Track <: succs))) => ((ref1 -> ref2) in (Track <: signals)))));8
this/inv5;(all ref0:(one Junction)|(some ref1:(one Track),ref2:(one Track)|((ref0 != ref1) && (ref0 != ref2) && ((ref1 -> ref0) in (Track <: succs)) && ((ref2 -> ref1) in (Track <: succs)) && disj[ref1,ref2])));2;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref1 != ref2) && ((ref1 -> ref0) in (Track <: succs)) && ((ref2 -> ref0) in (Track <: succs)))) <=> (ref0 in Junction)));20
this/inv5;(! (some ref0:(one Junction)|((ref0 -> ref0) in (Track <: succs))));2;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});11
this/inv9;(all ref0:(one Junction),ref1:(one Track)|((ref0 !in (ref1 . (Track <: succs))) => ((# ((ref1 . (Track <: signals)) & Semaphore)) = 0)));2;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));14
this/inv3;(no (((Track <: succs) . Track) & Exit));2;(Exit = (Track - ((Track <: succs) . Track)));7
this/inv3;((all ref0:(one Track)|(((# (ref0 . (Track <: succs))) = 0) => (ref0 in Exit))) && (all ref1:(one Exit)|(ref1 !in Junction)));2;(all ref0:(one Track)|(((# (ref0 . (Track <: succs))) = 0) <=> (ref0 in Exit)));9
this/inv3;(Exit !in ((Track <: succs) . Track));2;(Exit = (Track - ((Track <: succs) . Track)));4
this/inv4;(all ref0:(one Track),ref1:(one Track)|((ref0 !in (ref1 . (^ (Track <: succs)))) <=> (ref0 in Entry)));2;(all ref0:(one Track)|((all ref1:(one Track)|(ref0 !in (ref1 . (Track <: succs)))) <=> (ref0 in Entry)));5
this/inv8;(all ref0:(one Track)|((ref0 in Entry) => ((ref0 . (^ (Track <: succs))) = Exit)));2;(all ref0:(one Entry)|(((ref0 + (ref0 . (^ (Track <: succs)))) & Exit) = Exit));10
this/inv8;(all ref0:(one Entry)|(some ref1:(one Exit)|((ref0 -> ref1) in (Track <: succs))));2;(all ref0:(one Entry),ref1:(one Exit)|((ref0 -> ref1) in (* (Track <: succs))));5
this/inv4;(all ref0:(one Track),ref1:(one Track)|(((ref0 -> ref1) in (Track <: succs)) => (ref1 in Entry)));2;(all ref0:(one Track)|((! (some ref1:(one Track)|(ref0 in (ref1 . (Track <: succs))))) <=> (ref0 in Entry)));11
this/inv5;(all ref0:(one Track),ref1:(one Track),ref2:(one Track)|(((ref0 in (ref1 . (^ (Track <: succs)))) && (ref0 in (ref2 . (^ (Track <: succs))))) => (ref0 in Junction)));2;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));13
this/inv5;(all ref0:(one Junction)|(some ref1:(one Track),ref2:(one Track)|((ref0 != ref1) && (ref0 != ref2) && (ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))));2;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));16
this/inv9;(all ref0:(one Track),ref1:(one Track)|((! disj[ref0,ref1]) || ((((ref0 -> ref1) in (Track <: succs)) && (ref1 !in Junction)) => (Semaphore !in (ref0 . (Track <: signals)))) || ((ref0 -> ref1) !in (Track <: succs))));2;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));25
this/inv3;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) || ((ref0 in Exit) => (one (ref0 . (Track <: succs))))));2;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));9
this/inv3;(all ref0:(one Track)|((ref0 in Exit) => (ref0 in (ref0 . (Track <: succs)))));2;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (Track <: succs)))));9
this/inv3;(all ref0:(one Exit),ref1:(one Track)|((ref1 -> ref0) !in (Track <: succs)));2;(all ref0:(one Track)|((all ref1:(one Track)|(ref1 !in (ref0 . (Track <: succs)))) <=> (ref0 in Exit)));10
this/inv3;((all ref0:(one Track)|(ref0 !in (ref0 . (Track <: succs)))) && (all ref1:(one Track)|((no (ref1 . (Track <: succs))) => (ref1 in Exit))));2;(all ref0:(one Exit),ref1:(one Track)|((no (ref0 . (Track <: succs))) && ((no (ref1 . (Track <: succs))) => (ref1 in Exit))));7
this/inv8;(all ref0:(one Track)|((some (ref0 & Entry)) => (some ((ref0 . (^ (Track <: succs))) & Entry))));2;(all ref0:(one Track)|((some (ref0 & Entry)) => (Exit in (ref0 . (* (Track <: succs))))));9
this/inv8;(all ref0:(one Track)|((some (ref0 & Entry)) => (some ((ref0 . (^ (Track <: succs))) & Exit))));2;(all ref0:(one Track)|((some (ref0 & Entry)) => (Exit in (ref0 . (* (Track <: succs))))));9
this/inv3;(all ref0:(one Exit)|((no (ref0 . (Track <: succs))) && (ref0 !in Entry) && (ref0 !in Junction)));2;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));11
this/inv10;(all ref0:(one Track)|((one (((Track <: succs) . ref0) & Junction)) => (some ((ref0 . (Track <: signals)) & Semaphore))));2;(all ref0:(one Track)|((some ((ref0 . (Track <: succs)) & Junction)) => (some ((ref0 . (Track <: signals)) & Semaphore))));6
this/inv5;(all ref0:(one ((Track - Junction) - Entry))|(one ref1:(one Track)|(ref1 in (ref1 . (Track <: succs)))));2;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});11
this/inv3;(all ref0:(one Track),ref1:(one Track)|((ref0 in Exit) => ((ref1 -> ref0) !in (Track <: succs))));2;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (Track <: succs)))));12
this/inv3;(all ref0:(one Track)|((ref0 in Exit) => (no ((ref0 . (Track <: succs)) & Track))));2;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (Track <: succs)))));10
this/inv9;(all ref0:(one Track)|((Junction in ((Track <: succs) . ref0)) => (Semaphore !in (ref0 . (Track <: signals)))));2;(all ref0:(one Track)|((! (some ref1:(one Junction)|(ref1 in (ref0 . (Track <: succs))))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));11
this/inv9;(all ref0:(one Track)|((Junction in (ref0 . (Track <: succs))) => (no ((ref0 . (Track <: signals)) & Semaphore))));2;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => (no ((ref0 . (Track <: signals)) & Semaphore))));7
this/inv5;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|(disj[ref1,ref2] && ((ref1 & ref2) in (ref0 . (~ (Track <: succs)))))) <=> (ref0 in Junction)));2;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|(disj[ref1,ref2] && ((ref1 + ref2) in ((Track <: succs) . ref0)))) <=> (ref0 in Junction)));11
this/inv3;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) => (no (ref0 . (Track <: succs)))));2;((all ref0:(one (Track - Exit))|(some (ref0 . (Track <: succs)))) && (no (Exit . (Track <: succs))));8
this/inv3;(all ref0:(one Exit)|((# (ref0 . (Track <: succs))) < 1));2;(all ref0:(one Track)|(((# (ref0 . (Track <: succs))) = 0) <=> (ref0 in Exit)));8
this/inv5;(all ref0:(one Track)|((ref0 in Junction) <=> (some (Track . (^ (Track <: succs))))));2;(all ref0:(one Track)|((some ref1:(one (ref0 . (~ (Track <: succs)))),ref2:(one (ref0 . (~ (Track <: succs))))|(ref1 != ref2)) <=> (ref0 in Junction)));12
this/inv5;(all ref0:(one Track),ref1:(one Track),ref2:(one Track)|(((ref0 in ((ref1 . (Track <: succs)) & (ref1 . (Track <: succs)))) && (ref1 != ref2)) => (ref0 in Junction)));2;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));15
this/inv5;(all ref0:(one Junction),ref1:(one Track),ref2:(one Track)|((ref0 in ((ref1 . (Track <: succs)) & (ref2 . (Track <: succs)))) && (ref1 != ref2)));2;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));15
this/inv5;(all ref0:(one Junction),ref1:(one Track),ref2:(one Track)|((ref1 != ref2) => (ref0 in ((ref1 . (Track <: succs)) & (ref2 . (Track <: succs))))));2;(all ref0:(one Track)|((some ref1:(one (ref0 . (~ (Track <: succs)))),ref2:(one (ref0 . (~ (Track <: succs))))|(ref1 != ref2)) <=> (ref0 in Junction)));16
this/inv8;(all ref0:(one Entry),ref1:(one Exit)|(ref1 in ((ref0 . (^ (Track <: succs))) - ref0)));2;(all ref0:(one Entry),ref1:(one (Exit - ref0))|(ref1 in (ref0 . (^ (Track <: succs)))));6
this/inv3;((all ref0:(one Track)|((no (ref0 . (Track <: succs))) => (Exit in ref0))) && (all ref1:(one Track)|((Exit in ref1) => (no (ref1 . (Track <: succs))))));2;(all ref0:(one Track)|(((no (ref0 . (Track <: succs))) => (ref0 in Exit)) && ((ref0 in Exit) => (no (ref0 . (Track <: succs))))));9
this/inv5;(all ref0:(one Track)|((ref0 in Junction) <=> (some (ref0 & (Track . (^ (Track <: succs)))))));2;(all ref0:(one Track)|((some ref1:(one (ref0 . (~ (Track <: succs)))),ref2:(one (ref0 . (~ (Track <: succs))))|(ref1 != ref2)) <=> (ref0 in Junction)));14
this/inv5;(all ref0:(one Track)|(((# (ref0 & (Track . (^ (Track <: succs))))) > 1) <=> (ref0 in Junction)));2;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) <=> (ref0 in Junction)));7
this/inv5;((all ref0:(one Track)|(ref0 !in (ref0 . (Track <: succs)))) && (all ref1:(one Track)|(((# (ref1 & (Track . (^ (Track <: succs))))) > 1) <=> (ref1 in Junction))));2;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) <=> (ref0 in Junction)));16
this/inv5;(all ref0:(one Junction)|((# (Track . (^ (Track <: succs)))) > int[((# ((Track . (^ (Track <: succs))) - ref0)) + 1)]));2;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) <=> (ref0 in Junction)));18
this/inv5;((all ref0:(one Junction),ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) => ((ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2)))) && (all ref3:(one Track)|((ref3 !in (Track . (Track <: succs))) => (ref3 !in Junction))));2;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));22
this/inv3;(all ref0:(one Exit),ref1:(one Track)|((no (ref1 . (Track <: succs))) <=> (ref0 in (ref1 . (Track <: signals)))));2;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));9
this/inv8;(all ref0:(one Track)|((ref0 in Exit) => (ref0 in (Entry . (* (Track <: succs))))));2;((Entry -> Exit) in (* (Track <: succs)));9
this/inv5;((all ref0:(one Track)|((ref0 !in (Track . (Track <: succs))) => (ref0 !in Junction))) && (all ref1:(one Track),ref2:(one Track),ref3:(one Track)|(((ref1 !in (ref3 . (Track <: succs))) && (ref1 in (ref2 . (Track <: succs))) && (ref2 != ref3)) => (ref1 !in Junction))));2;((all ref0:(one ((Track - Junction) - Entry))|(one ref1:(one Track)|(ref0 in (ref1 . (Track <: succs))))) && (all ref2:(one Junction)|(some ref3:(one Track),ref4:(one Track)|((ref2 in (ref3 . (Track <: succs))) && (ref2 in (ref4 . (Track <: succs))) && (ref3 != ref4)))));31
this/inv10;(all ref0:(one Track)|(some ref1:(one (ref0 . (Track <: signals)))|((some ((ref0 . (Track <: succs)) & Junction)) => (ref1 in Semaphore))));2;(all ref0:(one Track)|((some ((ref0 . (Track <: succs)) & Junction)) => (some ((ref0 . (Track <: signals)) & Semaphore))));10
this/inv5;((all ref0:(one Track)|((ref0 !in Junction) <=> (ref0 !in (Track . (Track <: succs))))) && (all ref1:(one Track),ref2:(one Track),ref3:(one Track)|(((ref1 != ref2) && (ref1 != ref3) && (ref1 !in (ref3 . (Track <: succs))) && (ref1 in (ref2 . (Track <: succs))) && (ref2 != ref3)) <=> (ref1 !in Junction))));2;((all ref0:(one ((Track - Junction) - Entry))|(one ref1:(one Track)|(ref0 in (ref1 . (Track <: succs))))) && (all ref2:(one Junction)|(some ref3:(one Track),ref4:(one Track)|((ref2 in (ref3 . (Track <: succs))) && (ref2 in (ref4 . (Track <: succs))) && (ref3 != ref4)))));35
this/inv9;(all ref0:(one Semaphore),ref1:(one Track)|((Junction !in ((Track <: succs) . ref1)) => (ref0 !in (ref1 . (Track <: signals)))));2;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));9
this/inv9;(all ref0:(one Junction),ref1:(one Track)|((! (ref0 in (ref1 . (Track <: succs)))) => (no ((ref1 . (Track <: signals)) & Semaphore))));2;(all ref0:(one Track)|((ref0 in (Track - ((Track <: succs) . Junction))) => (no ((ref0 . (Track <: signals)) & Semaphore))));10
this/inv10;(all ref0:(one Junction),ref1:(one Track)|((ref0 in (ref1 . (Track <: succs))) => (Semaphore in (ref1 . (Track <: signals)))));2;(all ref0:(one Junction),ref1:(one Track)|(some ref2:(one Semaphore)|((ref0 in (ref1 . (Track <: succs))) => (ref2 in (ref1 . (Track <: signals))))));7
this/inv9;(all ref0:(one Track)|(((ref0 . (^ (Track <: succs))) !in Junction) => ((ref0 . (Track <: signals)) !in Semaphore)));2;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));7
this/inv10;(all ref0:(one Track)|((some (((Track <: succs) . ref0) & Junction)) => (some ((((Track <: succs) . ref0) . (Track <: signals)) & Semaphore))));2;(all ref0:(one Track)|((some ((ref0 . (Track <: succs)) & Junction)) => (some ((ref0 . (Track <: signals)) & Semaphore))));6
this/inv10;(all ref0:(one Signal),ref1:(one Track),ref2:(one Track)|(((ref2 in (ref1 . (Track <: succs))) && (Junction in ref2)) => ((ref0 in (ref1 . (Track <: signals))) && (ref0 in Semaphore))));2;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (ref0 in ((Track <: signals) . Semaphore))));18
this/inv5;((all ref0:(one Track)|((ref0 in (Track . (Track <: succs))) => (ref0 in Junction))) && (all ref1:(one Junction)|(ref1 in (Track . (Track <: succs)))));2;(all ref0:(one Track)|((! (lone ((Track <: succs) . ref0))) <=> (ref0 in Junction)));17
this/inv10;(all ref0:(one Junction),ref1:(one Semaphore),ref2:(one Track)|((no (ref0 . (Track <: signals))) && (ref1 in (ref2 . (Track <: signals)))));2;(((Track <: signals) . Semaphore) = ((Track <: succs) . Junction));14
this/inv8;((all ref0:(one Entry),ref1:(one Exit)|(ref1 in (ref0 . (^ (Track <: succs))))) && (no Semaphore) && (no Signal) && (no Speed));2;(all ref0:(one Entry),ref1:(one (Exit - ref0))|(ref1 in (ref0 . (^ (Track <: succs)))));11
this/inv10;(all ref0:(one Track),ref1:(one Track)|(((one (ref1 & Junction)) && (ref1 in (ref0 . (Track <: succs)))) => (Semaphore in (ref0 . (Track <: signals)))));2;(all ref0:(one Track),ref1:(one Track)|(((one (ref1 & Junction)) && (ref1 in (ref0 . (Track <: succs)))) => (some ref2:(one Semaphore)|(ref2 in (ref0 . (Track <: signals))))));7
this/inv8;(all ref0:(one Track)|((one (ref0 & Exit)) => (ref0 in (Track . (^ (Track <: succs))))));2;(all ref0:(one Entry)|(Exit in (ref0 + (ref0 . (^ (Track <: succs))))));11
this/inv8;(all ref0:(one Track)|((one (ref0 & Entry)) || ((one (ref0 & Exit)) => (ref0 in (Track . (^ (Track <: succs)))))));2;(all ref0:(one Track),ref1:(one Track)|(((one (ref0 & Entry)) && (one (ref1 & Exit)) && (ref0 != ref1)) => (ref1 in (ref0 . (^ (Track <: succs))))));16
this/inv1;((some Entry) || (some Exit));1;((some Entry) && (some Exit));2
this/inv1;(all ref0:(one Track)|(some ((Track <: succs) . ref0)));1;(some (Entry -> Exit));7
this/inv2;((~ (Track <: signals)) in (Signal one->lone Track));1;((Track <: signals) in (Track one-> Signal));5
this/inv5;(all ref0:(one Junction)|((! (one (ref0 . (Track <: succs)))) && (some (ref0 . (Track <: succs)))));1;(all ref0:(one Track)|(((! (one (ref0 . (~ (Track <: succs))))) && (some (ref0 . (~ (Track <: succs))))) <=> (ref0 in Junction)));8
this/inv2;(all ref0:(one Track),ref1:(one Track)|((ref0 != ref1) => (no ((ref0 . (Track <: signals)) & (ref1 . (Track <: signals))))));1;((all ref0:(one Track),ref1:(one Track)|((ref0 != ref1) => (no ((ref0 . (Track <: signals)) & (ref1 . (Track <: signals)))))) && (no (Signal - (Track . (Track <: signals)))));11
this/inv2;(all ref0:(one Track),ref1:(one Track)|(some ref2:(one Signal)|(((ref2 in (ref0 . (Track <: signals))) && (ref2 in (ref1 . (Track <: signals)))) => (ref0 = ref1))));1;((all ref0:(one Signal)|(lone ((Track <: signals) . ref0))) && (Signal in (Track . (Track <: signals))));17
this/inv3;(((Track <: succs) . none) = Exit);1;(Exit = (Track - ((Track <: succs) . Track)));6
this/inv5;(all ref0:(one Track)|(((! (one (ref0 . (Track <: succs)))) && (some (ref0 . (Track <: succs)))) <=> (ref0 in Junction)));1;(all ref0:(one Track)|(((! (one (ref0 . (~ (Track <: succs))))) && (some (ref0 . (~ (Track <: succs))))) <=> (ref0 in Junction)));4
this/inv7;(all ref0:(one Exit)|(no ref1:(one Entry)|(ref1 in (ref0 . (^ (Track <: succs))))));1;(no ref0:(one Track)|(ref0 in (ref0 . (^ (Track <: succs)))));5
this/inv2;(one Track);1;((Track <: signals) in (Track one-> Signal));5
this/inv5;(all ref0:(one Junction),ref1:(one Track)|(some ((ref1 . (Track <: succs)) & Junction)));1;(all ref0:(one Track)|((! (lone ((Track <: succs) . ref0))) <=> (ref0 in Junction)));12
this/inv5;(all ref0:(one Junction),ref1:(one Track)|(some (ref0 & (ref1 . (Track <: succs)))));1;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});12
this/inv7;(no (Entry & (Exit . (^ (Track <: succs)))));1;(no ((^ (Track <: succs)) & iden));4
this/inv3;(all ref0:(one Exit),ref1:(one Track)|(ref1 !in ((Track <: succs) . ref0)));1;(Exit = (Track - ((Track <: succs) . Track)));10
this/inv4;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Entry)));1;(all ref0:(one Track)|((no (ref0 . (~ (Track <: succs)))) <=> (ref0 in Entry)));3
this/inv7;(no (Entry & (Exit . (* (Track <: succs)))));1;(no ((^ (Track <: succs)) & iden));6
this/inv6;(all ref0:(one Signal),ref1:(one Track)|((ref1 in Entry) => ((ref0 in Speed) && ((ref1 -> ref0) in (Track <: signals)))));1;(all ref0:(one Track)|((ref0 in Entry) => (some ref1:(one Speed)|(ref1 in (ref0 . (Track <: signals))))));12
this/inv3;(all ref0:(one Track)|((ref0 in (ref0 . (^ (Track <: succs)))) => (ref0 !in Exit)));1;(all ref0:(one Track)|(((ref0 . (Track <: succs)) in none) <=> (ref0 in Exit)));9
this/inv5;(all ref0:(one Junction),ref1:(one Track)|((! (one (ref0 & (ref1 . (Track <: succs))))) && (some (ref0 & (ref1 . (Track <: succs))))));1;(all ref0:(one Track)|(((! (one ((Track <: succs) . ref0))) && (some ((Track <: succs) . ref0))) <=> (ref0 in Junction)));15
this/inv2;(all ref0:(one Signal)|(some (ref0 & (Track . (Track <: signals)))));1;(all ref0:(one Signal)|(one ((Track <: signals) . ref0)));8
this/inv5;(some (Junction & (Track . (Track <: succs))));1;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});8
this/inv6;(all ref0:(one Track)|(one ref1:(one Signal)|((ref0 in Entry) => (((ref0 -> ref1) in (Track <: signals)) && (ref1 in Speed)))));1;(all ref0:(one Track)|(some ref1:(one Signal)|((ref0 in Entry) => (((ref0 -> ref1) in (Track <: signals)) && (ref1 in Speed)))));4
this/inv5;(Junction in (Track . (Track <: succs)));1;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});7
this/inv5;(Junction in ((Track . (Track <: succs)) . (Track <: succs)));1;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});9
this/inv6;(all ref0:(one Track)|(one ref1:(one Signal)|((((ref0 -> ref1) in (Track <: signals)) && (ref0 in Entry)) => (ref1 in Speed))));1;(all ref0:(one Entry)|(some ref1:(one Signal)|(((ref0 -> ref1) in (Track <: signals)) && (ref1 in Speed))));10
this/inv1;(some ref0:(one Entry),ref1:(one Junction)|((ref0 in Track) && (ref1 in Track)));1;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) && (ref1 in Track)));4
this/inv5;(Junction = (Track - ((Track . (Track <: succs)) . (Track <: succs))));1;(Junction = (Track - {ref0:(one Track)|(lone ((Track <: succs) . ref0))}));6
this/inv2;(all ref0:(one Track),ref1:(one Track)|((no ((ref0 . (Track <: signals)) & (ref1 . (Track <: signals)))) && (ref0 != ref1)));1;(all ref0:(one Signal)|(some ref1:(one Track)|((no (ref0 & ((Track - ref1) . (Track <: signals)))) && (ref0 in (ref1 . (Track <: signals))))));12
this/inv4;(Track in (Entry . (* (Track <: succs))));1;(Entry = (Track - (Track . (Track <: succs))));7
this/inv1;(some ref0:(one Entry),ref1:(one Junction)|((ref0 in Entry) || (ref1 in Track)));1;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) || (ref1 in Track)));6
this/inv4;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) => (ref0 in Entry)));1;(all ref0:(one Track)|((no (ref0 . (~ (Track <: succs)))) <=> (ref0 in Entry)));5
this/inv5;(Junction = (Track - ((Track . (Track <: succs)) . (^ (Track <: succs)))));1;(Junction = (Track - {ref0:(one Track)|(lone ((Track <: succs) . ref0))}));7
this/inv9;(all ref0:(one Signal),ref1:(one Track),ref2:(one Track)|((((ref1 -> ref2) in (Track <: succs)) && (ref2 in Junction)) => ((ref0 !in Semaphore) && ((ref1 -> ref0) in (Track <: signals)))));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|((ref0 -> ref1) in (Track <: succs)))) => (! (some ref2:(one Semaphore)|((ref0 -> ref2) in (Track <: signals))))));20
this/inv4;(Track in (Entry . (^ (Track <: succs))));1;(Entry = (Track - (Track . (^ (Track <: succs)))));6
this/inv2;(all ref0:(one Signal)|(lone (ref0 . (Track <: signals))));1;(all ref0:(one Signal)|(one (ref0 . (~ (Track <: signals)))));5
this/inv4;((one Entry) && (Track in (Entry . (* (Track <: succs)))));1;(Entry = (Track - (Track . (Track <: succs))));8
this/inv9;(all ref0:(one Track),ref1:(one Track)|(some ref2:(one Signal)|((((ref0 -> ref1) in (Track <: succs)) && (ref1 in Junction)) => (((ref0 -> ref2) in (Track <: signals)) && (ref2 !in Semaphore)))));1;(all ref0:(one Track)|((all ref1:(one Track)|(((ref0 -> ref1) in (Track <: succs)) => (ref1 !in Junction))) => (all ref2:(one Signal)|(((ref0 -> ref2) in (Track <: signals)) => (ref2 !in Semaphore)))));12
this/inv5;(Junction in (Track . (^ ((Track <: succs) . (Track <: succs)))));1;(Junction = (Track - {ref0:(one Track)|(lone ((Track <: succs) . ref0))}));9
this/inv6;(all ref0:(one Track)|(some ref1:(one Signal)|(((ref0 in Entry) && (ref1 in (ref0 . (Track <: signals)))) => (ref1 in Speed))));1;(all ref0:(one Track)|(some ref1:(one Signal)|((ref0 in Entry) => ((ref1 in (ref0 . (Track <: signals))) && (ref1 in Speed)))));6
this/inv4;(all ref0:(one Entry)|(no (ref0 . (Track <: succs))));1;(Entry = {ref0:(one Track)|(no ((Track <: succs) . ref0))});6
this/inv9;(all ref0:(one Signal),ref1:(one Track),ref2:(one Track)|((((ref1 -> ref0) in (Track <: signals)) && ((ref1 -> ref2) in (Track <: succs)) && (ref2 in Junction)) => (ref0 !in Semaphore)));1;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));19
this/inv5;(all ref0:(one Track),ref1:(one Track),ref2:(one Track)|(((ref1 in ((Track <: succs) . ref0)) && (ref2 in ((Track <: succs) . ref0))) <=> (ref0 in Junction)));1;(all ref0:(one Track)|(((! (one ((Track <: succs) . ref0))) && (some ((Track <: succs) . ref0))) <=> (ref0 in Junction)));11
this/inv1;(all ref0:(one Track)|(some ref1:(one Entry),ref2:(one Exit)|((ref0 in (ref1 . (Track <: succs))) && (ref1 in (ref0 . (Track <: succs))))));1;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) && (ref1 in Track)));13
this/inv4;((no (Entry -> Entry)) && (Track in (Entry . (* (Track <: succs)))));1;(Entry = (Track - (Track . (Track <: succs))));10
this/inv5;(all ref0:(one Track)|((ref0 in Junction) <=> (ref0 in (((Track . (Track <: succs)) . (Track <: succs)) . (^ (Track <: succs))))));1;(all ref0:(one Track)|((some ref1:(one (ref0 . (~ (Track <: succs)))),ref2:(one (ref0 . (~ (Track <: succs))))|(ref1 != ref2)) <=> (ref0 in Junction)));17
this/inv3;(all ref0:(one Track),ref1:(one Track)|((no (Track <: succs)) => (ref0 in Exit)));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));7
this/inv1;(all ref0:(one Track)|(some ref1:(one Entry),ref2:(one Exit)|((ref0 in (ref2 . (Track <: succs))) && (ref1 in (ref0 . (Track <: succs))))));1;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) && (ref1 in Track)));13
this/inv6;(all ref0:(one Track)|(some ref1:(one Speed)|((ref0 in Entry) && (ref1 in (ref0 . (Track <: signals))))));1;(all ref0:(one Track)|((ref0 in Entry) => (some ref1:(one Speed)|(ref1 in (ref0 . (Track <: signals))))));6
this/inv9;(all ref0:(one Signal),ref1:(one Track),ref2:(one Track)|((((ref1 -> ref2) in (Track <: succs)) && (ref1 in Junction) && ((ref2 -> ref0) in (Track <: signals))) => (ref0 !in Semaphore)));1;(all ref0:(one Track)|((all ref1:(one Track)|(((ref0 -> ref1) in (Track <: succs)) => (ref1 !in Junction))) => (all ref2:(one Signal)|(((ref0 -> ref2) in (Track <: signals)) => (ref2 !in Semaphore)))));17
this/inv3;(all ref0:(one Track)|((no (Track <: succs)) => (ref0 in Exit)));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));6
this/inv5;(Junction in ((Track . (Track <: succs)) . (^ (Track <: succs))));1;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});10
this/inv8;(Exit in (Track . (* (Track <: succs))));1;(all ref0:(one Entry)|(Exit in (ref0 . (* (Track <: succs)))));3
this/inv9;(all ref0:(one Signal),ref1:(one Track),ref2:(one Track)|((((ref1 -> ref2) in (Track <: succs)) && (ref1 in Junction)) => ((ref0 !in Semaphore) && ((ref2 -> ref0) in (Track <: signals)))));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|((ref0 -> ref1) in (Track <: succs)))) => (! (some ref2:(one Semaphore)|((ref0 -> ref2) in (Track <: signals))))));20
this/inv3;(no ((Exit . (Track <: succs)) & (Track . (Track <: succs))));1;(Exit = (Track - (Track . (~ (Track <: succs)))));8
this/inv5;(Junction in (((Track . (Track <: succs)) . (^ (Track <: succs))) - Junction));1;(Junction = (Track - {ref0:(one Track)|(lone ((Track <: succs) . ref0))}));11
this/inv6;((Track <: signals) in (Entry ->some Signal));1;(Entry in ((Track <: signals) . Speed));6
this/inv3;(all ref0:(one Track)|((ref0 in Exit) => (no (Track <: succs))));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));10
this/inv5;(all ref0:(one Junction)|((# ((Track <: succs) . ref0)) = 2));1;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});7
this/inv9;(all ref0:(one Signal),ref1:(one Track),ref2:(one Track)|((((ref1 -> ref2) in (Track <: succs)) && (ref2 !in Junction)) => ((ref0 !in Semaphore) && ((ref1 -> ref0) in (Track <: signals)))));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|((ref0 -> ref1) in (Track <: succs)))) => (! (some ref2:(one Semaphore)|((ref0 -> ref2) in (Track <: signals))))));20
this/inv8;((Track -> Exit) in (^ (Track <: succs)));1;((Entry -> Exit) in (* (Track <: succs)));4
this/inv5;(all ref0:(one Track)|((lone ((Track <: succs) . ref0)) <=> (ref0 in Junction)));1;(all ref0:(one Track)|((! (lone ((Track <: succs) . ref0))) <=> (ref0 in Junction)));3
this/inv6;(all ref0:(one Signal),ref1:(one Track)|((((ref1 -> ref0) in (Track <: signals)) && (ref1 = Entry)) => (Speed in ref0)));1;(all ref0:(one Entry)|(some ref1:(one Signal)|(((ref0 -> ref1) in (Track <: signals)) && (ref1 in Speed))));14
this/inv8;((Track -> Exit) in (* (Track <: succs)));1;((Entry -> Exit) in (* (Track <: succs)));2
this/inv3;(all ref0:(one Exit)|(no ((ref0 . (Track <: succs)) & Track)));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));8
this/inv3;((all ref0:(one Track)|((no (ref0 . (Track <: succs))) => (ref0 in Exit))) && (Track !in (Track . (^ (Track <: succs)))));1;((all ref0:(one Track)|((no (ref0 . (Track <: succs))) => (ref0 in Exit))) && (no (Exit . (Track <: succs))));8
this/inv8;(all ref0:(one Track),ref1:(one Track)|(((ref0 in Entry) && (ref1 in Exit)) => (ref0 in (ref1 . (^ (Track <: succs))))));1;(all ref0:(one Track),ref1:(one Track)|(((ref0 in Entry) && (ref1 in Exit)) => ((ref0 -> ref1) in (* (Track <: succs)))));8
this/inv5;(all ref0:(one Junction)|(ref0 in (((Track . (Track <: succs)) . (^ (Track <: succs))) - ref0)));1;(Junction = (Track - {ref0:(one Track)|(lone ((Track <: succs) . ref0))}));12
this/inv5;(all ref0:(one Track)|(some ref1:(one Track)|(((ref1 in ((Track <: succs) . ref0)) && (some ((Track <: succs) . ref0))) <=> (ref0 in Junction))));1;(all ref0:(one Track)|(((! (one ((Track <: succs) . ref0))) && (some ((Track <: succs) . ref0))) <=> (ref0 in Junction)));7
this/inv5;(all ref0:(one Junction)|(ref0 in ((Track . (^ (Track <: succs))) - ref0)));1;(Junction = (Track - {ref0:(one Track)|(lone ((Track <: succs) . ref0))}));10
this/inv3;(some (Track - Exit));1;(Exit = (Track - ((Track <: succs) . Track)));7
this/inv4;(all ref0:(one Track),ref1:(one (Track - ref0))|(((ref1 -> ref0) !in (Track <: succs)) => (ref0 in Entry)));1;(all ref0:(one Track)|((all ref1:(one Track)|((ref1 -> ref0) !in (Track <: succs))) <=> (ref0 in Entry)));6
this/inv9;(no ((((Track <: succs) . (Track - Junction)) . (Track <: signals)) & Semaphore));1;(no (((Track - ((Track <: succs) . Junction)) . (Track <: signals)) :> Semaphore));6
this/inv3;(all ref0:(one Exit),ref1:(one Track)|((ref0 != ref1) && ((ref0 -> ref1) !in (Track <: succs))));1;(all ref0:(one Track)|((all ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))) <=> (ref0 in Exit)));12
this/inv3;(some ((Track - Exit) . (Track <: succs)));1;(Exit = (Track - (Track . (~ (Track <: succs)))));8
this/inv5;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) => (ref0 = Junction)));1;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) <=> (ref0 in Junction)));6
this/inv9;(all ref0:(one Track)|(! (some ((ref0 . (^ (Track <: succs))) & Junction))));1;(all ref0:(one Track)|((! (some ((ref0 . (Track <: succs)) & Junction))) => (! (some ((ref0 . (Track <: signals)) & Semaphore)))));11
this/inv7;(all ref0:(one Track),ref1:(one Track),ref2:(one Track)|(((ref1 in (ref0 . (Track <: succs))) && (ref2 in (ref1 . (Track <: succs)))) => ((ref0 != ref1) && (ref1 != ref2))));1;(all ref0:(one Track),ref1:(one Track)|((ref0 in (ref1 . (^ (Track <: succs)))) => (ref0 != ref1)));18
this/inv2;((Track . (Track <: signals)) in Signal);1;((Track <: signals) in (Track one-> Signal));4
this/inv5;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 0) => (ref0 in Junction)));1;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) <=> (ref0 in Junction)));4
this/inv7;(all ref0:(one Track),ref1:(one Track),ref2:(one Track)|(((ref1 in (ref0 . (Track <: succs))) && (ref2 in (ref1 . (Track <: succs)))) => ((ref0 != ref1) && (ref0 != ref2) && (ref1 != ref2))));1;(all ref0:(one Track),ref1:(one Track)|((ref0 in (ref1 . (^ (Track <: succs)))) => (ref0 != ref1)));21
this/inv3;(all ref0:(one Track)|(((no (ref0 . (Track <: succs))) && (ref0 !in (ref0 . (Track <: succs)))) => (ref0 in Exit)));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));10
this/inv5;(all ref0:(one Track)|((ref0 in Junction) => ((some ((Track <: succs) . ref0)) && (some (ref0 . (Track <: succs))))));1;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});14
this/inv7;(all ref0:(one Track),ref1:(one Track)|((ref1 in (ref0 . (Track <: succs))) => ((ref0 != ref1) && (ref0 !in (ref0 . (Track <: succs))))));1;(all ref0:(one univ)|((ref0 in Track) => (ref0 !in (ref0 . (^ (Track <: succs))))));12
this/inv5;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 2) => (ref0 in Junction)));1;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) <=> (ref0 in Junction)));4
this/inv1;((lone Exit) && (some Entry));1;((some Entry) && (some Exit));4
this/inv5;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) => (ref0 in ((Track - Exit) - Entry))));1;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) <=> (ref0 in Junction)));10
this/inv9;(all ref0:(one Track)|((Junction !in (ref0 . (Track <: succs))) => (! (Semaphore in (ref0 . (Track <: signals))))));1;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => (! (some ref1:(one Semaphore)|(ref1 in (ref0 . (Track <: signals)))))));10
this/inv7;((all ref0:(one Track),ref1:(one Track)|((ref1 in (ref0 . (Track <: succs))) => (ref0 != ref1))) && (all ref2:(one Track)|(ref2 !in (ref2 . (Track <: succs)))));1;(all ref0:(one Track),ref1:(one Track)|((ref0 in (ref1 . (^ (Track <: succs)))) => (ref0 != ref1)));16
this/inv5;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) => (ref0 in (Junction & Track))));1;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) <=> (ref0 in Junction)));6
this/inv6;(all ref0:(one Entry)|(one ((Track <: signals) . Speed)));1;(Entry in ((Track <: signals) . Speed));4
this/inv9;(all ref0:(one Track)|(some ref1:(one Junction)|((no ((ref0 . (Track <: signals)) & Speed)) <=> (no ((ref0 . (Track <: succs)) & Junction)))));1;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => (no ((ref0 . (Track <: signals)) & Semaphore))));13
this/inv5;(all ref0:(one Junction)|((ref0 !in (ref0 . (Track <: succs))) && (ref0 in ((Track . (Track <: succs)) . (^ (Track <: succs))))));1;(all ref0:(one Track)|((! (lone ((Track <: succs) . ref0))) <=> (ref0 in Junction)));17
this/inv7;((all ref0:(one Track),ref1:(one Track)|((ref0 != ref1) => (ref1 in (ref0 . (Track <: succs))))) && (all ref2:(one Track)|(ref2 !in (ref2 . (Track <: succs)))));1;(all ref0:(one Track)|(ref0 !in (ref0 . (^ (Track <: succs)))));17
this/inv6;(all ref0:(one Entry)|(one Speed));1;(Entry in ((Track <: signals) . Speed));6
this/inv7;((all ref0:(one Track),ref1:(one Track)|((ref0 != ref1) => ((ref0 in (ref1 . (Track <: succs))) && (ref1 in (ref0 . (Track <: succs)))))) && (all ref2:(one Track)|(ref2 !in (ref2 . (Track <: succs)))));1;(all ref0:(one Track),ref1:(one Track)|((ref0 in (ref1 . (Track <: succs))) => (ref1 !in (ref0 . (^ (Track <: succs))))));18
this/inv3;(all ref0:(one Track)|((ref0 in Exit) => (lone (ref0 . (Track <: succs)))));1;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (Track <: succs)))));8
this/inv4;(all ref0:(one Entry),ref1:(one Track)|((ref0 !in (ref1 . (^ (Track <: succs)))) && (ref1 !in Entry)));1;(all ref0:(one Track)|((all ref1:(one Track)|(ref0 !in (ref1 . (Track <: succs)))) <=> (ref0 in Entry)));11
this/inv3;(some (Exit . (Track <: succs)));1;(Exit = (Track - ((Track <: succs) . Track)));7
this/inv5;(all ref0:(one Track)|(Junction in ((ref0 . (Track <: succs)) . (^ (Track <: succs)))));1;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});11
this/inv5;(all ref0:(one Track)|(some ref1:(one (Track - ref0)),ref2:(one ((Track - ref0) - ref1))|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))))));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));13
this/inv9;(all ref0:(one Track),ref1:(one (ref0 . (Track <: succs)))|((ref1 !in Junction) => (no ((ref0 . (Track <: signals)) & Speed))));1;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => (no ((ref0 . (Track <: signals)) & Semaphore))));12
this/inv3;(all ref0:(one Track)|((ref0 in Exit) => ((no (ref0 . (Track <: succs))) && (ref0 !in Junction))));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));12
this/inv4;(all ref0:(one Track)|(some ref1:(one Entry)|(ref1 !in (ref0 . (^ (Track <: succs))))));1;(Entry = (Track - (Track . (^ (Track <: succs)))));10
this/inv9;(all ref0:(one Track),ref1:(one Track)|((! disj[ref0,ref1]) || (((ref1 !in (ref0 . (^ (Track <: succs)))) && (ref1 in Junction)) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals)))))));1;(all ref0:(one Track)|((all ref1:(one Junction)|(ref1 !in (ref0 . (Track <: succs)))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));16
this/inv3;((all ref0:(one Track),ref1:(one Track)|(((ref0 -> ref1) in (Track <: succs)) => (ref1 !in Exit))) && (no (Exit . (Track <: succs))));1;((all ref0:(one Track)|((no (ref0 . (Track <: succs))) => (ref0 in Exit))) && (no (Exit . (Track <: succs))));12
this/inv8;(all ref0:(one Exit),ref1:(one Track)|((ref1 in Entry) => (ref0 in (ref1 . (^ (Track <: succs))))));1;(all ref0:(one Track),ref1:(one Track)|(((ref0 in Exit) && (ref1 in Entry)) => (ref0 in (ref1 . (* (Track <: succs))))));10
this/inv9;(all ref0:(one Track)|((Junction in (ref0 . (Track <: succs))) => (Semaphore !in (ref0 . (Track <: signals)))));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|(ref1 in (ref0 . (Track <: succs))))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));9
this/inv6;(all ref0:(one Speed),ref1:(one Track)|((ref1 in Entry) => (Speed in (ref1 . (Track <: signals)))));1;(Entry in ((Track <: signals) . Speed));10
this/inv3;((all ref0:(one Track),ref1:(one Track)|(((ref0 -> ref1) in (Track <: succs)) => (ref0 !in Exit))) && (no (Exit . (Track <: succs))));1;((all ref0:(one Track)|((no (ref0 . (Track <: succs))) => (ref0 in Exit))) && (no (Exit . (Track <: succs))));10
this/inv3;(all ref0:(one Track)|((ref0 in Exit) => ((no (ref0 . (Track <: succs))) && (ref0 !in (Entry + Junction)))));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));14
this/inv9;(all ref0:(one Track)|((Junction !in (ref0 . (Track <: succs))) <=> (Semaphore !in (ref0 . (Track <: signals)))));1;(all ref0:(one Track)|((all ref1:(one Junction)|(ref1 !in (ref0 . (Track <: succs)))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));10
this/inv5;(all ref0:(one Track),ref1:(one Track)|((! disj[ref0,ref1]) || (((ref0 in (ref1 . (Track <: succs))) && (ref0 in ((Track - ref1) . (Track <: succs)))) <=> (ref0 in Junction))));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));17
this/inv6;(all ref0:(one Speed),ref1:(one Track)|((ref1 in Entry) => (some ((Track <: signals) . ref0))));1;(all ref0:(one Track)|((ref0 in Entry) => (some ((ref0 . (Track <: signals)) & Speed))));9
this/inv3;((all ref0:(one Track)|((no (ref0 . (Track <: succs))) => ((ref0 !in (Entry + Junction)) && (ref0 in Exit)))) && (all ref1:(one Track)|(ref1 !in (ref1 . (Track <: succs)))));1;((all ref0:(one Track)|((no (ref0 . (Track <: succs))) => (ref0 in Exit))) && (all ref1:(one Exit)|(no (ref1 . (Track <: succs)))));13
this/inv10;(all ref0:(one Track)|(((Track <: succs) . ref0) !in Junction));1;(((Track <: signals) . Semaphore) = ((Track <: succs) . Junction));9
this/inv9;(all ref0:(one Semaphore),ref1:(one Track)|((ref1 !in Junction) => (ref0 !in (ref1 . (Track <: signals)))));1;(all ref0:(one Semaphore),ref1:(one Track)|((no ((ref1 . (Track <: succs)) & Junction)) => (ref0 !in (ref1 . (Track <: signals)))));9
this/inv6;(all ref0:(one Speed),ref1:(one Track)|((ref1 in Entry) => (one ((Track <: signals) . ref0))));1;(Entry in ((Track <: signals) . Speed));9
this/inv5;(all ref0:(one Track),ref1:(one Track)|(((ref0 != ref1) && (ref0 in (ref1 . (Track <: succs))) && (ref0 in ((Track - ref1) . (Track <: succs)))) <=> (ref0 in Junction)));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));15
this/inv10;(all ref0:(one Track)|(some ref1:(one Junction)|((some ref2:(one Semaphore)|(ref2 in (ref0 . (Track <: signals)))) <=> (ref1 in (ref0 . (Track <: succs))))));1;(((Track <: signals) . Semaphore) = ((Track <: succs) . Junction));13
this/inv9;(all ref0:(one Semaphore),ref1:(one Track)|((ref0 !in (ref1 . (Track <: signals))) => (ref1 !in Junction)));1;(((Track <: signals) . Semaphore) in ((Track <: succs) . Junction));12
this/inv5;(all ref0:(one Track)|(some ref1:(one Track),ref2:(one Track)|(disj[ref1,ref2] && (((ref1 + ref2) in ((Track <: succs) . ref0)) => (ref0 in Junction)))));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|(disj[ref1,ref2] && ((ref1 + ref2) in ((Track <: succs) . ref0)))) <=> (ref0 in Junction)));10
this/inv3;((Exit . (Track <: succs)) = (Track . (Track <: succs)));1;(Exit = (Track - (Track . (~ (Track <: succs)))));5
this/inv3;(no ref0:(one Exit)|(some (ref0 . (Track <: succs))));1;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (Track <: succs)))));6
this/inv10;(all ref0:(one Track)|((((Track <: succs) . ref0) in Junction) => (some (ref0 . (Track <: signals)))));1;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (some ((ref0 . (Track <: signals)) & Semaphore))));8
this/inv10;(all ref0:(one Semaphore),ref1:(one Track)|((Junction in (ref1 . (Track <: succs))) => (ref0 in (ref1 . (Track <: signals)))));1;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (ref0 in ((Track <: signals) . Semaphore))));9
this/inv9;(all ref0:(one Track)|(((ref0 . (Track <: signals)) !in Semaphore) <=> ((ref0 . (Track <: succs)) !in Junction)));1;(((Track <: signals) . Semaphore) in ((Track <: succs) . Junction));11
this/inv10;(all ref0:(one Track)|(some ref1:(one Junction)|((ref1 in (ref0 . (Track <: succs))) => (some (ref0 . (Track <: signals))))));1;(all ref0:(one Track)|((some ref1:(one Junction)|(ref1 in (ref0 . (Track <: succs)))) => (some ref2:(one Semaphore)|(ref2 in (ref0 . (Track <: signals))))));8
this/inv10;(all ref0:(one Track)|(((ref0 . (Track <: succs)) in Junction) => (some (ref0 . (Track <: signals)))));1;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (some ((ref0 . (Track <: signals)) & Semaphore))));6
this/inv1;(all ref0:(one Track)|((Entry in Track) && (Exit in Track)));1;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) && (ref1 in Track)));7
this/inv2;((all ref0:(one Signal)|(one ((Track <: signals) . ref0))) && (one ((Track <: signals) . Signal)));1;(all ref0:(one Signal)|(one ((Track <: signals) . ref0)));7
this/inv3;((all ref0:(one Track)|((ref0 in Exit) => (no (ref0 . (Track <: succs))))) && (all ref1:(one Track)|((ref1 in Exit) => (ref1 !in Junction))) && (all ref2:(one Track)|((ref2 in Exit) => (ref2 !in Entry))));1;((all ref0:(one Track)|((ref0 in Exit) => (no (ref0 . (Track <: succs))))) && (all ref1:(one Track)|((no (ref1 . (Track <: succs))) => (ref1 in Exit))));19
this/inv3;(all ref0:(one (Track - Exit))|(ref0 !in (Exit . (Track <: succs))));1;((all ref0:(one (Track - Exit))|(some (ref0 . (Track <: succs)))) && (no (Exit . (Track <: succs))));8
this/inv2;(lone ((Track <: signals) . Signal));1;((Track <: signals) in (Track one-> Signal));5
this/inv5;(all ref0:(one Junction)|((# (ref0 . (Track <: succs))) > 1));1;(all ref0:(one Track)|(((# (ref0 . (~ (Track <: succs)))) > 1) <=> (ref0 in Junction)));7
this/inv3;(some ref0:(one Exit),ref1:(one Track)|((ref0 in ref1) => (no (ref1 . (Track <: succs)))));1;((all ref0:(one (Track - Exit))|(some (ref0 . (Track <: succs)))) && (no (Exit . (Track <: succs))));12
this/inv9;(all ref0:(one Track)|((no ((ref0 . (Track <: signals)) & Speed)) <=> (no ((ref0 . (^ (Track <: succs))) & Junction))));1;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => (no ((ref0 . (Track <: signals)) & Semaphore))));13
this/inv10;(all ref0:(one Track)|(((ref0 . (Track <: succs)) in Junction) => (! (lone (ref0 . (Track <: signals))))));1;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (some ((ref0 . (Track <: signals)) & Semaphore))));9
this/inv9;(all ref0:(one Track)|(ref0 in (((Track <: succs) . Junction) - ((Track <: signals) . Semaphore))));1;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));8
this/inv3;((all ref2:(one Track)|(ref2 != (ref2 . (Track <: succs)))) && (some ref0:(one Exit),ref1:(one Track)|((ref0 in ref1) => (no (ref1 . (Track <: succs))))));1;((all ref0:(one Track)|((no (ref0 . (Track <: succs))) => (ref0 in Exit))) && (all ref1:(one Exit)|(no (ref1 . (Track <: succs)))));14
this/inv3;((all ref0:(one Track)|((ref0 in Exit) => (no (ref0 . (Track <: succs))))) && (no ((Entry & Junction) & Exit)));1;((all ref0:(one Track)|((no (ref0 . (Track <: succs))) => (ref0 in Exit))) && (no (Exit . (Track <: succs))));14
this/inv9;(all ref0:(one Junction),ref1:(one Track)|((ref1 in ((Track <: succs) . ref0)) => (ref1 !in ((Track <: signals) . Semaphore))));1;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));11
this/inv10;(all ref0:(one Track)|((! (lone (ref0 . (Track <: signals)))) <=> ((ref0 . (Track <: succs)) in Junction)));1;(all ref0:(one Track)|((some ((ref0 . (Track <: signals)) & Semaphore)) <=> (some ((ref0 . (Track <: succs)) & Junction))));10
this/inv9;(all ref0:(one Junction),ref1:(one Track)|((no (ref0 & (ref1 . (Track <: succs)))) => (all ref2:(one Semaphore)|(ref2 !in (ref1 . (Track <: signals))))));1;(all ref0:(one Semaphore),ref1:(one Track)|((no ((ref1 . (Track <: succs)) & Junction)) => (ref0 !in (ref1 . (Track <: signals)))));9
this/inv2;(all ref0:(one Signal)|(ref0 in (one (Track . (Track <: signals)))));1;(all ref0:(one Signal)|(one ref1:(one Track)|(ref0 in (ref1 . (Track <: signals)))));6
this/inv9;(all ref0:(one Junction),ref1:(one Track)|((ref1 !in ((Track <: succs) . ref0)) => (ref1 !in ((Track <: signals) . Semaphore))));1;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));9
this/inv2;(one ref0:(one Track)|(all ref1:(one Signal)|((ref0 . (Track <: signals)) = ref1)));1;(all ref0:(one Signal)|(one (ref0 . (~ (Track <: signals)))));7
this/inv5;(all ref0:(one (Track - Junction))|(! ((# ((Track <: succs) . ref0)) > 1)));1;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) <=> (ref0 in Junction)));7
this/inv9;(all ref0:(one Junction),ref1:(one Track)|((ref0 in (ref1 . (Track <: succs))) => (ref1 !in ((Track <: signals) . Semaphore))));1;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));9
this/inv8;(all ref0:(one Entry)|((ref0 !in Exit) && (Exit in (ref0 . (^ (Track <: succs))))));1;(all ref0:(one Entry)|(Exit in (ref0 . (* (Track <: succs)))));8
this/inv10;(all ref0:(one Track)|(((ref0 . (Track <: succs)) in Junction) <=> (some (ref0 . (Track <: signals)))));1;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (some ((ref0 . (Track <: signals)) & Semaphore))));8
this/inv9;(all ref0:(one Junction),ref1:(one Track)|((ref0 !in (ref1 . (Track <: succs))) => (ref1 !in ((Track <: signals) . Semaphore))));1;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));7
this/inv5;((all ref0:(one Track),ref1:(one Track),ref2:(one Track)|(((ref0 != ref1) && (ref0 in ((ref1 . (Track <: succs)) & (ref1 . (Track <: succs)))) && (ref1 != ref2)) <=> (ref0 in Junction))) && (all ref3:(one Junction)|(ref3 !in (ref3 & (Track . (Track <: succs))))));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));25
this/inv3;((all ref0:(one Track)|((ref0 in Exit) => (no (ref0 . (Track <: succs))))) && (no (Entry & Exit)) && (no (Entry & Junction)) && (no (Exit & Junction)) && (((Entry + Junction) + Exit) = Track));1;((all ref0:(one Track)|((ref0 in Exit) => (no (ref0 . (Track <: succs))))) && (all ref1:(one Track)|((no (ref1 . (Track <: succs))) => (ref1 in Exit))));26
this/inv2;(one (Signal & (Track . (Track <: signals))));1;(all ref0:(one Signal)|(one ((Track <: signals) . ref0)));5
this/inv5;((all ref0:(one Track),ref1:(one Track),ref2:(one Track)|(((ref0 != ref1) && (ref0 in ((ref1 . (Track <: succs)) & (ref1 . (Track <: succs)))) && (ref1 != ref2)) <=> (ref0 in Junction))) && (all ref3:(one Junction)|(ref3 !in (ref3 . (Track <: succs)))));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));23
this/inv5;((all ref0:(one Track),ref1:(one Track),ref2:(one Track)|(((ref0 != ref1) && (ref0 in ((ref1 . (Track <: succs)) & (ref1 . (Track <: succs)))) && (ref1 != ref2)) <=> (ref0 in Junction))) && (all ref3:(one Track)|(ref3 !in (ref3 . (Track <: succs)))));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));23
this/inv1;(all ref0:(one Track)|(some ref1:(one Entry),ref2:(one Exit)|((ref0 != ref1) && (ref0 != ref2) && (ref1 in (ref0 . (Track <: succs))) && (ref2 in (ref0 . (Track <: succs))))));1;(some ref0:(one Track)|((some ref1:(one Track)|(ref1 in Exit)) && (ref0 in Entry)));19
this/inv3;((all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit))) && (((Entry + Junction) + Exit) = Track));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));10
this/inv4;(all ref0:(one Track)|((none = (ref0 . (Track <: succs))) <=> (ref0 in Exit)));1;(all ref0:(one Track)|((none = (ref0 . (~ (Track <: succs)))) <=> (ref0 in Entry)));5
this/inv5;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) => (ref0 in ((Junction - Exit) - Entry))));1;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) <=> (ref0 in Junction)));8
this/inv1;(all ref0:(one Track)|(some ref1:(one Entry),ref2:(one Exit)|((ref0 != ref1) && (ref0 != ref2) && (ref1 != ref2) && (ref1 in (ref0 . (Track <: succs))) && (ref2 in (ref0 . (Track <: succs))))));1;(some ref0:(one Track)|((some ref1:(one Track)|(ref1 in Exit)) && (ref0 in Entry)));22
this/inv5;(Junction = (Track . {ref0:(one Track),ref1:(one Track)|((ref0 -> ref1) in (Track <: succs))}));1;(Junction = (Track . {ref0:(one Track),ref1:(one Track)|((! (lone ((Track <: succs) . ref1))) && ((ref0 -> ref1) in (Track <: succs)))}));10
this/inv5;(all ref0:(one Track)|(ref0 !in (ref0 . (Track <: succs))));1;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});10
this/inv5;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) => (ref0 in (Junction - ((Entry & Junction) & Exit)))));1;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) <=> (ref0 in Junction)));10
this/inv4;(all ref0:(one Track)|((none = (ref0 . (^ (~ (Track <: succs))))) <=> (ref0 in Exit)));1;(all ref0:(one Track)|((none = (ref0 . (~ (Track <: succs)))) <=> (ref0 in Entry)));5
this/inv8;(all ref0:(one Entry)|(some ref1:(one Exit)|(ref1 in (ref0 . (Track <: succs)))));1;(all ref0:(one Entry),ref1:(one Exit)|(ref1 in (ref0 . (* (Track <: succs)))));5
this/inv1;(all ref0:(one Track)|((((Track <: succs) . ref0) in Entry) && ((ref0 . (Track <: succs)) in Exit)));1;((some ref0:(one Track)|(ref0 in Entry)) && (some ref1:(one Track)|(ref1 in Exit)));9
this/inv5;(all ref0:(one Track)|(some ref1:(one Track),ref2:(one Track)|(disj[ref1,ref2] && (((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs)))) || (((ref1 in (ref0 . (Track <: succs))) && (ref2 in (ref0 . (Track <: succs)))) <=> (ref0 in Junction))))));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));25
this/inv4;(all ref0:(one Track)|((none = (ref0 . (~ (Track <: succs)))) <=> (ref0 in Exit)));1;(all ref0:(one Track)|((none = (ref0 . (~ (Track <: succs)))) <=> (ref0 in Entry)));4
this/inv5;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) => ((ref0 !in ((Entry + Exit) - Junction)) && (ref0 in Junction))));1;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) <=> (ref0 in Junction)));12
this/inv9;(all ref0:(one Track)|(ref0 !in (((Track <: signals) . Semaphore) + ((Track <: succs) . Junction))));1;(((Track <: signals) . Semaphore) in ((Track <: succs) . Junction));5
this/inv4;(all ref0:(one Track)|((no (Track . (^ (Track <: succs)))) <=> (ref0 in Entry)));1;(all ref0:(one Track)|((no ((^ (Track <: succs)) . ref0)) <=> (ref0 in Entry)));4
this/inv5;(some ((Track <: succs) . Junction));1;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});8
this/inv1;(all ref0:(one Track)|(some ref1:(one Entry),ref2:(one Exit)|((ref0 != ref1) && (ref0 != ref2) && (ref0 !in (ref0 . (Track <: succs))) && (ref1 != ref2) && (ref1 in (ref0 . (Track <: succs))) && (ref2 in (ref0 . (Track <: succs))))));1;(some ref0:(one Track)|((some ref1:(one Track)|(ref1 in Exit)) && (ref0 in Entry)));27
this/inv5;(all ref0:(one Track)|(some ref1:(one Track),ref2:(one Track)|((((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs)))) => (ref0 in Junction)) && disj[ref1,ref2])));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));15
this/inv5;(all ref0:(one Track),ref1:(one Track),ref2:(one (Track - ref0))|((((ref0 -> ref1) in (Track <: succs)) && ((ref2 -> ref1) in (Track <: succs))) => (ref1 in Junction)));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|(((ref0 -> ref1) in (~ (Track <: succs))) && ((ref0 -> ref2) in (~ (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));17
this/inv9;(all ref0:(one Track)|(((ref0 . (Track <: succs)) !in Junction) => (all ref1:(one Semaphore)|(ref1 !in (ref0 . (Track <: signals))))));1;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => (all ref1:(one Semaphore)|(ref1 !in (ref0 . (Track <: signals))))));7
this/inv5;(all ref0:(one Track)|(some ref1:(one Track),ref2:(one Track)|(((ref0 in ((ref1 . (Track <: succs)) & (ref1 . (Track <: succs)))) && (ref1 != ref2)) <=> (ref0 in Junction))));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));13
this/inv5;(some ref0:(one Track),ref1:(one Track)|(all ref2:(one Track)|((((ref0 -> ref1) in (Track <: succs)) && ((ref2 -> ref1) in (Track <: succs))) => (ref1 in Junction))));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|(((ref0 -> ref1) in (~ (Track <: succs))) && ((ref0 -> ref2) in (~ (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));17
this/inv5;(Junction = (Track . {ref0:(one Track),ref1:(one Track)|((! (lone ((Track <: succs) . ref0))) && ((ref0 -> ref1) in (Track <: succs)))}));1;(Junction = (Track . {ref0:(one Track),ref1:(one Track)|((! (lone ((Track <: succs) . ref1))) && ((ref0 -> ref1) in (Track <: succs)))}));6
this/inv5;(some ref0:(one Track),ref1:(one (Track - ref0))|(all ref2:(one Track)|((((ref0 -> ref1) in (Track <: succs)) && ((ref2 -> ref1) in (Track <: succs))) => (ref1 in Junction))));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|(((ref0 -> ref1) in (~ (Track <: succs))) && ((ref0 -> ref2) in (~ (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));17
this/inv6;(all ref0:(one Track)|(one ref1:(one Speed)|(ref1 in (ref0 . (Track <: signals)))));1;(all ref0:(one Entry)|(some ref1:(one Speed)|(ref1 in (ref0 . (Track <: signals)))));4
this/inv5;(all ref0:(one Track),ref1:(one Track),ref2:(one Track)|((! disj[ref1,ref2]) || (((ref1 + ref2) in ((Track <: succs) . ref0)) => (ref0 in Junction))));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|(disj[ref1,ref2] && ((ref1 + ref2) in ((Track <: succs) . ref0)))) <=> (ref0 in Junction)));11
this/inv5;(all ref0:(one Track)|(((# (ref0 & (Track . (Track <: succs)))) > 2) <=> (ref0 in Junction)));1;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) <=> (ref0 in Junction)));6
this/inv3;(one ref0:(one Track)|(all ref1:(one (Track - ref0))|(((ref0 -> ref1) !in (Track <: succs)) => (ref0 in Exit))));1;(all ref0:(one Track)|((all ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))) <=> (ref0 in Exit)));6
this/inv3;(all ref0:(one Track)|((none = (ref0 . (^ (Track <: succs)))) => (ref0 in Exit)));1;(all ref0:(one Track)|((none = (ref0 . (Track <: succs))) <=> (ref0 in Exit)));5
this/inv9;(all ref0:(one Track)|(((Track <: signals) . Semaphore) = ((Track <: succs) . Junction)));1;(((Track <: signals) . Semaphore) in ((Track <: succs) . Junction));3
this/inv5;(some ref0:(one Track),ref1:(one (Track - Exit))|(all ref2:(one Track)|((((ref0 -> ref1) in (Track <: succs)) && ((ref2 -> ref1) in (Track <: succs))) => (ref1 in Junction))));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|(((ref0 -> ref1) in (~ (Track <: succs))) && ((ref0 -> ref2) in (~ (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));17
this/inv8;(all ref0:(one Exit)|(some ref1:(one Entry)|(ref1 in ((Track <: succs) . ref0))));1;(all ref0:(one Entry),ref1:(one Exit)|(ref1 in (ref0 . (* (Track <: succs)))));7
this/inv1;(all ref0:(one Track)|((Int[(# (ref0 . (Track <: succs)))] in Entry) && (Int[(# (ref0 . (Track <: succs)))] in Exit)));1;((some ref0:(one Track)|(ref0 in Entry)) && (some ref1:(one Track)|(ref1 in Exit)));13
this/inv4;(one ref0:(one Track)|(all ref1:(one (Track - ref0))|(((ref1 -> ref0) !in (Track <: succs)) => (ref0 in Entry))));1;(all ref0:(one Track)|((all ref1:(one Track)|((ref1 -> ref0) !in (Track <: succs))) <=> (ref0 in Entry)));6
this/inv4;(all ref0:(one Track)|((ref0 in Entry) => (((Track <: succs) . ref0) = none)));1;(Entry = {ref0:(one Track)|(no ((Track <: succs) . ref0))});9
this/inv8;(all ref0:(one Exit)|(some ref1:(one Entry)|(ref1 in ((^ (Track <: succs)) . ref0))));1;(all ref0:(one Entry),ref1:(one (Exit - ref0))|(ref1 in (ref0 . (^ (Track <: succs)))));6
this/inv4;((all ref0:(one Track)|((ref0 in Entry) => ((# (ref0 . (Track <: succs))) = 0))) && (all ref1:(one Track)|(((# (ref1 . (Track <: succs))) = 0) => (ref1 in Entry))));1;((all ref0:(one Track)|((ref0 in Entry) => ((# ((Track <: succs) . ref0)) = 0))) && (all ref1:(one Track)|(((# ((Track <: succs) . ref1)) = 0) => (ref1 in Entry))));8
this/inv1;(all ref0:(one Track)|((some (Entry & Track)) && (some (Exit & Track))));1;((some (Entry & Track)) && (some (Exit & Track)));1
this/inv4;(one ref0:(one Track)|(all ref1:(one (Track - ref0))|(((ref0 -> ref1) !in (Track <: succs)) => (ref0 in Entry))));1;(all ref0:(one Track)|((all ref1:(one Track)|(ref0 !in (ref1 . (Track <: succs)))) <=> (ref0 in Entry)));8
this/inv1;(all ref0:(one Track)|(((# ((ref0 . (Track <: succs)) & Entry)) > 1) && ((# ((ref0 . (Track <: succs)) & Exit)) > 1)));1;(((# Entry) > 0) && ((# Exit) > 0));9
this/inv5;((all ref0:(one Track),ref1:(one Track),ref2:(one Track)|(((ref0 in ((ref1 . (Track <: succs)) & (ref1 . (Track <: succs)))) && (ref1 != ref2)) <=> (ref0 in Junction))) && (no (Track . (Track <: succs))));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));18
this/inv4;(one ref0:(one Track)|(all ref1:(one (Track - ref0))|(((ref0 -> ref1) in (Track <: succs)) => (ref0 in Entry))));1;(all ref0:(one Track)|((! (some ref1:(one Track)|(ref0 in (ref1 . (Track <: succs))))) <=> (ref0 in Entry)));9
this/inv4;(some ref0:(one Track)|(all ref1:(one (Track - ref0))|((((ref0 -> ref1) !in (Track <: succs)) && ((ref1 -> ref0) in (Track <: succs))) => (ref0 in Entry))));1;(all ref0:(one Track)|((all ref1:(one Track)|(ref0 !in (ref1 . (Track <: succs)))) <=> (ref0 in Entry)));14
this/inv5;(some ref0:(one (Track - Exit)),ref1:(one (Track - Exit))|(all ref2:(one Track)|(((ref0 != ref2) && ((ref0 -> ref1) in (Track <: succs)) && ((ref2 -> ref1) in (Track <: succs))) => (ref1 in Junction))));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref1 != ref2) && ((ref1 -> ref0) in (Track <: succs)) && ((ref2 -> ref0) in (Track <: succs)))) <=> (ref0 in Junction)));16
this/inv1;(all ref0:(one Track)|((some (ref0 & Entry)) && (some ((ref0 . (Track <: succs)) & Exit))));1;((some (Entry & Track)) && (some (Exit & Track)));7
this/inv5;((all ref0:(one Track),ref1:(one Track),ref2:(one Track)|(((ref0 in ((ref1 . (Track <: succs)) & (ref1 . (Track <: succs)))) && (ref1 != ref2)) <=> (ref0 in Junction))) && (one (Track . (Track <: succs))));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));18
this/inv1;(all ref0:(one Track)|((some (((Track <: succs) . ref0) & Entry)) && (some ((ref0 . (Track <: succs)) & Exit))));1;((some (Entry & Track)) && (some (Exit & Track)));9
this/inv3;(all ref0:(one Track)|(((ref0 . (Track <: succs)) !in Track) => (ref0 in Exit)));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));7
this/inv5;(all ref0:(one Junction)|(some ref1:(one Track),ref2:(one Track)|((ref0 in ((ref1 . (Track <: succs)) & (ref2 . (Track <: succs)))) && (ref1 != ref2))));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));15
this/inv5;(all ref0:(one Track)|((lone (ref0 & (Track . (Track <: succs)))) <=> (ref0 !in Junction)));1;(all ref0:(one Track)|((! (lone ((Track <: succs) . ref0))) <=> (ref0 in Junction)));9
this/inv1;(all ref0:(one Track)|((1 < (# (((Track <: succs) . ref0) & Entry))) && (1 < (# ((ref0 . (Track <: succs)) & Exit)))));1;((1 < (# Entry)) && (1 < (# Exit)));9
this/inv5;(all ref0:(one Track),ref1:(one Track),ref2:(one Track)|((((ref0 -> ref1) in (Track <: succs)) && ((ref1 -> ref1) in (Track <: succs)) && ((ref2 -> ref1) in (Track <: succs))) => (ref1 in Junction)));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref1 != ref2) && ((ref1 -> ref0) in (Track <: succs)) && ((ref2 -> ref0) in (Track <: succs)))) <=> (ref0 in Junction)));20
this/inv5;(all ref0:(one Track)|((lone ((ref0 & Track) - (ref0 . (Track <: succs)))) <=> (ref0 !in Junction)));1;(all ref0:(one Track)|((! (lone ((Track <: succs) . ref0))) <=> (ref0 in Junction)));11
this/inv5;(all ref0:(one Track),ref1:(one Track),ref2:(one Track)|((((ref0 -> ref1) in (Track <: succs)) && ((ref1 -> ref1) !in (Track <: succs)) && ((ref2 -> ref1) in (Track <: succs))) => (ref1 in Junction)));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|(((ref0 -> ref1) in (~ (Track <: succs))) && ((ref0 -> ref2) in (~ (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));22
this/inv3;(all ref0:(one Track)|((ref0 in Exit) => (((no (ref0 . (Track <: succs))) && (no (ref0 . (Track <: succs)))) => (ref0 in Exit))));1;((all ref0:(one Track)|((ref0 in Exit) => (no (ref0 . (Track <: succs))))) && (all ref1:(one Track)|((no (ref1 . (Track <: succs))) => (ref1 in Exit))));13
this/inv5;(all ref0:(one Track)|((ref0 in Junction) => (((# (ref0 . (Track <: succs))) > 1) && (ref0 !in (ref0 . (Track <: succs))))));1;(all ref0:(one Track)|(((# (ref0 . (~ (Track <: succs)))) > 1) <=> (ref0 in Junction)));15
this/inv6;(Entry = (Track . ((Track <: signals) :> Speed)));1;(Entry in ((Track <: signals) . Speed));4
this/inv9;(all ref0:(one Track)|(some ref1:(one Junction)|((ref1 !in (ref0 . (Track <: succs))) => (Semaphore !in (ref0 . (Track <: signals))))));1;(all ref0:(one Track)|((all ref1:(one Junction)|(ref1 !in (ref0 . (Track <: succs)))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));7
this/inv9;(all ref0:(one Track)|(some ref1:(one Junction)|((ref1 !in (ref0 . (Track <: succs))) <=> (Semaphore !in (ref0 . (Track <: signals))))));1;(all ref0:(one Track)|((all ref1:(one Junction)|(ref1 !in (ref0 . (Track <: succs)))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));9
this/inv9;(all ref0:(one Junction),ref1:(one Semaphore),ref2:(one Track)|((ref2 !in (ref0 . (Track <: succs))) => (ref1 !in (ref2 . (Track <: signals)))));1;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));12
this/inv4;(all ref0:(one Track),ref1:(one Track)|((ref0 in Entry) => ((ref1 . (Track <: succs)) in (Track - ref0))));1;(Entry = (Track - {ref0:(one Track)|(some ((Track <: succs) . ref0))}));14
this/inv9;(all ref0:(one Track)|(some ref1:(one Junction)|(all ref2:(one Semaphore)|((ref1 in ((Track <: succs) . ref0)) => (ref2 !in (ref0 . (Track <: signals)))))));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|(ref1 in (ref0 . (Track <: succs))))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));9
this/inv1;(all ref0:(one Track)|(some ref1:(one Entry),ref2:(one Exit)|((ref1 + ref2) in ref0)));1;(some ref0:(one Entry),ref1:(one Exit)|((ref0 + ref1) in Track));9
this/inv5;(some ref0:(one Track),ref1:(one Track)|(all ref2:(one Track)|(((ref0 != ref1) && ((ref0 -> ref2) in (Track <: succs)) && ((ref1 -> ref2) in (Track <: succs))) => (ref2 in Junction))));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref1 != ref2) && ((ref1 -> ref0) in (Track <: succs)) && ((ref2 -> ref0) in (Track <: succs)))) <=> (ref0 in Junction)));16
this/inv3;(all ref0:(one Exit),ref1:(one Track)|((no (ref1 . (Track <: succs))) => ((no (ref0 . (Track <: succs))) && (ref1 in Exit))));1;((all ref0:(one Exit)|(no (ref0 . (Track <: succs)))) && (all ref1:(one Track)|((no (ref1 . (Track <: succs))) <=> (ref1 in Exit))));12
this/inv9;(all ref0:(one Track)|(some ref1:(one Junction)|(all ref2:(one Semaphore)|(((ref0 != ref1) && (ref1 in ((Track <: succs) . ref0))) => (ref2 !in (ref0 . (Track <: signals)))))));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|(ref1 in (ref0 . (Track <: succs))))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));13
this/inv4;((all ref0:(one Track),ref1:(one Track)|((ref0 in Entry) => ((ref1 . (Track <: succs)) in (Track - ref0)))) && (all ref2:(one Track),ref3:(one Track)|(((ref3 . (Track <: succs)) in (Track - ref2)) => (ref2 in Entry))));1;((all ref0:(one Track)|((ref0 in Entry) => (ref0 !in (Track . (Track <: succs))))) && (all ref1:(one Track)|((ref1 !in (Track . (Track <: succs))) => (ref1 in Entry))));24
this/inv8;(all ref0:(one Entry)|((# ((ref0 . (Track <: succs)) & Exit)) = (# Exit)));1;(all ref0:(one Entry)|(((ref0 . (* (Track <: succs))) & Exit) = Exit));5
this/inv5;(all ref0:(one Track)|(((# (ref0 & ((Track - ref0) . (Track <: succs)))) > 1) <=> (ref0 in Junction)));1;(all ref0:(one Track)|(((# (ref0 . (~ (Track <: succs)))) > 1) <=> (ref0 in Junction)));7
this/inv8;(all ref0:(one Entry)|((# ((ref0 . (^ (Track <: succs))) & Exit)) = (# Exit)));1;(all ref0:(one Entry)|(((ref0 + (ref0 . (^ (Track <: succs)))) & Exit) = Exit));6
this/inv9;(all ref0:(one Track)|(some ref1:(one Junction)|(all ref2:(one Semaphore)|(((ref0 != ref1) && (ref0 in (ref1 . (^ (Track <: succs))))) => (ref2 !in (ref0 . (Track <: signals)))))));1;(all ref0:(one Track)|((all ref1:(one Junction)|(ref1 !in (ref0 . (Track <: succs)))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));15
this/inv4;(some ref0:(one Track)|(no ((Track <: succs) . ref0)));1;(Entry = {ref0:(one Track)|(no ((Track <: succs) . ref0))});4
this/inv9;(all ref0:(one Semaphore),ref1:(one Track)|(some ref2:(one Junction)|(((ref1 != ref2) && (ref1 in (ref2 . (^ (Track <: succs))))) => (ref0 !in (ref1 . (Track <: signals))))));1;(all ref0:(one Semaphore),ref1:(one Track)|((no (((Track <: succs) . Junction) & ref1)) => (ref0 !in (ref1 . (Track <: signals)))));17
this/inv5;(all ref0:(one Track)|((lone (ref0 & ((Track - ref0) . (Track <: succs)))) <=> (ref0 !in Junction)));1;(all ref0:(one Track)|((! (lone ((Track <: succs) . ref0))) <=> (ref0 in Junction)));11
this/inv9;(all ref0:(one Semaphore),ref1:(one Track)|(some ref2:(one Junction)|(((ref1 != ref2) && (ref1 in (ref2 . (Track <: succs)))) => (ref0 !in (ref1 . (Track <: signals))))));1;(all ref0:(one Semaphore),ref1:(one Track)|((no (((Track <: succs) . Junction) & ref1)) => (ref0 !in (ref1 . (Track <: signals)))));16
this/inv4;(all ref0:(one Track),ref1:(one Track)|((ref0 in Entry) => (ref0 !in (ref1 . (^ (Track <: succs))))));1;(Entry = (Track - (Track . (^ (Track <: succs)))));12
this/inv3;(all ref0:(one Track),ref1:(one (Track - ref0))|(((ref0 -> ref1) !in (Track <: succs)) => (ref0 in Entry)));1;(all ref0:(one Track)|((all ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))) <=> (ref0 in Exit)));8
this/inv8;(Entry in ((^ (Track <: succs)) . Exit));1;((Entry -> Exit) in (* (Track <: succs)));6
this/inv9;(all ref0:(one Semaphore),ref1:(one Track)|(some ref2:(one Junction)|(((ref1 != ref2) && (ref1 !in (ref2 . (Track <: succs)))) => (ref0 !in (ref1 . (Track <: signals))))));1;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));14
this/inv5;(all ref0:(one Track),ref1:(one Track)|((! disj[ref0,ref1]) || ((ref0 in Junction) => (ref1 in ((^ (Track <: succs)) . ref0)))));1;(all ref0:(one Track)|((! (lone ((Track <: succs) . ref0))) <=> (ref0 in Junction)));17
this/inv8;(all ref0:(one Track),ref1:(one Track)|((! disj[ref0,ref1]) || (((ref0 in Entry) && (ref1 in Exit)) => (ref0 in (ref1 . (Track <: succs))))));1;(all ref0:(one Track),ref1:(one Track)|((! disj[ref0,ref1]) || (((ref0 in Entry) && (ref1 in Exit)) => (ref1 in (ref0 . (^ (Track <: succs)))))));9
this/inv9;(all ref0:(one Track)|(some ref1:(one Junction)|((ref1 !in (ref0 . (Track <: succs))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals)))))));1;(all ref0:(one Track)|((all ref1:(one Junction)|(ref1 !in (ref0 . (Track <: succs)))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));6
this/inv8;(all ref0:(one Entry),ref1:(one Exit)|((ref0 in (ref1 . (^ (Track <: succs)))) && (ref1 in (ref0 . (^ (Track <: succs))))));1;(all ref0:(one Entry),ref1:(one Exit)|((ref0 = ref1) || (ref1 in (ref0 . (^ (Track <: succs))))));11
this/inv9;(all ref0:(one Junction),ref1:(one Semaphore),ref2:(one Track)|(((ref0 != ref2) && (ref2 !in (ref0 . (Track <: succs)))) => (ref1 !in (ref2 . (Track <: signals)))));1;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));16
this/inv8;(Entry in ((* (Track <: succs)) . Exit));1;((Entry -> Exit) in (* (Track <: succs)));4
this/inv4;((all ref0:(one Track),ref1:(one Track)|((ref0 in Entry) => (ref0 !in (ref1 . (^ (Track <: succs)))))) && (all ref2:(one Track),ref3:(one Track)|((ref2 !in (ref3 . (^ (Track <: succs)))) => (ref2 in Entry))));1;((all ref0:(one Entry),ref1:(one Track)|(ref0 !in (ref1 . (^ (Track <: succs))))) && (all ref2:(one Track)|((ref2 !in (Track . (^ (Track <: succs)))) => (ref2 in Entry))));13
this/inv3;(all ref0:(one Track),ref1:(one (Track - ref0))|(((ref1 -> ref0) !in (Track <: succs)) => (ref0 in Entry)));1;(all ref0:(one Track)|((all ref1:(one Track)|(ref1 !in (ref0 . (Track <: succs)))) <=> (ref0 in Exit)));10
this/inv3;(all ref0:(one Exit),ref1:(one Track)|((ref0 in ref1) => (none = (ref1 . (Track <: succs)))));1;(Exit = (Track - ((Track <: succs) . Track)));12
this/inv8;(all ref0:(one Entry)|((ref0 . ((^ (Track <: succs)) :> Exit)) = Exit));1;(all ref0:(one Entry)|((ref0 . ((* (Track <: succs)) :> Exit)) = Exit));4
this/inv5;(all ref0:(one Track),ref1:(one Track),ref2:(one Track)|(((ref0 != ref1) && (ref0 != ref2) && (ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2)) <=> ((ref0 in Junction) && (ref1 !in (ref1 . (Track <: succs))) && (ref2 !in (ref2 . (Track <: succs))))));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));23
this/inv3;(all ref0:(one Track)|(some ref1:(one Track)|((ref0 in Exit) => ((ref0 -> ref1) !in (Track <: succs)))));1;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (Track <: succs)))));12
this/inv3;(all ref0:(one Track),ref1:(one (Track - ref0))|((((ref0 -> ref0) !in (Track <: succs)) && ((ref1 -> ref0) !in (Track <: succs))) => (ref0 in Entry)));1;(all ref0:(one Track)|((all ref1:(one Track)|(ref1 !in (ref0 . (Track <: succs)))) <=> (ref0 in Exit)));16
this/inv3;(all ref0:(one Track)|(one ref1:(one Track)|((ref0 in Exit) => ((ref0 -> ref1) !in (Track <: succs)))));1;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (Track <: succs)))));12
this/inv5;(all ref0:(one Track),ref1:(one Track),ref2:(one Track)|(((ref0 != ref1) && (ref0 != ref2) && (ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2)) => ((ref0 in Junction) && (ref1 !in (ref1 . (Track <: succs))) && (ref2 !in (ref2 . (Track <: succs))))));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));25
this/inv9;(all ref0:(one Track)|((no ((ref0 . (Track <: signals)) & Semaphore)) <=> (no ((ref0 . (* (Track <: succs))) & Junction))));1;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => (no ((ref0 . (Track <: signals)) & Semaphore))));13
this/inv9;(all ref0:(one Track)|(one ref1:(one Junction)|((ref1 !in (ref0 . (Track <: succs))) => (Semaphore !in (ref0 . (Track <: signals))))));1;(all ref0:(one Track)|((all ref1:(one Junction)|(ref1 !in (ref0 . (Track <: succs)))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));7
this/inv5;(all ref0:(one Track),ref1:(one Track),ref2:(one Track)|(((ref0 != ref1) && (ref0 != ref2) && (ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2) && (ref1 !in (ref1 . (Track <: succs))) && (ref2 !in (ref2 . (Track <: succs)))) => (ref0 in Junction)));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));24
this/inv9;(all ref0:(one Track)|((all ref1:(one Track)|((ref1 in (ref0 . (Track <: succs))) => (ref1 in Junction))) => (no ref2:(one Semaphore)|(ref2 in (ref0 . (Track <: signals))))));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|(ref1 in (ref0 . (Track <: succs))))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));13
this/inv3;(all ref0:(one Track)|(((ref0 . (Track <: succs)) in univ) <=> (ref0 in Exit)));1;(all ref0:(one Track)|(((ref0 . (Track <: succs)) in none) <=> (ref0 in Exit)));4
this/inv1;(all ref0:(one Track)|(((some ref1:(one Track)|((ref0 -> ref1) in (Track <: succs))) && (ref0 in Junction)) || (ref0 in Entry) || (ref0 in Exit)));1;(some ref0:(one Track)|((some ref1:(one Track)|(ref1 in Exit)) && (ref0 in Entry)));17
this/inv4;(all ref0:(one Track)|((ref0 in Entry) => (none = (ref0 . (Track <: succs)))));1;(Entry = {ref0:(one Track)|(no ((Track <: succs) . ref0))});11
this/inv3;(all ref0:(one Track),ref1:(one (Track - ref0))|((((ref0 -> ref0) !in (Track <: succs)) && ((ref0 -> ref1) !in (Track <: succs))) => (ref0 in Entry)));1;(all ref0:(one Track)|((all ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))) <=> (ref0 in Exit)));14
this/inv3;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) - ref0)) => (ref0 in Exit)));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));6
this/inv9;(all ref0:(one Semaphore),ref1:(one Track),ref2:(one Track)|(((ref1 != ref2) && (ref1 !in Junction) && (ref2 in (ref1 . (Track <: succs)))) => (ref0 !in (ref2 . (Track <: signals)))));1;(all ref0:(one Semaphore),ref1:(one Track)|((no ((ref1 . (Track <: succs)) & Junction)) => (ref0 !in (ref1 . (Track <: signals)))));19
this/inv5;(all ref0:(one Track),ref1:(one Track)|(((ref0 in (ref1 . (Track <: succs))) && (some (ref0 & ((Track - ref1) . (Track <: succs))))) => (ref0 in Junction)));1;(all ref0:(one Track)|(((! (one ((Track <: succs) . ref0))) && (some ((Track <: succs) . ref0))) <=> (ref0 in Junction)));17
this/inv1;(all ref0:(one Track)|((Entry in (ref0 . (Track <: succs))) && (Exit in (ref0 . (Track <: succs)))));1;((some ref0:(one Track)|(ref0 in Entry)) && (some ref1:(one Track)|(ref1 in Exit)));11
this/inv9;(all ref0:(one Track)|(some ref1:(one Junction)|((ref1 in (ref0 . (Track <: succs))) => (Semaphore in (ref0 . (Track <: signals))))));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|(ref1 in (ref0 . (Track <: succs))))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));10
this/inv5;(all ref0:(one Track),ref1:(one Track)|(((ref0 in (ref1 . (Track <: succs))) && (some (ref0 & (((Track - ref1) - ref0) . (Track <: succs))))) => (ref0 in Junction)));1;(all ref0:(one Track)|(((! (one ((Track <: succs) . ref0))) && (some ((Track <: succs) . ref0))) <=> (ref0 in Junction)));19
this/inv3;(no ((Track <: succs) . Track));1;(Exit = (Track - ((Track <: succs) . Track)));5
this/inv9;(all ref0:(one Semaphore),ref1:(one Track),ref2:(one Track)|(((ref1 !in Junction) && (ref2 in (ref1 . (Track <: succs)))) => (ref0 !in (ref2 . (Track <: signals)))));1;(all ref0:(one Semaphore),ref1:(one Track)|((no ((ref1 . (Track <: succs)) & Junction)) => (ref0 !in (ref1 . (Track <: signals)))));16
this/inv8;(((Entry - Exit) -> (Exit - Entry)) in (^ (Track <: succs)));1;((Entry -> Exit) in (* (Track <: succs)));6
this/inv3;(all ref0:(one Track),ref1:(one (Track - ref0))|((ref0 in Entry) => ((ref0 -> ref1) !in (Track <: succs))));1;(all ref0:(one Track)|((all ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))) <=> (ref0 in Exit)));12
this/inv4;(all ref0:(one Track)|((ref0 in Entry) => (0 = (ref0 . (Track <: succs)))));1;(Entry = {ref0:(one Track)|(no ((Track <: succs) . ref0))});11
this/inv1;(all ref0:(one Track)|((Entry in ref0) || (Exit in ref0)));1;(some (Entry -> Exit));8
this/inv1;(all ref0:(one Track)|(some ref1:(one Track)|((((ref1 -> ref0) in (Track <: succs)) && (ref1 in Entry)) => (some ref2:(one Track)|((all ref3:(one Track)|((ref2 -> ref3) !in (Track <: succs))) && ((ref0 -> ref2) in (Track <: succs)) && (ref2 in Exit))))));1;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) && (ref1 in Track)));27
this/inv9;(all ref0:(one Track)|((no ((ref0 . (Track <: signals)) & Semaphore)) <=> (no ((ref0 . (^ (Track <: succs))) & Junction))));1;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => (no ((ref0 . (Track <: signals)) & Semaphore))));13
this/inv1;(all ref0:(one Track)|(one ref1:(one Entry),ref2:(one Exit)|((ref0 in Entry) && (ref0 in Exit))));1;((some ref0:(one Track)|(ref0 in Entry)) && (some ref1:(one Track)|(ref1 in Exit)));7
this/inv9;(all ref0:(one Track)|(some ref1:(one Semaphore)|(all ref2:(one Junction)|((ref1 in (ref0 . (Track <: signals))) => (ref0 !in (ref2 . (^ (Track <: succs))))))));1;(all ref0:(one Track)|((ref0 in ((Track <: signals) . Semaphore)) => (ref0 in ((Track <: succs) . Junction))));13
this/inv5;(all ref0:(one Track)|((ref0 in Junction) => ((# (ref0 & (Track . (Track <: succs)))) > 1)));1;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) <=> (ref0 in Junction)));14
this/inv4;(all ref0:(one Track),ref1:(one Track)|(((ref0 != ref1) && (ref0 in Entry)) => (ref0 !in (ref1 . (Track <: succs)))));1;(all ref0:(one Track)|((all ref1:(one Track)|(ref0 !in (ref1 . (Track <: succs)))) <=> (ref0 in Entry)));16
this/inv3;(all ref0:(one Track),ref1:(one (Track - ref0))|((ref0 in Entry) => ((ref1 -> ref0) !in (Track <: succs))));1;(all ref0:(one Track)|((all ref1:(one Track)|(ref1 !in (ref0 . (Track <: succs)))) <=> (ref0 in Exit)));14
this/inv2;(all ref0:(one Signal),ref1:(one Signal),ref2:(one Track),ref3:(one Track)|(((ref0 in ((Track <: signals) . ref2)) && (ref1 in ((Track <: signals) . ref3))) => (ref0 != ref3)));1;((all ref0:(one Signal)|(lone ((Track <: signals) . ref0))) && (Signal in (Track . (Track <: signals))));18
this/inv9;(all ref0:(one Track)|(some ref1:(one Junction)|((ref1 !in (ref0 . (^ (Track <: succs)))) => (Semaphore !in ((ref0 . (^ (Track <: succs))) . (Track <: signals))))));1;(all ref0:(one Track)|((all ref1:(one Junction)|(ref1 !in (ref0 . (Track <: succs)))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));11
this/inv9;(all ref0:(one Junction),ref1:(one Track)|(some ref2:(one Semaphore)|((ref2 in (ref1 . (Track <: signals))) => (ref1 !in (ref0 . (^ (Track <: succs)))))));1;(((Track <: signals) . Semaphore) in ((Track <: succs) . Junction));14
this/inv1;(one ref0:(one Signal),ref1:(one Track)|(((ref1 -> ref0) in (Track <: signals)) => ((ref1 in Entry) && (ref1 in Exit))));1;((some ref0:(one Track)|(ref0 in Entry)) && (some ref1:(one Track)|(ref1 in Exit)));12
this/inv2;(all ref0:(one Signal),ref1:(one Signal),ref2:(one Track),ref3:(one Track)|(((ref0 in (ref2 . (Track <: signals))) && (ref1 in (ref3 . (Track <: signals)))) => (ref0 != ref3)));1;((all ref0:(one Signal)|(lone ((Track <: signals) . ref0))) && (Signal in (Track . (Track <: signals))));18
this/inv5;(all ref0:(one Track)|((ref0 in Junction) => (ref0 in (Track . (Track <: succs)))));1;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});12
this/inv3;(all ref0:(one Track),ref1:(one (Track - ref0))|((ref0 in Entry) => ((ref1 -> ref0) in (Track <: succs))));1;(all ref0:(one Track)|(((ref0 . (Track <: succs)) in none) <=> (ref0 in Exit)));13
this/inv10;(all ref0:(one Track)|((Junction in (ref0 . (^ (Track <: succs)))) => (Semaphore in ((ref0 . (^ (Track <: succs))) . (Track <: signals)))));1;(all ref0:(one Track)|((some ref1:(one Junction)|(ref1 in (ref0 . (Track <: succs)))) => (some ref2:(one Semaphore)|(ref2 in (ref0 . (Track <: signals))))));12
this/inv9;(all ref0:(one univ)|((ref0 in (Track <: (Junction . (Track <: succs)))) => (some ((ref0 . (Track <: signals)) & Semaphore))));1;(all ref0:(one Track)|((ref0 in (Track - ((Track <: succs) . Junction))) => (no ((ref0 . (Track <: signals)) & Semaphore))));8
this/inv1;((all ref0:(one Exit),ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))) && (all ref2:(one Track)|(some ref3:(one Track)|((((ref3 -> ref2) in (Track <: succs)) && (ref3 in Entry)) => (some ref4:(one Track)|(((ref2 -> ref4) in (Track <: succs)) && (ref4 in Exit)))))));1;((some ref0:(one Track)|(ref0 in Entry)) && (some ref1:(one Track)|(ref1 in Exit)));29
this/inv9;(no ((((Track <: succs) . Junction) . (Track <: signals)) :> Semaphore));1;(no (((Track - ((Track <: succs) . Junction)) . (Track <: signals)) :> Semaphore));2
this/inv9;(all ref0:(one Junction),ref1:(one Track)|(some ref2:(one Semaphore)|((ref1 in (ref0 . (Track <: succs))) || (ref2 !in (ref1 . (Track <: signals))))));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|(ref1 in (ref0 . (Track <: succs))))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));11
this/inv9;(no ((((Track <: succs) :> Junction) . (Track <: signals)) . Semaphore));1;(no (((Track - ((Track <: succs) . Junction)) . (Track <: signals)) :> Semaphore));6
this/inv1;(all ref0:(one Exit),ref1:(one Track)|((all ref2:(one Track)|(some ref3:(one Track)|((((ref3 -> ref2) in (Track <: succs)) && (ref3 in Entry)) => (some ref4:(one Track)|(((ref2 -> ref4) in (Track <: succs)) && (ref4 in Exit)))))) && ((ref0 -> ref1) !in (Track <: succs))));1;((some ref0:(one Track)|(ref0 in Entry)) && (some ref1:(one Track)|(ref1 in Exit)));29
this/inv9;(all ref0:(one (Track <: (Junction . (Track <: succs))))|(some ((ref0 . (Track <: signals)) & Semaphore)));1;(((Track <: signals) . Semaphore) in ((Track <: succs) . Junction));10
this/inv5;(all ref0:(one Track),ref1:(one Track),ref2:(one Track)|((ref0 in Junction) => ((ref0 != ref1) && (ref0 != ref2) && (ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));20
this/inv2;(all ref0:(one Signal),ref1:(one Track),ref2:(one Track)|(((ref0 in (ref1 . (Track <: signals))) && (ref0 in (ref2 . (Track <: signals)))) => (ref0 != ref0)));1;(all ref0:(one Signal)|(one ref1:(one Track)|(ref0 in (ref1 . (Track <: signals)))));15
this/inv9;(no ((((Track <: succs) :> (Track - Junction)) . (Track <: signals)) . Semaphore));1;(no (((Track - ((Track <: succs) . Junction)) . (Track <: signals)) :> Semaphore));6
this/inv5;((all ref0:(one Junction)|(some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs)))))) && (all ref3:(one Track),ref4:(one Track),ref5:(one Track)|(((ref3 in (ref4 . (Track <: succs))) && (ref3 in (ref5 . (Track <: succs))) && (ref4 != ref5)) => (ref3 in Junction))));1;((all ref0:(one Junction)|(some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2)))) && (all ref3:(one Track),ref4:(one Track),ref5:(one Track)|(((ref3 in (ref4 . (Track <: succs))) && (ref3 in (ref5 . (Track <: succs))) && (ref4 != ref5)) => (ref3 in Junction))));15
this/inv9;(all ref0:(one Junction),ref1:(one Track)|(some ref2:(one Semaphore)|((ref1 in ((Track <: succs) . ref0)) || (ref2 !in (ref1 . (Track <: signals))))));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|(ref1 in (ref0 . (Track <: succs))))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));13
this/inv5;((all ref0:(one Track),ref1:(one Track),ref2:(one Track)|((ref0 in Junction) => ((ref0 != ref1) && (ref0 != ref2) && (ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2)))) && (all ref3:(one Track),ref4:(one Track),ref5:(one Track)|(((ref3 != ref4) && (ref3 != ref5) && (ref3 in (ref4 . (Track <: succs))) && (ref3 in (ref5 . (Track <: succs))) && (ref4 != ref5)) => (ref3 in Junction))));1;((all ref0:(one Junction)|(some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2)))) && (all ref3:(one Track),ref4:(one Track),ref5:(one Track)|(((ref3 in (ref4 . (Track <: succs))) && (ref3 in (ref5 . (Track <: succs))) && (ref4 != ref5)) => (ref3 in Junction))));28
this/inv3;(all ref0:(one Track),ref1:(one Track)|(((ref0 -> ref1) !in (Track <: succs)) => (ref1 in Exit)));1;(all ref0:(one Track)|((all ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))) <=> (ref0 in Exit)));8
this/inv9;(all ref0:(one Track),ref1:(one Track)|(((ref0 !in Junction) && (ref1 in (ref0 . (Track <: succs)))) => (some ((ref0 . (Track <: signals)) & Semaphore))));1;(all ref0:(one Track)|((! (some ((ref0 . (Track <: succs)) & Junction))) => (! (some ((ref0 . (Track <: signals)) & Semaphore)))));14
this/inv4;(all ref0:(one Track)|((ref0 in Entry) => (ref0 !in ((Track - ref0) . (Track <: succs)))));1;(Entry = (Track - (Track . (Track <: succs))));11
this/inv4;(all ref0:(one Track)|((no (ref0 . (~ (Track <: succs)))) => (ref0 in Entry)));1;(all ref0:(one Track)|((no (ref0 . (~ (Track <: succs)))) <=> (ref0 in Entry)));4
this/inv9;(all ref0:(one Track)|(((ref0 . (Track <: succs)) !in Junction) => (no ref1:(one Semaphore)|(ref1 in (ref0 . (Track <: signals))))));1;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => (! (some ref1:(one Semaphore)|(ref1 in (ref0 . (Track <: signals)))))));8
this/inv9;(all ref0:(one Junction),ref1:(one Track)|(some ref2:(one Semaphore)|((ref1 in (ref0 . (^ (Track <: succs)))) || (ref2 !in (ref1 . (Track <: signals))))));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|(ref1 in (ref0 . (Track <: succs))))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));12
this/inv4;(all ref0:(one Entry),ref1:(one Track)|(ref0 !in ((Track <: succs) . ref1)));1;(all ref0:(one Track)|((ref0 !in (Track . (Track <: succs))) <=> (ref0 in Entry)));9
this/inv10;(all ref0:(one Junction)|(some ref1:(one Semaphore)|(all ref2:(one Track)|((ref0 in (ref2 . (Track <: succs))) => (ref1 in (ref2 . (Track <: signals)))))));1;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (ref0 in ((Track <: signals) . Semaphore))));10
this/inv1;((all ref0:(one Exit),ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))) && (all ref2:(one Entry),ref3:(one Track)|((ref3 -> ref2) !in (Track <: succs))) && (all ref4:(one Junction)|(some ref5:(one Track),ref6:(one Track)|(((ref4 -> ref6) in (Track <: succs)) && ((ref5 -> ref4) in (Track <: succs))))) && (all ref7:(one Track)|(some ref8:(one Track)|((((ref8 -> ref7) in (Track <: succs)) && (ref8 in Entry)) => (some ref9:(one Track)|(((ref7 -> ref9) in (Track <: succs)) && (ref9 in Exit)))))));1;((some ref0:(one Track)|(ref0 in Entry)) && (some ref1:(one Track)|(ref1 in Exit)));50
this/inv9;(all ref0:(one Track)|(some ref1:(one Junction)|((ref1 in (ref0 . (Track <: succs))) => (some ref2:(one Semaphore)|(ref2 in (ref0 . (Track <: signals)))))));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|(ref1 in (ref0 . (Track <: succs))))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));9
this/inv3;((all ref0:(one (Track - Exit))|(some ((Track <: succs) . ref0))) && (no (Exit . (Track <: succs))));1;((all ref0:(one (Track - Exit))|(some (ref0 . (Track <: succs)))) && (no (Exit . (Track <: succs))));4
this/inv9;(all ref0:(one Junction),ref1:(one Track)|((ref0 in (ref1 . (Track <: succs))) => (some ref2:(one Semaphore)|(ref2 in (ref1 . (Track <: signals))))));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|((ref0 -> ref1) in (Track <: succs)))) => (! (some ref2:(one Semaphore)|((ref0 -> ref2) in (Track <: signals))))));14
this/inv1;((all ref0:(one Exit),ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))) && (all ref2:(one Entry),ref3:(one Track)|((ref3 -> ref2) !in (Track <: succs))) && (all ref4:(one Junction)|(some ref5:(one Track),ref6:(one Track)|(((ref4 -> ref6) in (Track <: succs)) && ((ref5 -> ref4) in (Track <: succs))))));1;(some (Entry -> Exit));31
this/inv5;(all ref0:(one Track)|((ref0 in Junction) <=> (some (ref0 . (~ (Track <: succs))))));1;(all ref0:(one Track)|((some ref1:(one (ref0 . (~ (Track <: succs)))),ref2:(one (ref0 . (~ (Track <: succs))))|(ref1 != ref2)) <=> (ref0 in Junction)));12
this/inv3;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) => (((ref0 in Exit) && (ref0 in Exit)) => (no (ref0 . (Track <: succs))))));1;(all ref0:(one Track)|(((no (ref0 . (Track <: succs))) => (ref0 in Exit)) && ((ref0 in Exit) => (no (ref0 . (Track <: succs))))));8
this/inv4;(all ref0:(one Track)|((ref0 in Exit) => (some ref1:(one (Track - ref0))|((ref1 -> ref0) !in (Track <: succs)))));1;(all ref0:(one Track)|((all ref1:(one Track)|((ref1 -> ref0) !in (Track <: succs))) <=> (ref0 in Entry)));12
this/inv5;(all ref0:(one Track),ref1:(one Track)|(((# ((Track <: succs) . ref1)) > 1) => (ref1 in Junction)));1;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) <=> (ref0 in Junction)));9
this/inv10;(all ref0:(one Junction),ref1:(one Track)|((ref1 in (ref0 . (Track <: succs))) => (some ref2:(one Semaphore)|(ref2 in (ref1 . (Track <: signals))))));1;(all ref0:(one Track)|((some ref1:(one Junction)|(ref1 in (ref0 . (Track <: succs)))) => (some ref2:(one Semaphore)|(ref2 in (ref0 . (Track <: signals))))));8
this/inv9;(all ref0:(one Junction),ref1:(one Track)|((some ref2:(one Semaphore)|(ref2 in (ref1 . (Track <: signals)))) <=> (ref0 in (ref1 . (Track <: succs)))));1;(all ref0:(one Track)|((ref0 in ((Track <: signals) . Semaphore)) => (ref0 in ((Track <: succs) . Junction))));12
this/inv8;((Entry != Exit) && (((Entry . (^ (Track <: succs))) & Exit) = Exit));1;(all ref0:(one Entry)|(((ref0 + (ref0 . (^ (Track <: succs)))) & Exit) = Exit));9
this/inv1;(all ref0:(one Entry),ref1:(one Exit),ref2:(one Track)|((ref0 != ref1) && (ref0 != ref2) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2) && (ref1 in (ref2 . (Track <: succs))) && (ref2 !in (ref2 . (Track <: succs)))));1;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) && (ref1 in Track)));27
this/inv9;(all ref0:(one Track),ref1:(one Track)|((((ref1 -> ref0) in (Track <: succs)) && (ref1 in Junction)) => (all ref2:(one Semaphore)|((ref0 -> ref2) in (Track <: signals)))));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|((ref0 -> ref1) in (Track <: succs)))) => (! (some ref2:(one Semaphore)|((ref0 -> ref2) in (Track <: signals))))));14
this/inv4;(all ref0:(one Track)|((no ((ref0 . (* (Track <: succs))) & Entry)) <=> (ref0 in Entry)));1;(all ref0:(one Track)|((no (ref0 . (~ (Track <: succs)))) <=> (ref0 in Entry)));6
this/inv5;((all ref0:(one (Track - Junction))|(one ((Track <: succs) . ref0))) && (some ((Track <: succs) . Junction)));1;(all ref0:(one Track)|(((! (one ((Track <: succs) . ref0))) && (some ((Track <: succs) . ref0))) <=> (ref0 in Junction)));9
this/inv9;(no (((((Track <: succs) . Track) - ((Track <: succs) . Junction)) . (Track <: signals)) :> Semaphore));1;(no (((Track - ((Track <: succs) . Junction)) . (Track <: signals)) :> Semaphore));2
this/inv5;((all ref0:(one (Track - Junction))|(one ((Track <: succs) . ref0))) && (some ref1:(one Track),ref2:(one Track)|(all ref3:(one Track)|((ref3 in Junction) => ((ref1 != ref2) && ((ref1 -> ref3) in (Track <: succs)) && ((ref2 -> ref3) in (Track <: succs)))))));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref1 != ref2) && ((ref1 -> ref0) in (Track <: succs)) && ((ref2 -> ref0) in (Track <: succs)))) <=> (ref0 in Junction)));24
this/inv4;(all ref0:(one Track),ref1:(one Track)|((ref0 !in Entry) <=> (ref0 in (ref1 . (Track <: succs)))));1;(all ref0:(one Track)|((! (some ref1:(one Track)|(ref0 in (ref1 . (Track <: succs))))) <=> (ref0 in Entry)));11
this/inv4;(all ref0:(one Track)|((ref0 !in (Track . (* (Track <: succs)))) <=> (ref0 in Entry)));1;(all ref0:(one Track)|((ref0 !in (Track . (Track <: succs))) <=> (ref0 in Entry)));3
this/inv9;(all ref0:(one Track),ref1:(one Track)|((((ref1 -> ref0) !in (Track <: succs)) && (ref1 in Junction)) => (all ref2:(one Semaphore)|((ref0 -> ref2) !in (Track <: signals)))));1;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));16
this/inv10;(all ref0:(one Track),ref1:(one Track)|((ref0 in Junction) => (some ref2:(one Semaphore)|(ref2 in (((Track <: succs) . ref0) . (Track <: signals))))));1;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (ref0 in ((Track <: signals) . Semaphore))));12
this/inv4;(all ref0:(one Track),ref1:(one Track)|((ref0 !in Entry) <=> (ref1 in (ref0 . (Track <: succs)))));1;(all ref0:(one Track)|((ref0 !in (Track . (Track <: succs))) <=> (ref0 in Entry)));11
this/inv3;(no ((Exit <: Track) . (Track <: succs)));1;(Exit = (Track - ((Track <: succs) . Track)));7
this/inv10;(all ref0:(one Track)|((ref0 in Junction) => (some ref1:(one Semaphore)|(ref1 in (((Track <: succs) . ref0) . (Track <: signals))))));1;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (ref0 in ((Track <: signals) . Semaphore))));11
this/inv9;(no (((Junction . (~ (Track <: succs))) . (Track <: signals)) & Semaphore));1;(no (((Track - ((Track <: succs) . Junction)) . (Track <: signals)) :> Semaphore));7
this/inv3;(no ((Exit <: Track) . (^ (Track <: succs))));1;(Exit = (Track - ((Track <: succs) . Track)));8
this/inv4;(all ref0:(one Track),ref1:(one Track)|((ref1 !in Entry) <=> (ref1 in (ref0 . (Track <: succs)))));1;(all ref0:(one Track)|((all ref1:(one Track)|(ref0 !in (ref1 . (Track <: succs)))) <=> (ref0 in Entry)));12
this/inv3;(all ref0:(one univ)|((ref0 in Exit) => (all ref1:(one Track)|(ref1 in (ref0 . (Track <: succs))))));1;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (Track <: succs)))));10
this/inv3;(all ref0:(one Exit)|(one ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))));1;(all ref0:(one Track)|((all ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))) <=> (ref0 in Exit)));8
this/inv9;(all ref0:(one Junction),ref1:(one Track)|((ref0 !in (ref1 . (^ (Track <: succs)))) => (! (some ref2:(one Semaphore)|((ref1 -> ref2) in (Track <: signals))))));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|((ref0 -> ref1) in (Track <: succs)))) => (! (some ref2:(one Semaphore)|((ref0 -> ref2) in (Track <: signals))))));14
this/inv9;(Semaphore !in ((Junction . (~ (Track <: succs))) . (Track <: signals)));1;(no (Semaphore & ((Track - ((Track <: succs) . Junction)) . (Track <: signals))));8
this/inv10;(all ref0:(one Track)|((ref0 in Junction) => (some ref1:(one Semaphore),ref2:(one Track)|((ref1 in (ref2 . (Track <: signals))) && (ref2 in ((Track <: succs) . ref0))))));1;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (ref0 in ((Track <: signals) . Semaphore))));16
this/inv10;(all ref0:(one Semaphore),ref1:(one Track),ref2:(one Track)|((((ref2 -> ref1) in (Track <: succs)) && (ref2 in Junction)) => ((ref1 -> ref0) in (Track <: signals))));1;(all ref0:(one Junction),ref1:(one Track)|(((ref1 -> ref0) in (Track <: succs)) => (some ref2:(one Semaphore)|((ref1 -> ref2) in (Track <: signals)))));14
this/inv10;(Semaphore in ((Junction . (~ (Track <: succs))) . (Track <: signals)));1;(((Track <: succs) . Junction) in ((Track <: signals) . Semaphore));7
this/inv10;(some ((((Track <: succs) . Junction) . (Track <: signals)) :> Semaphore));1;(((Track <: succs) . Junction) in ((Track <: signals) . Semaphore));5
this/inv3;(all ref0:(one univ)|((ref0 in Exit) => (all ref1:(one Track)|(ref1 !in (ref0 . (Track <: succs))))));1;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (Track <: succs)))));10
this/inv4;(all ref0:(one Track),ref1:(one Track)|((ref1 !in (ref0 . (Track <: succs))) <=> (ref1 in Entry)));1;(all ref0:(one Track)|((all ref1:(one Track)|((ref1 -> ref0) !in (Track <: succs))) <=> (ref0 in Entry)));8
this/inv3;(all ref0:(one Track)|((ref0 in Exit) => (no ref1:(one Track)|(ref1 in (ref0 . (Track <: succs))))));1;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (Track <: succs)))));10
this/inv10;(all ref0:(one Track),ref1:(one Track)|(one ref2:(one Semaphore)|((((ref1 -> ref0) in (Track <: succs)) && (ref1 in Junction)) => ((ref0 -> ref2) in (Track <: signals)))));1;(all ref0:(one Track)|((some ref1:(one Track)|(((ref0 -> ref1) in (Track <: succs)) && (ref1 in Junction))) => (some ref2:(one Signal)|(((ref0 -> ref2) in (Track <: signals)) && (ref2 in Semaphore)))));12
this/inv3;(all ref0:(one Exit),ref1:(one Track)|(((# (ref1 . (Track <: succs))) = 0) => (ref1 in ref0)));1;(all ref0:(one Track)|(((# (ref0 . (Track <: succs))) = 0) <=> (ref0 in Exit)));9
this/inv4;(all ref0:(one Track),ref1:(one Track)|((ref1 in Entry) => (ref1 !in (ref0 . (Track <: succs)))));1;(Entry = {ref0:(one Track)|(no ((Track <: succs) . ref0))});12
this/inv10;(all ref0:(one Track)|(((ref0 !in Entry) && (ref0 !in Exit) && (ref0 in Junction)) => (some ref1:(one Semaphore)|(all ref2:(one Track)|((ref2 in ((Track <: succs) . ref0)) => (ref1 in (ref2 . (Track <: signals))))))));1;(all ref0:(one Junction),ref1:(one Track)|((ref1 in ((Track <: succs) . ref0)) => (some ref2:(one Semaphore)|((ref1 -> ref2) in (Track <: signals)))));21
this/inv9;(some ref0:(one Junction),ref1:(one Track)|((! ((ref1 -> ref0) in (Track <: succs))) => (! (some ref2:(one Semaphore)|((ref1 -> ref2) in (Track <: signals))))));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|((ref0 -> ref1) in (Track <: succs)))) => (! (some ref2:(one Semaphore)|((ref0 -> ref2) in (Track <: signals))))));10
this/inv10;(all ref0:(one Track),ref1:(one Track)|(one ref2:(one Semaphore)|((((ref0 -> ref1) in (Track <: succs)) && (ref1 in Junction)) => ((ref0 -> ref2) in (Track <: signals)))));1;(all ref0:(one Track)|((some ref1:(one Track)|(((ref0 -> ref1) in (Track <: succs)) && (ref1 in Junction))) => (some ref2:(one Signal)|(((ref0 -> ref2) in (Track <: signals)) && (ref2 in Semaphore)))));10
this/inv4;(all ref0:(one Track),ref1:(one Track)|((! (ref0 in (ref0 . (Track <: succs)))) <=> (ref1 in Entry)));1;(all ref0:(one Track)|((! (ref0 in (Track . (Track <: succs)))) <=> (ref0 in Entry)));7
this/inv9;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) => (no ((ref0 . (Track <: signals)) & Semaphore))));1;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => (no ((ref0 . (Track <: signals)) & Semaphore))));4
this/inv9;((all ref0:(one Track)|((no (ref0 . (Track <: succs))) => (no ((ref0 . (Track <: signals)) & Semaphore)))) && (all ref1:(one Track),ref2:(one Track)|(((ref2 !in Junction) && (ref2 in (ref1 . (Track <: succs)))) => (no ((ref1 . (Track <: signals)) & Semaphore)))));1;((all ref0:(one Track)|((no (ref0 . (Track <: succs))) => (no ((ref0 . (Track <: signals)) & Semaphore)))) && (all ref1:(one Track)|((no ((ref1 . (Track <: succs)) & Junction)) => (no ((ref1 . (Track <: signals)) & Semaphore)))));14
this/inv4;(all ref0:(one Entry),ref1:(one Signal),ref2:(one Track)|(((ref0 -> ref1) !in (Track <: signals)) && ((ref2 -> ref0) !in (Track <: succs))));1;((all ref0:(one Entry),ref1:(one Track)|(ref0 !in (ref1 . (Track <: succs)))) && (all ref2:(one (Track - Entry))|(ref2 in (Track . (Track <: succs)))));16
this/inv4;(all ref0:(one Track),ref1:(one Track)|((! (ref1 in (ref0 . (Track <: succs)))) <=> (ref1 in Entry)));1;(all ref0:(one Track)|((! (ref0 in (Track . (Track <: succs)))) <=> (ref0 in Entry)));9
this/inv10;(all ref0:(one Junction)|((((Track <: succs) . ref0) . (Track <: signals)) in Semaphore));1;(((Track <: succs) . Junction) in ((Track <: signals) . Semaphore));5
this/inv10;(all ref0:(one Junction)|(some ref1:(one Semaphore)|(all ref2:(one Track)|((ref2 in ((Track <: succs) . ref0)) => (ref1 in (ref2 . (Track <: signals)))))));1;(all ref0:(one Junction),ref1:(one Track)|((ref1 in ((Track <: succs) . ref0)) => (some ref2:(one Semaphore)|((ref1 -> ref2) in (Track <: signals)))));10
this/inv8;(all ref0:(one Track)|((ref0 in (Track - Exit)) => (Exit in (ref0 . (^ (Track <: succs))))));1;(all ref0:(one Entry)|(Exit in (ref0 . (* (Track <: succs)))));10
this/inv10;(some ref0:(one Track),ref1:(one (Track - ref0))|(one ref2:(one Semaphore)|((((ref0 -> ref1) in (Track <: succs)) && (ref1 in Junction)) => ((ref0 -> ref2) in (Track <: signals)))));1;(all ref0:(one Track)|((some ref1:(one Track)|(((ref0 -> ref1) in (Track <: succs)) && (ref1 in Junction))) => (some ref2:(one Signal)|(((ref0 -> ref2) in (Track <: signals)) && (ref2 in Semaphore)))));10
this/inv1;(all ref0:(one Track)|(some ref1:(one Entry),ref2:(one Exit)|((1 < (# ref1)) && (1 < (# ref2)))));1;((1 < (# Entry)) && (1 < (# Exit)));7
this/inv3;((all ref0:(one Track)|(((# ((Track <: succs) . ref0)) = 0) => (ref0 in Entry))) && (all ref1:(one Track)|((ref1 in Entry) => ((# ((Track <: succs) . ref1)) = 0))));1;((all ref0:(one Track)|(((# (ref0 . (Track <: succs))) = 0) => (ref0 in Exit))) && (all ref1:(one Track)|((ref1 in Exit) => ((# (ref1 . (Track <: succs))) = 0))));12
this/inv1;(some ref0:(one Track)|((Entry in Track) && (Exit in Track)));1;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) && (ref1 in Track)));7
this/inv8;(all ref0:(one Track)|((ref0 in (Track - Exit)) <=> (Exit in (ref0 . (^ (Track <: succs))))));1;(all ref0:(one Entry)|(Exit in (ref0 . (* (Track <: succs)))));10
this/inv3;(no ref0:(one Track)|(ref0 in (Exit . (Track <: succs))));1;((all ref0:(one (Track - Exit))|(some (ref0 . (Track <: succs)))) && (no (Exit . (Track <: succs))));8
this/inv1;(all ref0:(one Track)|(some ref1:(one Entry),ref2:(one Exit)|((ref0 in (ref0 . (Track <: succs))) && (ref1 in (ref0 . (Track <: succs))) && (ref2 in (ref0 . (Track <: succs))))));1;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) && (ref1 in Track)));18
this/inv9;(all ref0:(one Track)|((no ((ref0 . (Track <: signals)) & Semaphore)) <=> ((ref0 . (Track <: succs)) !in Junction)));1;(((Track <: signals) . Semaphore) in ((Track <: succs) . Junction));12
this/inv10;(all ref0:(one Track)|(some ref1:(one Junction)|((ref0 in (ref1 . (Track <: succs))) => (some ((ref0 . (Track <: signals)) & Semaphore)))));1;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (some ((ref0 . (Track <: signals)) & Semaphore))));5
this/inv3;(no (Track . (Track <: succs)));1;(Exit = (Track - (Track . (~ (Track <: succs)))));6
this/inv6;(all ref0:(one Entry)|(one ref1:(one Signal)|(ref1 in (ref0 . (Track <: signals)))));1;(all ref0:(one Entry)|(some ref1:(one Speed)|(ref1 in (ref0 . (Track <: signals)))));4
this/inv1;(all ref0:(one Track)|(some ref1:(one Entry),ref2:(one Exit)|((ref1 in (ref0 . (^ (Track <: succs)))) && (ref2 in (ref0 . (^ (Track <: succs)))))));1;(some ref0:(one Track)|((some ref1:(one Track)|(ref1 in Exit)) && (ref0 in Entry)));15
this/inv5;(all ref0:(one Junction)|(some ref1:(one Track),ref2:(one Track)|(((ref1 -> ref0) in (Track <: succs)) && ((ref2 -> ref0) in (Track <: succs)))));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref1 != ref2) && ((ref1 -> ref0) in (Track <: succs)) && ((ref2 -> ref0) in (Track <: succs)))) <=> (ref0 in Junction)));13
this/inv1;((Track in Entry) && (Track in Exit));1;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) && (ref1 in Track)));6
this/inv3;(all ref0:(one univ)|((ref0 in Exit) => (none in (ref0 . (^ (Track <: succs))))));1;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (^ (Track <: succs))))));9
this/inv8;(all ref0:(one Track)|((ref0 in Entry) <=> (Exit in (ref0 . (^ (Track <: succs))))));1;(all ref0:(one Entry)|(Exit in (ref0 . (* (Track <: succs)))));8
this/inv6;(all ref0:(one Entry)|(lone ref1:(one Speed)|(ref1 in (ref0 . (Track <: signals)))));1;(all ref0:(one Entry)|(some ref1:(one Speed)|(ref1 in (ref0 . (Track <: signals)))));4
this/inv1;(all ref0:(one Track)|((some (ref0 . (Track <: succs))) => (some ref1:(one Entry),ref2:(one Exit)|((ref1 in (ref0 . (^ (Track <: succs)))) && (ref2 in (ref0 . (^ (Track <: succs))))))));1;(some ref0:(one Track)|((some ref1:(one Track)|(ref1 in Exit)) && (ref0 in Entry)));20
this/inv9;((no (Junction & (Track . (Track <: succs)))) => (no (Semaphore & (Track . (Track <: signals)))));1;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => (no ((ref0 . (Track <: signals)) & Semaphore))));9
this/inv4;(all ref0:(one Entry)|(no ref1:(one (Track - ref0))|(ref0 in (ref1 . (Track <: succs)))));1;(all ref0:(one Track)|((! (some ref1:(one Track)|(ref0 in (ref1 . (Track <: succs))))) <=> (ref0 in Entry)));9
this/inv3;(all ref0:(one univ)|((ref0 in Exit) => ((# (ref0 . (Track <: succs))) = 0)));1;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (Track <: succs)))));10
this/inv5;((all ref0:(one Track)|((ref0 in Junction) => ((# ((Track <: succs) . ref0)) > 0))) && (all ref1:(one Track)|(((# ((Track <: succs) . ref1)) > 0) => (ref1 in Junction))));1;((all ref0:(one Track)|((ref0 in Junction) => ((# ((Track <: succs) . ref0)) > 1))) && (all ref1:(one Track)|(((# ((Track <: succs) . ref1)) > 1) => (ref1 in Junction))));4
this/inv8;(all ref0:(one Entry)|((ref0 !in Exit) => (Exit in (ref0 . (^ (Track <: succs))))));1;(all ref0:(one Entry)|(Exit in (ref0 . (* (Track <: succs)))));8
this/inv1;(all ref0:(one (Track . (Track <: succs)))|(some ref1:(one Entry),ref2:(one Exit)|((ref1 in (ref0 . (^ (Track <: succs)))) && (ref2 in (ref0 . (^ (Track <: succs)))))));1;(some ref0:(one Track)|((some ref1:(one Track)|(ref1 in Exit)) && (ref0 in Entry)));15
this/inv5;(all ref0:(one Track)|(some ref1:(one Track),ref2:(one Track)|((ref0 in Junction) => (((ref1 -> ref0) in (Track <: succs)) && ((ref2 -> ref0) in (Track <: succs))))));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref1 != ref2) && ((ref1 -> ref0) in (Track <: succs)) && ((ref2 -> ref0) in (Track <: succs)))) <=> (ref0 in Junction)));17
this/inv1;(all ref0:(one Track)|(some ref1:(one Entry),ref2:(one Exit)|((ref1 in (ref0 . (Track <: succs))) || (ref2 in (ref0 . (Track <: succs))))));1;(some ref0:(one Track)|((some ref1:(one Track)|(ref1 in Exit)) && (ref0 in Entry)));15
this/inv5;(all ref0:(one Junction)|(some ref1:(one Track),ref2:(one Track)|((ref1 !in Exit) && ((ref1 -> ref0) in (Track <: succs)) && (ref2 !in Exit) && ((ref2 -> ref0) in (Track <: succs)))));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref1 != ref2) && ((ref1 -> ref0) in (Track <: succs)) && ((ref2 -> ref0) in (Track <: succs)))) <=> (ref0 in Junction)));17
this/inv5;(all ref0:(one Track)|((ref0 in Junction) => ((# (ref0 . (~ (Track <: succs)))) > 1)));1;(all ref0:(one Track)|(((# (ref0 . (~ (Track <: succs)))) > 1) <=> (ref0 in Junction)));10
this/inv10;(all ref0:(one ((Track . (Track <: succs)) <: Junction))|(some ((ref0 . (Track <: signals)) & Semaphore)));1;(all ref0:(one ((Track <: succs) . Junction))|(some ((ref0 . (Track <: signals)) & Semaphore)));2
this/inv6;(all ref0:(one Entry),ref1:(one Signal)|(ref1 in (ref0 . (Track <: signals))));1;(all ref0:(one Entry)|(some ref1:(one Speed)|(ref1 in (ref0 . (Track <: signals)))));4
this/inv10;(all ref0:(one ((Track <: Junction) . (Track <: succs)))|(some ((ref0 . (Track <: signals)) & Semaphore)));1;(all ref0:(one ((Track <: succs) . Junction))|(some ((ref0 . (Track <: signals)) & Semaphore)));2
this/inv5;(all ref0:(one Track)|((ref0 in Junction) => ((# ((~ (Track <: succs)) . ref0)) > 1)));1;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) <=> (ref0 in Junction)));11
this/inv10;(all ref0:(one (Junction . (Track <: succs)))|(some ((ref0 . (Track <: signals)) & Semaphore)));1;(all ref0:(one ((Track <: succs) . Junction))|(some ((ref0 . (Track <: signals)) & Semaphore)));2
this/inv3;(all ref0:(one univ),ref1:(one univ),ref2:(one univ)|(((ref0 in Exit) && (ref1 in Entry) && (ref2 in Junction)) => ((ref1 !in (ref0 . (Track <: succs))) && (ref2 !in (ref0 . (Track <: succs))))));1;((all ref0:(one (Track - Exit))|(some (ref0 . (Track <: succs)))) && (no (Exit . (Track <: succs))));23
this/inv1;((all ref0:(one Track)|(some ref1:(one Entry),ref2:(one Exit)|((ref1 in (ref0 . (Track <: succs))) && (ref2 in (ref0 . (Track <: succs)))))) && (all ref3:(one Entry),ref4:(one Exit)|(some ref5:(one Track)|((ref3 in (ref5 . (Track <: succs))) && (ref4 in (ref5 . (Track <: succs)))))));1;(some ref0:(one Track)|((some ref1:(one Track)|(ref1 in Exit)) && (ref0 in Entry)));28
this/inv6;(all ref0:(one Track)|((ref0 in Entry) => (one ref1:(one Speed)|((ref0 -> ref1) in (Track <: signals)))));1;(all ref0:(one Track)|(some ref1:(one Speed)|((ref0 in Entry) => ((ref0 -> ref1) in (Track <: signals)))));4
this/inv4;(all ref0:(one Entry),ref1:(one Track)|((ref0 in ref1) => (ref0 !in (ref1 . (^ (Track <: succs))))));1;(all ref0:(one Track)|((all ref1:(one Track)|(ref0 !in (ref1 . (Track <: succs)))) <=> (ref0 in Entry)));13
this/inv9;(all ref0:(one Junction),ref1:(one Track)|((! (some ref2:(one Junction)|(ref2 in (ref1 . (Track <: succs))))) => (all ref3:(one Semaphore)|(ref3 !in (ref1 . (Track <: signals))))));1;(all ref0:(one Semaphore),ref1:(one Track)|((no ((ref1 . (Track <: succs)) & Junction)) => (ref0 !in (ref1 . (Track <: signals)))));14
this/inv1;(all ref0:(one Entry),ref1:(one Exit)|(some ref2:(one Track)|((ref0 in (ref2 . (Track <: succs))) && (ref1 in (ref2 . (Track <: succs))))));1;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) && (ref1 in Track)));13
this/inv4;(all ref0:(one Entry),ref1:(one Track)|((ref0 in Track) => (ref0 !in (Track . (^ (Track <: succs))))));1;(Entry = (Track - (Track . (^ (Track <: succs)))));10
this/inv4;(all ref0:(one Entry)|((ref0 in Track) => (ref0 !in (Track . (^ (Track <: succs))))));1;(Entry = (Track - (Track . (^ (Track <: succs)))));9
this/inv5;(all ref0:(one univ)|((ref0 in Junction) => ((# (ref0 . (Track <: succs))) > 1)));1;(all ref0:(one Track)|(((# (ref0 . (~ (Track <: succs)))) > 1) <=> (ref0 in Junction)));11
this/inv2;(all ref0:(one Signal),ref1:(one Track),ref2:(one Track)|(((ref0 in (ref1 . (Track <: signals))) && (ref0 in (ref2 . (Track <: signals)))) => (ref0 != ref2)));1;(all ref0:(one Signal)|(one ref1:(one Track)|(ref0 in (ref1 . (Track <: signals)))));15
this/inv4;(all ref0:(one Entry)|(ref0 !in (Track . (^ (Track <: succs)))));1;(all ref0:(one Track)|((ref0 !in (Track . (^ (Track <: succs)))) <=> (ref0 in Entry)));6
this/inv9;(all ref0:(one Semaphore),ref1:(one Track)|(((ref1 -> ref0) in (Track <: signals)) => (ref1 in Junction)));1;(all ref0:(one Track)|((ref0 in ((Track <: signals) . Semaphore)) => (ref0 in ((Track <: succs) . Junction))));11
this/inv2;(all ref0:(one Signal),ref1:(one Track)|((ref0 in (ref1 . (Track <: signals))) => (ref0 !in ((Track . (Track <: signals)) - ref1))));1;(all ref0:(one Signal)|(one ref1:(one Track)|(ref0 in (ref1 . (Track <: signals)))));12
this/inv9;(all ref0:(one Track),ref1:(one Track)|(((ref1 in (ref0 . (Track <: succs))) && (ref1 in Junction)) => (some ((ref0 . (Track <: signals)) & Semaphore))));1;(all ref0:(one Track)|((! (some ((ref0 . (Track <: succs)) & Junction))) => (! (some ((ref0 . (Track <: signals)) & Semaphore)))));12
this/inv2;(all ref0:(one Signal),ref1:(one Track),ref2:(one Track)|(((ref0 in (ref1 . (Track <: signals))) && (ref0 in (ref2 . (Track <: signals)))) => (ref1 != ref2)));1;(all ref0:(one Signal)|(one ref1:(one Track)|(ref0 in (ref1 . (Track <: signals)))));15
this/inv2;(all ref0:(one Signal),ref1:(one Track)|((ref0 !in ((Track . (Track <: signals)) - ref1)) && (ref0 in (ref1 . (Track <: signals)))));1;(all ref0:(one Signal)|(one ref1:(one Track)|((ref0 !in ((Track - ref1) . (Track <: signals))) && (ref0 in (ref1 . (Track <: signals))))));8
this/inv5;((# (Junction . (~ (Track <: succs)))) > 1);1;(all ref0:(one Track)|(((# (ref0 . (~ (Track <: succs)))) > 1) <=> (ref0 in Junction)));7
this/inv2;(all ref0:(one Signal),ref1:(one Track)|((ref0 !in ((Track . (Track <: signals)) - (ref1 . (Track <: signals)))) && (ref0 in (ref1 . (Track <: signals)))));1;(all ref0:(one Signal)|(one ref1:(one Track)|((ref0 !in ((Track - ref1) . (Track <: signals))) && (ref0 in (ref1 . (Track <: signals))))));10
this/inv2;(all ref0:(one Signal),ref1:(one Signal),ref2:(one Track),ref3:(one Track)|(((ref0 in (ref2 . (Track <: signals))) && (ref1 in (ref3 . (Track <: signals)))) => (ref0 != ref1)));1;((all ref0:(one Signal)|(lone ((Track <: signals) . ref0))) && (Signal in (Track . (Track <: signals))));18
this/inv3;(no ((Exit & Track) . (Track <: succs)));1;(Exit = (Track - ((Track <: succs) . Track)));7
this/inv2;(all ref0:(one Signal),ref1:(one Track)|((ref0 in (ref1 . (Track <: signals))) => (ref0 !in ((Track . (Track <: signals)) - (ref1 . (Track <: signals))))));1;(all ref0:(one Signal)|(one ref1:(one Track)|(ref0 in (ref1 . (Track <: signals)))));14
this/inv9;(all ref0:(one Track)|(some ref1:(one Signal)|((((ref0 -> ref1) in (Track <: signals)) && (ref1 in Semaphore)) => (ref0 in Junction))));1;(all ref0:(one Track)|((ref0 in ((Track <: signals) . Semaphore)) => (ref0 in ((Track <: succs) . Junction))));13
this/inv5;(all ref0:(one Track)|(((# (ref0 . (~ (Track <: succs)))) > 1) => (ref0 in Junction)));1;(all ref0:(one Track)|(((# (ref0 . (~ (Track <: succs)))) > 1) <=> (ref0 in Junction)));4
this/inv3;(all ref0:(one univ)|((ref0 in Exit) => ((# (ref0 . (^ (Track <: succs)))) = 0)));1;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (^ (Track <: succs))))));10
this/inv9;(all ref0:(one Semaphore),ref1:(one Track),ref2:(one Track)|(((ref2 !in Junction) && (ref2 in (ref1 . (^ (Track <: succs))))) => (ref0 !in (ref1 . (Track <: signals)))));1;(all ref0:(one Semaphore),ref1:(one Track)|((no ((ref1 . (Track <: succs)) & Junction)) => (ref0 !in (ref1 . (Track <: signals)))));15
this/inv6;(all ref0:(one Entry)|(some ref1:(one Track)|((ref0 in ref1) => (Signal in (ref1 . (Track <: signals))))));1;(Entry in ((Track <: signals) . Speed));10
this/inv6;(all ref0:(one Entry)|(some ref1:(one Track)|((ref0 in ref1) => (Speed in (ref1 . (Track <: signals))))));1;(Entry in ((Track <: signals) . Speed));10
this/inv5;(all ref0:(one Track)|((((# (ref0 . (~ (Track <: succs)))) > 1) => (ref0 in Junction)) || (no ref0)));1;(all ref0:(one Track)|(((# (ref0 . (~ (Track <: succs)))) > 1) <=> (ref0 in Junction)));7
this/inv10;((all ref0:(one Track)|(some ref1:(one Junction),ref2:(one Semaphore)|((ref1 in (ref0 . (Track <: succs))) => (ref2 in (ref0 . (Track <: signals)))))) && (all ref3:(one Track)|((some ((ref3 . (Track <: signals)) & Semaphore)) => (some ((ref3 . (Track <: succs)) & Junction)))));1;(all ref0:(one Track)|((some ref1:(one Junction)|(ref1 in (ref0 . (Track <: succs)))) => (some ref2:(one Semaphore)|(ref2 in (ref0 . (Track <: signals))))));21
this/inv9;(all ref0:(one Track)|(one ref1:(one Signal)|((((ref0 -> ref1) in (Track <: signals)) && (ref1 in Semaphore)) => (ref0 in Junction))));1;(all ref0:(one Track)|((ref0 in ((Track <: signals) . Semaphore)) => (ref0 in ((Track <: succs) . Junction))));13
this/inv6;(all ref0:(one Entry),ref1:(one Track)|((ref0 in ref1) => (Speed in (ref1 . (Track <: signals)))));1;(Entry in ((Track <: signals) . Speed));10
this/inv1;(all ref0:(one Signal),ref1:(one Track)|((ref1 -> ref0) in (Track <: signals)));1;(some (Entry -> Exit));9
this/inv2;(all ref0:(one Signal)|(one ref1:(one Track)|(ref0 !in ((Track . (Track <: signals)) - (ref1 . (Track <: signals))))));1;(all ref0:(one Signal)|(one ref1:(one Track)|(ref0 in (ref1 . (Track <: signals)))));10
this/inv8;(all ref0:(one Entry)|(one ref1:(one Exit)|(ref1 in (ref0 . (^ (Track <: succs))))));1;(all ref0:(one Entry),ref1:(one (Exit - ref0))|(ref1 in (ref0 . (^ (Track <: succs)))));4
this/inv5;(all ref0:(one Track)|((ref0 in Junction) => (some ref1:(one Track),ref2:(one Track)|((ref1 != ref2) && (ref1 in ((Track <: succs) . ref0)) && (ref2 in ((Track <: succs) . ref0))))));1;(all ref0:(one Track)|((some ref1:(one (ref0 . (~ (Track <: succs)))),ref2:(one (ref0 . (~ (Track <: succs))))|(ref1 != ref2)) <=> (ref0 in Junction)));21
this/inv5;(all ref0:(one Track)|((ref0 in Junction) => (some ref1:(one (Track - ref0)),ref2:(one (Track - ref0))|((ref1 != ref2) && (ref1 in ((Track <: succs) . ref0)) && (ref2 in ((Track <: succs) . ref0))))));1;(all ref0:(one Track)|((some ref1:(one (ref0 . (~ (Track <: succs)))),ref2:(one (ref0 . (~ (Track <: succs))))|(ref1 != ref2)) <=> (ref0 in Junction)));21
this/inv5;(all ref0:(one Track)|(((# (Track . (Track <: succs))) > 0) <=> (ref0 in Junction)));1;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) <=> (ref0 in Junction)));4
this/inv5;(all ref0:(one univ)|((((# (ref0 . (^ (Track <: succs)))) > 1) && (ref0 in Track)) => (ref0 in Junction)));1;(all ref0:(one Track)|(((# (ref0 . (~ (Track <: succs)))) > 1) <=> (ref0 in Junction)));10
this/inv2;(all ref0:(one Track),ref1:(one Track)|(no ((ref0 . (Track <: succs)) & (ref1 . (Track <: succs)))));1;(all ref0:(one Signal)|(one ref1:(one Track)|(one (((Track <: signals) . ref0) & ref1))));10
this/inv9;(all ref0:(one Track)|(some ref1:(one Junction)|(((ref0 -> ref1) in (Track <: succs)) => (some ref2:(one Semaphore)|((ref0 -> ref2) in (Track <: signals))))));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|((ref0 -> ref1) in (Track <: succs)))) => (! (some ref2:(one Semaphore)|((ref0 -> ref2) in (Track <: signals))))));8
this/inv4;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Track)) <=> (ref0 in Entry)));1;(all ref0:(one Track)|((ref0 !in (Track . (Track <: succs))) <=> (ref0 in Entry)));4
this/inv5;(all ref0:(one univ)|((((# (ref0 . (^ (Track <: succs)))) > 1) && (ref0 in Track)) => ((ref0 !in Entry) && (ref0 !in Exit) && (ref0 in Junction))));1;(all ref0:(one Track)|(((# (ref0 . (~ (Track <: succs)))) > 1) <=> (ref0 in Junction)));17
this/inv5;(all ref0:(one Track)|((ref0 in Junction) => (some ref1:(one Track),ref2:(one Track)|((ref0 != ref1) && (ref0 != ref2) && (ref1 != ref2) && (ref1 in ((Track <: succs) . ref0)) && (ref2 in ((Track <: succs) . ref0))))));1;(all ref0:(one Track)|((some ref1:(one (ref0 . (~ (Track <: succs)))),ref2:(one (ref0 . (~ (Track <: succs))))|(ref1 != ref2)) <=> (ref0 in Junction)));27
this/inv3;(all ref0:(one Track)|(((ref0 !in Entry) && (ref0 !in Junction) && (ref0 in Exit)) => (no (ref0 . (Track <: succs)))));1;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (Track <: succs)))));15
this/inv4;(all ref0:(one Track)|((ref0 in Entry) => (ref0 !in ((Track <: succs) . Track))));1;(Entry = (Track - ((~ (Track <: succs)) . Track)));10
this/inv6;(some (Entry . (Track <: signals)));1;(Entry in ((Track <: signals) . Speed));5
this/inv2;(all ref0:(one Track)|(one (ref0 . (Track <: signals))));1;(all ref0:(one Signal)|(one (ref0 . (~ (Track <: signals)))));3
this/inv4;(no (((Track <: succs) . Track) & Entry));1;(Entry = {ref0:(one Track)|(no ((Track <: succs) . ref0))});7
this/inv3;(all ref0:(one Exit)|(one (ref0 . (Track <: succs))));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));8
this/inv3;(all ref0:(one Track)|(((none = (ref0 . (Track <: signals))) && (none = (ref0 . (Track <: succs)))) => (ref0 in Exit)));1;(all ref0:(one Track)|((none = (ref0 . (Track <: succs))) <=> (ref0 in Exit)));10
this/inv2;(all ref0:(one Track)|(one ((Track <: signals) . ref0)));1;(all ref0:(one Signal)|(one ((Track <: signals) . ref0)));2
this/inv8;(all ref0:(one Track)|((ref0 in Exit) => (all ref1:(one Track)|((ref0 in (ref1 . (^ (Track <: succs)))) && (ref1 in Entry)))));1;(all ref0:(one Track),ref1:(one Track)|(((ref0 in Exit) && (ref1 in Entry)) => (ref0 in (ref1 . (* (Track <: succs))))));14
this/inv9;(all ref0:(one Track)|((Junction in (ref0 . (Track <: succs))) => (Semaphore in (ref0 . (Track <: signals)))));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|(ref1 in (ref0 . (Track <: succs))))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));11
this/inv1;(all ref0:(one Track),ref1:(one Track),ref2:(one Track)|(((ref0 in Entry) && (ref1 in Exit)) => ((ref0 in (ref2 . (Track <: succs))) && (ref1 in (ref2 . (Track <: succs))))));1;((some ref0:(one Track)|(ref0 in Entry)) && (some ref1:(one Track)|(ref1 in Exit)));17
this/inv9;(all ref0:(one Track),ref1:(one Track)|((((ref0 -> ref1) in (Track <: succs)) && (ref0 in Junction)) => (some ref2:(one Semaphore)|((ref1 -> ref2) in (Track <: signals)))));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|((ref0 -> ref1) in (Track <: succs)))) => (! (some ref2:(one Semaphore)|((ref0 -> ref2) in (Track <: signals))))));14
this/inv1;(all ref0:(one Track)|(some (Entry & Exit)));1;(some (Entry -> Exit));3
this/inv9;(all ref0:(one Track)|(some ref1:(one Semaphore)|((Junction in (ref0 . (Track <: succs))) => (ref1 in (ref0 . (Track <: signals))))));1;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => (! (some ref1:(one Semaphore)|(ref1 in (ref0 . (Track <: signals)))))));10
this/inv8;(all ref0:(one Track)|((ref0 in Exit) => (all ref1:(one Track)|((ref1 in Entry) => (ref0 in (ref1 . (^ (Track <: succs))))))));1;(all ref0:(one Track),ref1:(one Track)|(((ref0 in Exit) && (ref1 in Entry)) => (ref0 in (ref1 . (* (Track <: succs))))));8
this/inv8;(all ref0:(one Track)|((ref0 in Entry) => (all ref1:(one Track)|((ref1 in Exit) => (ref1 in (ref0 . (Track <: succs)))))));1;(all ref0:(one Track),ref1:(one (Track - ref0))|(((ref0 in Entry) && (ref1 in Exit)) => (ref1 in (ref0 . (^ (Track <: succs))))));7
this/inv9;(all ref0:(one Track)|(some ref1:(one Semaphore)|((Junction in (ref0 . (Track <: succs))) => (ref1 !in (ref0 . (Track <: signals))))));1;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => (all ref1:(one Semaphore)|(ref1 !in (ref0 . (Track <: signals))))));9
this/inv9;(all ref0:(one Track)|(some ref1:(one Junction)|(all ref2:(one Semaphore)|(((ref0 -> ref1) !in (Track <: succs)) => ((ref0 -> ref2) !in (Track <: signals))))));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|((ref0 -> ref1) in (Track <: succs)))) => (! (some ref2:(one Semaphore)|((ref0 -> ref2) in (Track <: signals))))));12
this/inv1;((all ref0:(one Track)|(some ref1:(one Entry)|((ref1 -> ref0) in (Track <: succs)))) && (one ref2:(one Exit)|(all ref3:(one Track)|((ref2 -> ref3) !in (Track <: succs)))));1;(some (Entry -> Exit));17
this/inv9;(all ref0:(one Track)|(some ref1:(one Junction),ref2:(one Semaphore)|((ref1 in (ref0 . (Track <: succs))) => (ref2 !in (ref0 . (Track <: signals))))));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|(ref1 in (ref0 . (Track <: succs))))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));7
this/inv8;(all ref0:(one Track)|((ref0 in Entry) => (all ref1:(one Track)|((ref1 in Exit) => (ref1 in (ref0 . (^ (Track <: succs))))))));1;(all ref0:(one Track),ref1:(one (Track - ref0))|(((ref0 in Entry) && (ref1 in Exit)) => (ref1 in (ref0 . (^ (Track <: succs))))));6
this/inv4;(no (none & (Track . (Track <: succs))));1;(all ref0:(one Track)|((no (ref0 & (Track . (Track <: succs)))) <=> (ref0 in Entry)));7
this/inv8;(all ref0:(one Track),ref1:(one Track)|(((ref0 in Exit) && (ref1 in Entry)) => (ref0 in (ref1 . (^ (Track <: succs))))));1;(all ref0:(one Track),ref1:(one Track)|(((ref0 in Exit) && (ref1 in Entry)) => (ref0 in (ref1 . (* (Track <: succs))))));6
this/inv9;(all ref0:(one Track)|(some ref1:(one Junction),ref2:(one Semaphore)|((ref1 !in (ref0 . (Track <: succs))) => (ref2 !in (ref0 . (Track <: signals))))));1;(all ref0:(one Track)|((all ref1:(one Junction)|(ref1 !in (ref0 . (Track <: succs)))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));6
this/inv1;((all ref0:(one Track)|(some ref1:(one Entry)|((ref1 -> ref0) in (Track <: succs)))) && (all ref2:(one Track)|(one ref3:(one Exit)|((ref3 -> ref2) !in (Track <: succs)))));1;(some (Entry -> Exit));17
this/inv1;((all ref0:(one Track)|(some ref1:(one Entry)|((ref1 -> ref0) in (Track <: succs)))) && (all ref2:(one Track)|(one ref3:(one Exit)|((ref2 != ref3) && ((ref3 -> ref2) !in (Track <: succs))))));1;(some (Entry -> Exit));21
this/inv10;(all ref0:(one Track)|(one ref1:(one Junction)|(some ref2:(one Semaphore)|((ref1 in (ref0 . (Track <: succs))) => (ref2 in (ref0 . (Track <: signals)))))));1;(all ref0:(one Track)|((some ref1:(one Junction)|(ref1 in (ref0 . (Track <: succs)))) => (some ref2:(one Semaphore)|(ref2 in (ref0 . (Track <: signals))))));6
this/inv2;(all ref0:(one Signal)|(one ref0));1;(all ref0:(one Signal)|(one ((Track <: signals) . ref0)));4
this/inv4;(no (Track . (Track <: succs)));1;(Entry = {ref0:(one Track)|(no ((Track <: succs) . ref0))});5
this/inv9;(all ref0:(one Semaphore),ref1:(one Track),ref2:(one Track)|((ref2 !in (ref1 . (Track <: succs))) => (ref0 !in (ref1 . (Track <: signals)))));1;(all ref0:(one Semaphore),ref1:(one Track)|((no ((ref1 . (Track <: succs)) & Junction)) => (ref0 !in (ref1 . (Track <: signals)))));10
this/inv1;((all ref0:(one Track)|(some ref1:(one Entry)|((ref0 != ref1) && ((ref1 -> ref0) in (Track <: succs))))) && (all ref2:(one Track)|(one ref3:(one Exit)|((ref2 != ref3) && ((ref3 -> ref2) !in (Track <: succs))))));1;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) && (ref1 in Track)));24
this/inv9;(all ref0:(one Junction),ref1:(one Semaphore),ref2:(one Track)|((ref0 !in (ref0 & (ref2 . (Track <: succs)))) => (ref1 !in (ref2 . (Track <: signals)))));1;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));12
this/inv9;(all ref0:(one Track)|(one ref1:(one Junction)|(all ref2:(one Semaphore)|(((ref0 -> ref1) !in (Track <: succs)) => ((ref0 -> ref2) !in (Track <: signals))))));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|((ref0 -> ref1) in (Track <: succs)))) => (! (some ref2:(one Semaphore)|((ref0 -> ref2) in (Track <: signals))))));12
this/inv9;(all ref0:(one Junction),ref1:(one Semaphore),ref2:(one Track)|((no (ref0 & (ref2 . (Track <: succs)))) => (ref1 !in (ref2 . (Track <: signals)))));1;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => (all ref1:(one Semaphore)|(ref1 !in (ref0 . (Track <: signals))))));11
this/inv9;(all ref0:(one Track),ref1:(one (ref0 . (Track <: succs)))|((ref1 !in Junction) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));1;(all ref0:(one Track)|((all ref1:(one Junction)|(ref1 !in (ref0 . (Track <: succs)))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));10
this/inv2;(all ref0:(one Track)|(one ref1:(one Signal)|(ref1 in (ref0 . (Track <: signals)))));1;(all ref0:(one Signal)|(one ref1:(one Track)|((ref1 -> ref0) in (Track <: signals))));6
this/inv3;(one ref0:(one Track)|(all ref1:(one Track)|(((ref0 -> ref1) !in (Track <: succs)) => (ref0 in Entry))));1;(all ref0:(one Track)|((all ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))) <=> (ref0 in Exit)));8
this/inv5;(all ref0:(one Track)|(((ref0 !in ((Track <: succs) . ref0)) && (some ((Track <: succs) . ref0))) <=> (ref0 in Junction)));1;(all ref0:(one Track)|(((! (one ((Track <: succs) . ref0))) && (some ((Track <: succs) . ref0))) <=> (ref0 in Junction)));6
this/inv9;(all ref0:(one Junction),ref1:(one Track)|((((ref1 . (Track <: succs)) . (integer/next[])) !in Junction) => (((ref1 . (Track <: signals)) . (integer/next[])) !in Semaphore)));1;(all ref0:(one Semaphore),ref1:(one Track)|((no ((ref1 . (Track <: succs)) & Junction)) => (ref0 !in (ref1 . (Track <: signals)))));13
this/inv3;(one ref0:(one Track)|(all ref1:(one Track)|(((ref0 -> ref1) !in (Track <: succs)) => (ref0 in Exit))));1;(all ref0:(one Track)|((all ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))) <=> (ref0 in Exit)));6
this/inv9;(all ref0:(one Track),ref1:(one (ref0 . (Track <: succs)))|((ref1 !in Junction) => (all ref2:(one (ref0 . (Track <: signals)))|(ref2 !in Semaphore))));1;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));12
this/inv9;(all ref0:(one Track)|(one ref1:(one Junction),ref2:(one Semaphore)|(((ref0 -> ref1) !in (Track <: succs)) => ((ref0 -> ref2) !in (Track <: signals)))));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|((ref0 -> ref1) in (Track <: succs)))) => (! (some ref2:(one Semaphore)|((ref0 -> ref2) in (Track <: signals))))));12
this/inv3;(all ref0:(one univ)|(((no (ref0 . (^ (Track <: succs)))) && (ref0 in Track)) => ((ref0 !in Entry) && (ref0 !in Junction) && (ref0 in Exit))));1;(all ref0:(one Track)|((no (ref0 . (^ (Track <: succs)))) <=> (ref0 in Exit)));15
this/inv5;(all ref0:(one Track)|(((ref0 !in ((^ (Track <: succs)) . ref0)) && (some ((Track <: succs) . ref0))) <=> (ref0 in Junction)));1;(all ref0:(one Track)|(((! (one ((Track <: succs) . ref0))) && (some ((Track <: succs) . ref0))) <=> (ref0 in Junction)));7
this/inv3;(some ref0:(one Track)|(all ref1:(one Track)|(((ref0 -> ref1) !in (Track <: succs)) => (ref0 in Exit))));1;(all ref0:(one Track)|((all ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))) <=> (ref0 in Exit)));6
this/inv8;(all ref0:(one Exit)|(ref0 in (Entry . (Track <: succs))));1;((Entry -> Exit) in (* (Track <: succs)));6
this/inv9;(all ref0:(one Track)|(some ref1:(one Junction),ref2:(one Semaphore)|(((ref0 -> ref1) !in (Track <: succs)) => ((ref0 -> ref2) !in (Track <: signals)))));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|((ref0 -> ref1) in (Track <: succs)))) => (! (some ref2:(one Semaphore)|((ref0 -> ref2) in (Track <: signals))))));12
this/inv6;((Track <: signals) in (Entry one->some Signal));1;(Entry in ((Track <: signals) . Speed));6
this/inv10;(all ref0:(one Semaphore),ref1:(one Track)|((Junction in ((Track <: succs) . ref1)) => (ref0 in (ref1 . (Track <: signals)))));1;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (ref0 in ((Track <: signals) . Semaphore))));9
this/inv1;((no (Entry & Exit)) && (one Exit) && (some Entry));1;((some Entry) && (some Exit));8
this/inv6;((Track <: signals) in (Entry one->one Signal));1;(Entry in ((Track <: signals) . Speed));6
this/inv3;(all ref0:(one univ)|((ref0 in Exit) => ((some ref1:(one Junction)|(ref0 in (ref1 . (Track <: succs)))) && (no (ref0 . (Track <: succs))))));1;((all ref0:(one (Track - Exit))|(some (ref0 . (Track <: succs)))) && (no (Exit . (Track <: succs))));14
this/inv1;(one ref0:(one Track),ref1:(one Track)|((ref0 in Entry) && (ref1 in Exit)));1;((some ref0:(one Track)|(ref0 in Entry)) && (some ref1:(one Track)|(ref1 in Exit)));4
this/inv6;(all ref0:(one (Entry & Track))|(some ref1:(one Speed)|(ref0 in (ref0 . (Track <: signals)))));1;(all ref0:(one Entry)|(some ref1:(one Speed)|(ref1 in (ref0 . (Track <: signals)))));6
this/inv6;(all ref0:(one Entry)|(one ref1:(one Speed)|((ref0 -> ref1) in (Track <: signals))));1;(all ref0:(one Entry)|(some ref1:(one Speed)|((ref0 -> ref1) in (Track <: signals))));4
this/inv3;(all ref0:(one Exit)|(no (Track . (Track <: succs))));1;(Exit = (Track - (Track . (~ (Track <: succs)))));7
this/inv10;(all ref0:(one Semaphore),ref1:(one Track)|((ref1 in ((Track <: succs) . Junction)) => (ref0 in (ref1 . (Track <: signals)))));1;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (ref0 in ((Track <: signals) . Semaphore))));7
this/inv1;(one ref0:(one Track),ref1:(one Track)|((ref0 = Entry) && (ref1 = Junction)));1;((some ref0:(one Track)|(ref0 in Entry)) && (some ref1:(one Track)|(ref1 in Exit)));10
this/inv1;((one Exit) || (some Entry));1;(some (Entry -> Exit));5
this/inv9;(all ref0:(one Track)|(((ref0 . (Track <: succs)) !in Junction) => (all ref1:(one (ref0 . (Track <: signals)))|(ref1 !in Semaphore))));1;(all ref0:(one Track),ref1:(one (ref0 . (Track <: signals)))|((no ((ref0 . (Track <: succs)) & Junction)) => (ref1 !in Semaphore)));7
this/inv6;((Track <: signals) in (Entry ->one Signal));1;(Entry in ((Track <: signals) . Speed));6
this/inv9;(all ref0:(one Track)|(((none != (ref0 . (Track <: succs))) && ((ref0 . (Track <: succs)) !in Junction)) => ((ref0 . (Track <: signals)) !in Semaphore)));1;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));12
this/inv10;(all ref0:(one Track)|(some ref1:(one Semaphore)|((ref0 in ((Track <: succs) . Junction)) => (ref1 in (ref0 . (Track <: signals))))));1;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (ref0 in ((Track <: signals) . Semaphore))));7
this/inv1;(some ref0:(one Track)|(one ref1:(one Track)|((ref0 !in Exit) && (ref0 in Entry) && (ref1 !in Entry) && (ref1 in Exit))));1;((some ref0:(one Track)|(ref0 in Entry)) && (some ref1:(one Track)|(ref1 in Exit)));10
this/inv3;(all ref0:(one univ)|((ref0 in Exit) => ((some ref1:(one Track)|(ref0 in (ref1 . (Track <: succs)))) && (no (ref0 . (Track <: succs))))));1;((all ref0:(one (Track - Exit))|(some (ref0 . (Track <: succs)))) && (no (Exit . (Track <: succs))));14
this/inv9;(all ref0:(one Semaphore),ref1:(one Track)|(some ref2:(one Junction)|((ref0 in (ref1 . (Track <: signals))) => (ref2 in (ref1 . (^ (Track <: succs)))))));1;(all ref0:(one Track)|((ref0 in ((Track <: signals) . Semaphore)) => (ref0 in ((Track <: succs) . Junction))));11
this/inv6;(all ref0:(one Entry)|(some ref1:(one Speed)|(ref0 in (ref0 . (Track <: signals)))));1;(all ref0:(one Entry)|(some ref1:(one Speed)|(ref1 in (ref0 . (Track <: signals)))));6
this/inv10;(all ref0:(one Junction)|(one ref1:(one Semaphore)|(ref1 in (ref0 . (Track <: signals)))));1;(all ref0:(one ((Track <: succs) . Junction))|(some ((ref0 . (Track <: signals)) & Semaphore)));8
this/inv1;((one Entry) && (one Junction));1;((some Entry) && (some Exit));6
this/inv1;(all ref0:(one Junction)|(some ref1:(one Entry),ref2:(one Exit)|((ref0 != ref1) && (ref0 != ref2) && ((ref0 -> ref2) in (Track <: succs)) && ((ref1 -> ref0) in (Track <: succs)))));1;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) && (ref1 in Track)));19
this/inv10;(all ref0:(one Track)|(some ref1:(one Junction)|((ref1 in (ref0 . (Track <: succs))) => (one ref2:(one Semaphore)|(ref2 in (ref0 . (Track <: signals)))))));1;(all ref0:(one Track)|((some ref1:(one Junction)|(ref1 in (ref0 . (Track <: succs)))) => (some ref2:(one Semaphore)|(ref2 in (ref0 . (Track <: signals))))));6
this/inv9;(all ref0:(one Semaphore),ref1:(one Track)|(some ref2:(one Junction)|((ref2 !in (ref1 . (^ (Track <: succs)))) => (ref0 !in (ref1 . (Track <: signals))))));1;(all ref0:(one Semaphore),ref1:(one Track)|((no ((ref1 . (Track <: succs)) & Junction)) => (ref0 !in (ref1 . (Track <: signals)))));11
this/inv3;(all ref0:(one univ)|((ref0 in Exit) => ((some ref1:(one Track)|((ref1 -> ref0) in (Track <: succs))) && (no (ref0 . (Track <: succs))))));1;((all ref0:(one (Track - Exit))|(some (ref0 . (Track <: succs)))) && (no (Exit . (Track <: succs))));14
this/inv6;(all ref0:(one (Track - Entry))|(some ref1:(one Speed)|(ref1 in (ref0 . (Track <: signals)))));1;(all ref0:(one Entry)|(some ref1:(one Speed)|(ref1 in (ref0 . (Track <: signals)))));4
this/inv10;(all ref0:(one Junction),ref1:(one Track)|((ref0 in (ref1 . (Track <: succs))) => (one ref2:(one Semaphore)|(ref2 in (ref1 . (Track <: signals))))));1;(all ref0:(one Junction),ref1:(one Track)|(some ref2:(one Semaphore)|((ref0 in (ref1 . (Track <: succs))) => (ref2 in (ref1 . (Track <: signals))))));6
this/inv3;(all ref0:(one univ)|((ref0 in Track) => (no (ref0 . (Track <: succs)))));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));10
this/inv1;(all ref0:(one Junction)|(some ref1:(one Entry),ref2:(one Exit)|(((ref0 != ref1) && (ref0 != ref2)) => (((ref0 -> ref2) in (Track <: succs)) && ((ref1 -> ref0) in (Track <: succs))))));1;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) && (ref1 in Track)));21
this/inv6;(all ref0:(one Track)|(some ref1:(one Signal)|(ref1 in (ref0 . (Track <: signals)))));1;(all ref0:(one Entry)|(some ref1:(one Speed)|(ref1 in (ref0 . (Track <: signals)))));4
this/inv9;(all ref0:(one Junction),ref1:(one Track)|(((ref1 -> ref0) !in (Track <: succs)) => (some ref2:(one Semaphore)|((ref1 -> ref2) !in (Track <: signals)))));1;(all ref0:(one Track)|((all ref1:(one Junction)|(ref1 !in (ref0 . (Track <: succs)))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));12
this/inv8;(no Exit);1;((Entry -> Exit) in (* (Track <: succs)));6
this/inv1;(all ref0:(one Track)|(some ref1:(one Entry),ref2:(one Junction)|((ref0 = ref1) || (ref0 = ref2))));1;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) || (ref1 in Track)));13
this/inv9;(all ref0:(one Track)|(((ref0 . (* (Track <: succs))) !in Junction) => ((ref0 . (* (Track <: signals))) !in Semaphore)));1;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));8
this/inv9;(all ref0:(one Junction),ref1:(one Semaphore),ref2:(one Track)|(((ref0 !in (ref2 . (^ (Track <: succs)))) && (ref2 !in Exit)) => (ref1 !in (ref2 . (Track <: signals)))));1;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));15
this/inv6;(all ref0:(one Track)|(Speed in (ref0 . (Track <: signals))));1;(all ref0:(one Entry)|(some ref1:(one Speed)|(ref1 in (ref0 . (Track <: signals)))));5
this/inv6;(all ref0:(one Track)|(one ref1:(one Signal)|(ref1 in (ref0 . (Track <: signals)))));1;(all ref0:(one Entry)|(some ref1:(one Speed)|(ref1 in (ref0 . (Track <: signals)))));4
this/inv3;(all ref0:(one Exit)|((ref0 in Track) => ((# (ref0 . (Track <: succs))) = 0)));1;(all ref0:(one Track)|(((# (ref0 . (Track <: succs))) = 0) <=> (ref0 in Exit)));10
this/inv9;(all ref0:(one Track)|(((ref0 . (Track <: succs)) !in Junction) => ((ref0 . (* (Track <: signals))) !in Semaphore)));1;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));7
this/inv1;(all ref0:(one Track)|(some ref1:(one Entry),ref2:(one Exit)|((ref0 = ref1) || (ref0 = ref2))));1;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) || (ref1 in Track)));13
this/inv8;(all ref0:(one Track)|((ref0 in (Entry . (^ (Track <: succs)))) <=> (ref0 in Exit)));1;(all ref0:(one Entry)|(Exit in (ref0 + (ref0 . (^ (Track <: succs))))));10
this/inv1;(all ref0:(one Junction)|((ref0 in Track) => (some ref1:(one Entry),ref2:(one Exit)|(((ref0 -> ref2) in (Track <: succs)) && ((ref1 -> ref0) in (Track <: succs))))));1;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) && (ref1 in Track)));17
this/inv9;(all ref0:(one Track)|(some ref1:(one Junction)|(((ref0 -> ref1) !in (Track <: succs)) => (all ref2:(one Semaphore)|((ref0 -> ref2) !in (Track <: signals))))));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|((ref0 -> ref1) in (Track <: succs)))) => (! (some ref2:(one Semaphore)|((ref0 -> ref2) in (Track <: signals))))));12
this/inv8;(all ref0:(one Track)|((ref0 in Entry) => ((ref0 . (Track <: succs)) in Exit)));1;(all ref0:(one Track)|((some (ref0 & Entry)) => (Exit in (ref0 . (* (Track <: succs))))));8
this/inv9;(all ref0:(one Track)|((((ref0 . (Track <: signals)) !in Semaphore) => ((ref0 . (Track <: succs)) !in Junction)) && (((ref0 . (Track <: succs)) !in Junction) => ((ref0 . (Track <: signals)) !in Semaphore))));1;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));18
this/inv6;(all ref0:(one Track)|(some ref1:(one Signal)|((ref1 in (ref0 . (Track <: signals))) && (ref1 in Speed))));1;(all ref0:(one Entry)|(some ref1:(one Signal)|((ref1 in (ref0 . (Track <: signals))) && (ref1 in Speed))));4
this/inv1;(all ref0:(one Junction)|((ref0 in Track) => (some ref1:(one Entry),ref2:(one Exit)|(((ref0 != ref1) && (ref0 != ref2)) => (((ref0 -> ref2) in (Track <: succs)) && ((ref1 -> ref0) in (Track <: succs)))))));1;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) && (ref1 in Track)));25
this/inv9;(all ref0:(one Track),ref1:(one (Track - Junction))|((ref1 in (ref0 . (Track <: succs))) => (no ref2:(one Semaphore)|(ref2 in (ref0 . (Track <: signals))))));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|(ref1 in (ref0 . (Track <: succs))))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));9
this/inv8;(Exit in (Entry + (Entry . (^ (Track <: succs)))));1;(all ref0:(one Entry)|(Exit in (ref0 + (ref0 . (^ (Track <: succs))))));5
this/inv8;(all ref0:(one Track)|((ref0 in Entry) => (Exit in (ref0 . (Track <: succs)))));1;(all ref0:(one Track)|((some (ref0 & Entry)) => (Exit in (ref0 . (* (Track <: succs))))));6
this/inv5;((all ref0:(one Track)|(some ref1:(one Track),ref2:(one Track)|((((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs)))) => (ref0 in Junction)) && disj[ref1,ref2]))) && (all ref3:(one Junction)|((# ((Track <: succs) . ref3)) > 1)));1;((all ref0:(one Track),ref1:(one Track),ref2:(one Track)|((! disj[ref1,ref2]) || (((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs)))) => (ref0 in Junction)))) && (all ref3:(one Junction)|((# ((Track <: succs) . ref3)) > 1)));17
this/inv8;(all ref0:(one Track)|((Entry in ref0) => (Exit in (ref0 . (Track <: succs)))));1;(all ref0:(one Entry)|(Exit in (ref0 . (* (Track <: succs)))));7
this/inv4;(((Track <: succs) . Track) = Entry);1;(Entry = (Track - ((~ (Track <: succs)) . Track)));5
this/inv3;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (Exit in ref0)));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));4
this/inv4;(all ref0:(one Track)|((ref0 in Entry) => (all ref1:(one Track)|((ref0 != ref1) => ((ref1 -> ref0) !in (Track <: succs))))));1;(all ref0:(one Track)|((all ref1:(one Track)|((ref1 -> ref0) !in (Track <: succs))) <=> (ref0 in Entry)));16
this/inv6;(all ref0:(one Entry)|(one ref1:(one Signal)|((ref1 in (ref0 . (Track <: signals))) && (ref1 in Speed))));1;(all ref0:(one Entry)|(some ref1:(one Signal)|((ref1 in (ref0 . (Track <: signals))) && (ref1 in Speed))));4
this/inv5;(all ref0:(one Track)|((ref0 in Junction) <=> (some ((ref0 . (Track <: succs)) . (Track <: succs)))));1;(all ref0:(one Track)|((some ref1:(one (ref0 . (~ (Track <: succs)))),ref2:(one (ref0 . (~ (Track <: succs))))|(ref1 != ref2)) <=> (ref0 in Junction)));13
this/inv2;(one (Track . (Track <: signals)));1;(all ref0:(one Signal)|(one ((Track <: signals) . ref0)));3
this/inv4;(all ref0:(one Track)|((ref0 in Entry) => (all ref1:(one Track)|((ref0 != ref1) && ((ref1 -> ref0) !in (Track <: succs))))));1;(all ref0:(one Track)|((all ref1:(one Track)|((ref1 -> ref0) !in (Track <: succs))) <=> (ref0 in Entry)));16
this/inv1;((some ref0:(one Track),ref1:(one Track)|(((ref0 -> ref1) !in (Track <: succs)) => (ref0 in Exit))) && (some ref2:(one Track),ref3:(one Track)|(((ref2 -> ref3) in (Track <: succs)) => (ref2 in Exit))));1;((some ref0:(one Track)|(ref0 in Entry)) && (some ref1:(one Track)|(ref1 in Exit)));22
this/inv2;(all ref0:(one Signal),ref1:(one Track)|((ref0 in (ref1 . (Track <: signals))) => (ref0 !in ((ref1 . (Track <: succs)) . (Track <: signals)))));1;(all ref0:(one Signal)|(one ref1:(one Track)|(ref0 in (ref1 . (Track <: signals)))));12
this/inv4;((no ((Track <: succs) . Entry)) && (some (Entry . (Track <: succs))));1;((all ref0:(one (Track - Entry))|(some ((Track <: succs) . ref0))) && (no ((Track <: succs) . Entry)));9
this/inv8;(all ref0:(one Entry),ref1:(one Exit)|((ref1 in (ref0 . (Track <: succs))) || (ref1 in (ref0 . (^ (Track <: succs))))));1;(all ref0:(one Entry),ref1:(one Exit)|((ref0 = ref1) || (ref1 in (ref0 . (^ (Track <: succs))))));10
this/inv9;(all ref0:(one Junction),ref1:(one Track)|((ref0 !in (ref1 . (Track <: succs))) => (no ((Track <: signals) . Semaphore))));1;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));8
this/inv1;(some ref0:(one Track),ref1:(one Track)|(((ref0 -> ref1) !in (Track <: succs)) => ((((ref0 -> ref1) in (Track <: succs)) && (ref0 in Exit)) => (ref0 in Exit))));1;(some ref0:(one Track)|((some ref1:(one Track)|(ref1 in Exit)) && (ref0 in Entry)));20
this/inv3;(all ref0:(one Exit)|(no (Track <: succs)));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));8
this/inv8;(all ref0:(one Entry),ref1:(one Exit)|(ref1 in (ref0 . (~ (Track <: succs)))));1;(all ref0:(one Entry),ref1:(one Exit)|(ref1 in (ref0 . (* (Track <: succs)))));6
this/inv2;(all ref0:(one Signal),ref1:(one Track)|((ref0 in (ref1 . (Track <: signals))) => (ref0 !in ((ref1 . (^ (Track <: succs))) . (Track <: signals)))));1;(all ref0:(one Signal)|(one ref1:(one Track)|(ref0 in (ref1 . (Track <: signals)))));13
this/inv9;(all ref0:(one Track),ref1:(one Track)|(((ref1 !in Junction) && (ref1 in (ref0 . (Track <: succs)))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|(ref1 in (ref0 . (Track <: succs))))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));11
this/inv1;(some ref0:(one Track),ref1:(one Track)|((((ref0 -> ref1) !in (Track <: succs)) => (ref0 in Exit)) || (((ref0 -> ref1) in (Track <: succs)) => (ref0 in Exit))));1;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) || (ref1 in Track)));20
this/inv5;(all ref0:(one Track)|((ref0 in Junction) <=> (some (((^ (Track <: succs)) . (Track <: succs)) . ref0))));1;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});12
this/inv2;(all ref0:(one Signal),ref1:(one Track)|((ref0 in (ref1 . (Track <: signals))) => (ref0 !in ((ref1 . (* (Track <: succs))) . (Track <: signals)))));1;(all ref0:(one Signal)|(one ref1:(one Track)|(ref0 in (ref1 . (Track <: signals)))));13
this/inv8;(all ref0:(one Entry)|(Exit !in (ref0 . (* (Track <: succs)))));1;(all ref0:(one Entry)|(Exit in (ref0 . (* (Track <: succs)))));4
this/inv1;(((Track <: succs) in (Track ->some Entry)) && ((Track <: succs) in (Track ->some Exit)));1;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) && (ref1 in Track)));10
this/inv9;(all ref0:(one Track),ref1:(one Track)|(((ref1 !in Junction) && (ref1 in (ref0 . (^ (Track <: succs))))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|(ref1 in (ref0 . (Track <: succs))))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));12
this/inv4;(Entry = (Track - ((^ (Track <: succs)) . Track)));1;(Entry = (Track - ((~ (Track <: succs)) . Track)));2
this/inv5;(! (some ref0:(one Junction)|(lone ((Track <: succs) . ref0))));1;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});4
this/inv3;(all ref0:(one Track)|(some ref1:(one Track)|(((ref0 -> ref1) in (Track <: succs)) => (ref0 !in Exit))));1;(all ref0:(one Track)|((all ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))) <=> (ref0 in Exit)));10
this/inv2;(some ref0:(one Signal)|(one ref1:(one Track)|((ref1 -> ref0) in (Track <: signals))));1;(all ref0:(one Signal)|(one ref1:(one Track)|((ref1 -> ref0) in (Track <: signals))));4
this/inv4;(all ref0:(one Entry)|((# (ref0 . (integer/prev[]))) = 0));1;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) = 0) <=> (ref0 in Entry)));8
this/inv4;(all ref0:(one Entry),ref1:(one (Track - Entry))|(ref0 !in (ref1 . (Track <: succs))));1;(all ref0:(one Track)|((all ref1:(one Track)|(ref0 !in (ref1 . (Track <: succs)))) <=> (ref0 in Entry)));8
this/inv4;(Entry = (Track - ((Track <: succs) . Entry)));1;(Entry = (Track - (Track . (Track <: succs))));2
this/inv1;(((Track <: signals) in (Track ->some Signal)) && ((Track <: succs) in (Track ->some Entry)) && ((Track <: succs) in (Track ->some Exit)));1;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) && (ref1 in Track)));15
this/inv3;(all ref0:(one univ)|((((no (ref0 . (Track <: succs))) && (ref0 in Track)) => (ref0 in Exit)) || (ref0 in Entry)));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));12
this/inv9;(all ref0:(one Track)|((Junction !in (ref0 . (Track <: succs))) => (Semaphore !in ((ref0 + Exit) . (Track <: signals)))));1;(all ref0:(one Track)|((all ref1:(one Junction)|(ref1 !in (ref0 . (Track <: succs)))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));10
this/inv9;(all ref0:(one Semaphore),ref1:(one Track)|(((ref1 . (Track <: succs)) !in Junction) => (ref0 !in ref1)));1;(all ref0:(one Semaphore),ref1:(one Track)|((no ((ref1 . (Track <: succs)) & Junction)) => (ref0 !in (ref1 . (Track <: signals)))));9
this/inv5;(all ref0:(one Junction)|(some ref1:(one (Track - ref0)),ref2:(one (Track - ref0))|((ref1 != ref2) && ((ref1 -> ref0) in (Track <: succs)) && ((ref2 -> ref0) in (Track <: succs)))));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref1 != ref2) && ((ref1 -> ref0) in (Track <: succs)) && ((ref2 -> ref0) in (Track <: succs)))) <=> (ref0 in Junction)));10
this/inv5;((all ref0:(one Track)|((ref0 in Junction) <=> (some (((^ (Track <: succs)) . (Track <: succs)) . ref0)))) && (all ref1:(one Junction)|((ref1 in Junction) <=> (some ((Track <: succs) . ref1)))));1;(all ref0:(one Track)|((! (lone ((Track <: succs) . ref0))) <=> (ref0 in Junction)));22
this/inv1;(all ref0:(one Track)|(((ref0 . (^ (Track <: succs))) = Entry) || ((ref0 . (^ (Track <: succs))) = Exit)));1;(some (Entry -> Exit));14
this/inv8;((all ref0:(one Entry),ref1:(one Exit)|(ref1 in (ref0 . (^ (Track <: succs))))) && (no (Entry & Exit)));1;(all ref0:(one Entry),ref1:(one (Exit - ref0))|(ref1 in (ref0 . (^ (Track <: succs)))));9
this/inv3;(all ref0:(one univ)|(((no (ref0 . (Track <: succs))) && (ref0 in Track)) => ((ref0 in Entry) && (ref0 in Exit))));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));12
this/inv1;(all ref0:(one Track)|(some ref1:(one Entry)|(ref1 in (ref0 . (* (Track <: succs))))));1;(some ref0:(one Entry),ref1:(one Exit)|((ref0 + ref1) in Track));11
this/inv1;(all ref0:(one Track)|(some ref1:(one Entry)|(one ref2:(one Exit)|(((ref0 -> ref2) in (Track <: succs)) && ((ref1 -> ref0) in (Track <: succs))))));1;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) && (ref1 in Track)));13
this/inv5;((# ((~ (Track <: succs)) . Junction)) > 1);1;(all ref0:(one Track)|(((# (ref0 . (~ (Track <: succs)))) > 1) <=> (ref0 in Junction)));7
this/inv2;(all ref0:(one Signal),ref1:(one Signal),ref2:(one (ref0 . (Track <: signals)))|((ref2 in (ref1 . (Track <: signals))) => (ref0 = ref1)));1;(all ref0:(one Signal)|(one ref1:(one Track)|(ref0 in (ref1 . (Track <: signals)))));11
this/inv5;(all ref0:(one Junction)|(some ref1:(one Track),ref2:(one Track)|((ref1 != ref2) && ((ref1 -> ref0) in (Track <: succs)) && ((ref2 -> ref0) in (Track <: succs)))));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref1 != ref2) && ((ref1 -> ref0) in (Track <: succs)) && ((ref2 -> ref0) in (Track <: succs)))) <=> (ref0 in Junction)));10
this/inv4;(all ref0:(one Track)|((ref0 in Entry) <=> (some (ref0 . (Track <: succs)))));1;(Entry = (Track - {ref0:(one Track)|(some ((Track <: succs) . ref0))}));10
this/inv3;(some ref0:(one Track),ref1:(one Track)|(((ref0 -> ref1) !in (Track <: succs)) => (ref0 in Exit)));1;(all ref0:(one Track)|((all ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))) <=> (ref0 in Exit)));6
this/inv9;(all ref0:(one Track)|((Junction !in (ref0 . (Track <: succs))) => ((Semaphore !in (ref0 . (Track <: signals))) && (Semaphore !in Exit))));1;(all ref0:(one Track)|((all ref1:(one Junction)|(ref1 !in (ref0 . (Track <: succs)))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));12
this/inv3;(all ref0:(one univ)|(((no (ref0 . (Track <: succs))) && (ref0 in Track)) => ((ref0 in Entry) && (ref0 in Exit) && (ref0 in Junction))));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));15
this/inv1;(all ref0:(one (Track . (^ (Track <: succs))))|((Entry in ref0) || (Exit in ref0)));1;(some (Entry -> Exit));8
this/inv3;(all ref0:(one Exit)|(no (ref0 . (integer/next[]))));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));8
this/inv5;(all ref0:(one Junction)|(some ref1:(one Track),ref2:(one Track)|((ref0 != ref1) && (ref0 != ref2) && (ref1 != ref2) && ((ref1 -> ref0) in (Track <: succs)) && ((ref2 -> ref0) in (Track <: succs)))));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref1 != ref2) && ((ref1 -> ref0) in (Track <: succs)) && ((ref2 -> ref0) in (Track <: succs)))) <=> (ref0 in Junction)));16
this/inv5;(((# ((~ (Track <: succs)) . Track)) > 1) => (Track in Junction));1;(all ref0:(one Track)|(((# (ref0 . (~ (Track <: succs)))) > 1) <=> (ref0 in Junction)));7
this/inv1;(all ref0:(one Track)|(some ref1:(one Entry)|(ref1 in ref0)));1;(some ref0:(one Entry),ref1:(one Exit)|((ref0 + ref1) in Track));8
this/inv3;(all ref0:(one Exit)|(no ((ref0 . (Track <: succs)) . (integer/next[]))));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));8
this/inv1;(all ref0:(one (Track . (^ (Track <: succs))))|((Entry in ref0) && (Exit in ref0)));1;((some ref0:(one Track)|(ref0 in Entry)) && (some ref1:(one Track)|(ref1 in Exit)));7
this/inv1;((all ref0:(one Track)|(some ref1:(one Entry),ref2:(one Exit)|((ref1 + ref2) in (ref0 . (* (Track <: succs)))))) && (all ref3:(one Track)|(some ref4:(one Signal)|(ref4 in ref3))));1;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) && (ref1 in Track)));18
this/inv3;(all ref0:(one Track)|((ref0 = Exit) => (no (Track <: succs))));1;(Exit = (Track - ((Track <: succs) . Track)));10
this/inv5;(((# ((~ (Track <: succs)) . Track)) > 2) => (Track in Junction));1;(all ref0:(one Track)|(((# (ref0 . (~ (Track <: succs)))) > 1) <=> (ref0 in Junction)));7
this/inv9;(all ref0:(one Track)|((no ((ref0 . (^ (Track <: succs))) & Junction)) => (no ((ref0 . (^ (Track <: signals))) & Semaphore))));1;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => (no ((ref0 . (Track <: signals)) & Semaphore))));4
this/inv8;(all ref0:(one Entry),ref1:(one Exit)|(some ref2:(one Track)|((ref1 in (ref2 . (Track <: succs))) && (ref2 in (ref0 . (Track <: succs))))));1;(all ref0:(one Entry)|(Exit in (ref0 . (* (Track <: succs)))));13
this/inv1;((all ref0:(one Track)|(some ref1:(one Entry),ref2:(one Exit)|((ref1 + ref2) in (ref0 . (* (Track <: succs)))))) && (all ref3:(one Track)|(some ref4:(one Signal)|((ref3 -> ref4) in (Track <: signals)))));1;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) && (ref1 in Track)));20
this/inv5;(all ref0:(one Track)|((some ref1:(one (Track - ref0)),ref2:(one (Track - ref0))|(((ref1 -> ref0) in (Track <: succs)) && ((ref2 -> ref0) in (Track <: succs)))) <=> (ref0 in Junction)));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref1 != ref2) && ((ref1 -> ref0) in (Track <: succs)) && ((ref2 -> ref0) in (Track <: succs)))) <=> (ref0 in Junction)));9
this/inv10;(all ref0:(one Track)|(some ref1:(one Semaphore)|((some ((ref0 . (Track <: succs)) & Junction)) => (ref1 in (ref0 . (Track <: signals))))));1;(all ref0:(one Track)|((some ((ref0 . (Track <: succs)) & Junction)) => (some ((ref0 . (Track <: signals)) & Semaphore))));8
this/inv1;((one ref0:(one Track)|(ref0 in Entry)) && (one ref1:(one Track)|(ref1 in Exit)));1;((some ref0:(one Track)|(ref0 in Entry)) && (some ref1:(one Track)|(ref1 in Exit)));4
this/inv3;(all ref0:(one Track),ref1:(one (Track - ref0))|(((ref0 -> ref1) !in (Track <: succs)) => (ref1 in Exit)));1;(all ref0:(one Track)|((all ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))) <=> (ref0 in Exit)));8
this/inv5;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|(((ref1 -> ref0) in (Track <: succs)) && ((ref2 -> ref0) in (Track <: succs)))) <=> (ref0 in Junction)));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref1 != ref2) && ((ref1 -> ref0) in (Track <: succs)) && ((ref2 -> ref0) in (Track <: succs)))) <=> (ref0 in Junction)));9
this/inv3;(all ref0:(one univ)|(((no (ref0 . (^ (Track <: succs)))) && (ref0 in Track)) => ((ref0 !in (ref0 . (^ (Track <: succs)))) && (ref0 in Exit))));1;(all ref0:(one Track)|((no (ref0 . (^ (Track <: succs)))) <=> (ref0 in Exit)));15
this/inv8;(all ref0:(one Entry),ref1:(one Exit)|(some ref2:(one Track)|((ref1 in (ref2 . (^ (Track <: succs)))) && (ref2 in (ref0 . (Track <: succs))))));1;(all ref0:(one Entry),ref1:(one (Exit - ref0))|(ref1 in (ref0 . (^ (Track <: succs)))));13
this/inv1;(all ref0:(one (Track . (* (Track <: succs))))|((ref0 = Entry) || (Exit in ref0)));1;(some (Entry -> Exit));8
this/inv1;(some ref0:(one Entry),ref1:(one Exit),ref2:(one Track)|((ref0 in (ref2 . (Track <: succs))) && (ref1 in (ref2 . (Track <: succs)))));1;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) && (ref1 in Track)));13
this/inv1;((one ref0:(one Track)|((ref0 in Entry) && (ref0 in Track))) && (one ref1:(one Track)|((ref1 in Exit) && (ref1 in Track))));1;((some ref0:(one Track)|((ref0 in Entry) && (ref0 in Track))) && (some ref1:(one Track)|((ref1 in Exit) && (ref1 in Track))));4
this/inv1;(all ref0:(one Track)|(((ref0 . (Track <: succs)) in Entry) && ((ref0 . (Track <: succs)) in Exit)));1;((some ref0:(one Track)|(ref0 in Entry)) && (some ref1:(one Track)|(ref1 in Exit)));9
this/inv8;(all ref0:(one Entry),ref1:(one Exit)|(some ref2:(one Track)|((ref1 in (ref2 . (^ (Track <: succs)))) && (ref2 in (ref0 . (^ (Track <: succs)))))));1;(all ref0:(one Entry),ref1:(one (Exit - ref0))|(ref1 in (ref0 . (^ (Track <: succs)))));14
this/inv3;(all ref0:(one Exit)|(Track !in (ref0 . (Track <: succs))));1;(Exit = (Track - ((Track <: succs) . Track)));7
this/inv6;((Track <: signals) in (Entry one-> Speed));1;(Entry in ((Track <: signals) . Speed));4
this/inv1;(all ref0:(one (Track . (* (Track <: succs))))|((ref0 = Entry) || (ref0 = Exit)));1;(some (Entry -> Exit));8
this/inv1;(all ref0:(one Track)|(some ref1:(one Entry),ref2:(one Exit)|((ref0 in Entry) && (ref0 in Exit))));1;((some ref0:(one Track)|(ref0 in Entry)) && (some ref1:(one Track)|(ref1 in Exit)));7
this/inv8;(all ref0:(one Entry),ref1:(one Exit)|(some ref2:(one Track)|((ref1 in (ref2 . (Track <: succs))) && (ref2 in (ref0 . (^ (Track <: succs)))))));1;(all ref0:(one Entry),ref1:(one (Exit - ref0))|(ref1 in (ref0 . (^ (Track <: succs)))));13
this/inv3;(all ref0:(one Exit)|((ref0 !in (ref0 . (Track <: succs))) && (Track !in (ref0 . (Track <: succs)))));1;((all ref0:(one (Track - Exit))|(some (ref0 . (Track <: succs)))) && (no (Exit . (Track <: succs))));10
this/inv3;((some ref0:(one Track)|((ref0 in Exit) => (all ref1:(one Track)|((ref0 != ref1) && ((ref0 -> ref1) !in (Track <: succs)))))) && (some ref2:(one Track)|((ref2 in Exit) => (all ref3:(one Signal)|((ref2 -> ref3) !in (Track <: signals))))));1;((all ref0:(one Track)|((ref0 in Exit) => (all ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))))) && (all ref2:(one Track)|((all ref3:(one Track)|((ref2 -> ref3) !in (Track <: succs))) => (ref2 in Exit))));20
this/inv1;(all ref0:(one (Track . (* (Track <: succs))))|((Entry in ref0) && (Exit in ref0)));1;((some ref0:(one Track)|(ref0 in Entry)) && (some ref1:(one Track)|(ref1 in Exit)));7
this/inv3;(all ref0:(one Track)|((ref0 = Exit) => (no (ref0 . (^ (Track <: succs))))));1;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (^ (Track <: succs))))));8
this/inv1;(some (Entry & Track));1;(some (Entry -> Exit));4
this/inv6;((Track <: signals) in (Entry some-> Speed));1;(Entry in ((Track <: signals) . Speed));4
this/inv1;(all ref0:(one ((Track - Entry) - Exit))|(no (ref0 . (Track <: succs))));1;(some (Entry -> Exit));9
this/inv3;(all ref0:(one Exit)|((ref0 !in (ref0 . (Track <: succs))) && (Entry !in (ref0 . (Track <: succs))) && (Junction !in (ref0 . (Track <: succs))) && (Track !in (ref0 . (Track <: succs)))));1;((all ref0:(one (Track - Exit))|(some (ref0 . (Track <: succs)))) && (no (Exit . (Track <: succs))));20
this/inv3;((all ref0:(one Track)|((ref0 in Exit) => (all ref1:(one Track)|((ref0 != ref1) && ((ref0 -> ref1) !in (Track <: succs)))))) && (all ref2:(one Track)|((ref2 in Exit) => (all ref3:(one Signal)|((ref2 -> ref3) !in (Track <: signals))))));1;((all ref0:(one Track)|((ref0 in Exit) => (all ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))))) && (all ref2:(one Track)|((all ref3:(one Track)|((ref2 -> ref3) !in (Track <: succs))) => (ref2 in Exit))));20
this/inv3;(all ref0:(one univ)|(((no (ref0 . (^ (Track <: succs)))) && (ref0 !in (ref0 . (^ (Track <: succs)))) && (ref0 in Track)) => (ref0 in Exit)));1;(all ref0:(one Track)|((no (ref0 . (^ (Track <: succs)))) <=> (ref0 in Exit)));14
this/inv4;(all ref0:(one Track)|((ref0 = Entry) => (no ((Track <: succs) . ref0))));1;(Entry = {ref0:(one Track)|(no ((Track <: succs) . ref0))});6
this/inv8;(all ref0:(one Entry),ref1:(one Exit)|((ref0 -> ref1) in (^ (Track <: succs))));1;(all ref0:(one Entry),ref1:(one Exit)|((ref0 -> ref1) in (* (Track <: succs))));6
this/inv1;((Entry in (Track . (* (Track <: succs)))) && (Exit in (Track . (* (Track <: succs)))));1;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) && (ref1 in Track)));12
this/inv3;((all ref0:(one Track)|((ref0 in Exit) => (all ref1:(one Track)|((ref0 != ref1) && ((ref0 -> ref1) !in (Track <: succs)))))) && (all ref2:(one Track)|((ref2 in Exit) => (all ref3:(one Semaphore),ref4:(one Signal),ref5:(one Speed)|(((ref2 -> ref3) !in (Track <: signals)) && ((ref2 -> ref4) !in (Track <: signals)) && ((ref2 -> ref5) !in (Track <: signals)))))));1;((all ref0:(one Track)|((ref0 in Exit) => (all ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))))) && (all ref2:(one Track)|((all ref3:(one Track)|((ref2 -> ref3) !in (Track <: succs))) => (ref2 in Exit))));31
this/inv5;(all ref0:(one Track)|((! (lone ((~ (Track <: succs)) . Track))) => (ref0 in Junction)));1;(all ref0:(one Track)|((! (lone ((Track <: succs) . ref0))) <=> (ref0 in Junction)));7
this/inv3;(all ref0:(one Exit)|((ref0 !in (ref0 . (Track <: succs))) && (Entry !in (ref0 . (Track <: succs))) && (Junction !in (ref0 . (Track <: succs)))));1;((all ref0:(one (Track - Exit))|(some (ref0 . (Track <: succs)))) && (no (Exit . (Track <: succs))));15
this/inv1;(some ref0:(one Track)|(((# (ref0 . (Track <: succs))) > 0) && (ref0 in ((Entry + Junction) + Exit))));1;((some Entry) && (some Exit));14
this/inv1;(some (Exit & Track));1;(some (Entry -> Exit));4
this/inv3;(all ref0:(one univ)|((ref0 in Entry) || ((ref0 in Exit) => (no (ref0 . (Track <: succs)))) || (ref0 in Junction)));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));13
this/inv6;(all ref0:(one Track)|((ref0 in Entry) <=> (Speed in (ref0 . (Track <: signals)))));1;(all ref0:(one Track)|(some ref1:(one Speed)|((ref0 in Entry) <=> (ref1 in (ref0 . (Track <: signals))))));5
this/inv5;(all ref0:(one Track)|((! (lone ((~ (Track <: succs)) . ref0))) => (ref0 in Junction)));1;(all ref0:(one Track)|((! (lone ((Track <: succs) . ref0))) <=> (ref0 in Junction)));5
this/inv2;(some ref0:(one Signal)|(ref0 in (Track . (Track <: signals))));1;(all ref0:(one Signal)|(one ref1:(one Track)|(ref0 in (ref1 . (Track <: signals)))));5
this/inv3;(all ref0:(one Exit)|((Entry !in (ref0 . (Track <: succs))) && (Exit !in (ref0 . (Track <: succs))) && (Junction !in (ref0 . (Track <: succs)))));1;((all ref0:(one (Track - Exit))|(some (ref0 . (Track <: succs)))) && (no (Exit . (Track <: succs))));15
this/inv3;(all ref0:(one Track)|((ref0 = Exit) => ((# (ref0 . (^ (Track <: succs)))) = 0)));1;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (^ (Track <: succs))))));10
this/inv3;(some ref0:(one Track)|((ref0 in Exit) => (all ref1:(one Signal),ref2:(one Track)|((ref0 != ref2) && ((ref0 -> ref1) !in (Track <: signals)) && ((ref0 -> ref2) !in (Track <: succs))))));1;((all ref0:(one Track)|((ref0 in Exit) => (all ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))))) && (all ref2:(one Track)|((all ref3:(one Track)|((ref2 -> ref3) !in (Track <: succs))) => (ref2 in Exit))));22
this/inv6;((Track <: signals) in (Entry some->one Speed));1;(Entry in ((Track <: signals) . Speed));4
this/inv1;(all ref0:(one Entry),ref1:(one Exit)|((some (ref0 & ref1)) && (some (ref0 & ref1))));1;((some (Entry & Track)) && (some (Exit & Track)));10
this/inv3;(all ref0:(one univ)|((ref0 in Entry) || ((ref0 in Exit) => (no (ref0 . (^ (Track <: succs))))) || (ref0 in Junction)));1;(all ref0:(one Track)|((no (ref0 . (^ (Track <: succs)))) <=> (ref0 in Exit)));13
this/inv3;(all ref0:(one Track)|((ref0 = Exit) => ((# (ref0 . (Track <: succs))) = 0)));1;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (Track <: succs)))));10
this/inv1;(all ref0:(one Track)|(one ref1:(one Entry),ref2:(one Exit)|((ref1 in (ref0 . (Track <: succs))) && (ref2 in (ref0 . (Track <: succs))))));1;(some ref0:(one Track)|((some ref1:(one Track)|(ref1 in Exit)) && (ref0 in Entry)));13
this/inv1;((Entry in (Track . (^ (Track <: succs)))) || (Exit in (Track . (^ (Track <: succs)))));1;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) || (ref1 in Track)));12
this/inv1;(all ref0:(one Entry),ref1:(one Exit)|((some ref0) && (some ref1)));1;((some Entry) && (some Exit));6
this/inv2;(all ref0:(one Track)|((ref0 . (Track <: signals)) in (Track . (Track <: signals))));1;((Track <: signals) in (Track one-> Signal));7
this/inv2;(one ref0:(one Track)|(some (ref0 . (Track <: signals))));1;(all ref0:(one Signal)|(one (ref0 . (~ (Track <: signals)))));5
this/inv1;(((Entry in Track) && (Entry in (Track . (^ (Track <: succs)))) && (Exit in Track)) || (Exit in (Track . (^ (Track <: succs)))));1;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) && (ref1 in Track)));19
this/inv3;(all ref0:(one Track)|(one ref1:(one Track)|((ref0 = Exit) => (ref1 !in (ref0 . (Track <: succs))))));1;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (Track <: succs)))));10
this/inv3;((Exit . (Track <: succs)) !in Track);1;(Exit = (Track - ((Track <: succs) . Track)));6
this/inv1;(((Entry in (Track . (^ (Track <: succs)))) && (Exit in Track)) || (Entry in Track) || (Exit in (Track . (^ (Track <: succs)))));1;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) && (ref1 in Track)));19
this/inv3;(all ref0:(one Exit),ref1:(one Signal),ref2:(one Track)|((ref0 != ref2) => (((ref0 -> ref1) !in (Track <: signals)) && ((ref0 -> ref2) !in (Track <: succs)))));1;((all ref0:(one Exit),ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))) && (all ref2:(one Track)|((all ref3:(one Track)|((ref2 -> ref3) !in (Track <: succs))) => (ref2 in Exit))));19
this/inv6;(all ref0:(one Speed),ref1:(one Track)|((ref0 in (ref1 . (Track <: signals))) <=> (ref1 in Entry)));1;(all ref0:(one Entry)|(some ref1:(one Signal)|(((ref0 -> ref1) in (Track <: signals)) && (ref1 in Speed))));10
this/inv1;(some ref0:(one Entry),ref1:(one Exit)|(all ref2:(one Track)|((ref0 in ref2) && (ref1 in ref2))));1;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) && (ref1 in Track)));9
this/inv3;(all ref0:(one Track),ref1:(one Track)|((ref0 = Exit) => (ref1 !in (ref0 . (Track <: succs)))));1;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (Track <: succs)))));10
this/inv3;(all ref0:(one Track),ref1:(one Track)|((ref0 = Exit) => (no ((ref0 . (Track <: succs)) & ref1))));1;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (Track <: succs)))));11
this/inv1;(all ref0:(one Entry),ref1:(one Exit),ref2:(one Track)|((ref0 in ref2) && (ref1 in ref2)));1;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) && (ref1 in Track)));9
this/inv3;(all ref0:(one Track)|(ref0 in Entry));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));9
this/inv3;((Exit . (Track <: succs)) in Track);1;(Exit = (Track - ((Track <: succs) . Track)));6
this/inv1;((Entry in Track) || (Entry in (Track . (^ (Track <: succs)))) || (Exit in Track) || (Exit in (Track . (^ (Track <: succs)))));1;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) || (ref1 in Track)));18
this/inv4;(all ref0:(one Track),ref1:(one (Track - ref0))|((no (ref0 & (ref1 . (Track <: succs)))) <=> (ref0 in Entry)));1;(all ref0:(one Track)|((no (ref0 & (Track . (Track <: succs)))) <=> (ref0 in Entry)));5
this/inv1;((Entry in Track) && (Entry in (Track . (^ (Track <: succs)))) && (Exit in Track) && (Exit in (Track . (^ (Track <: succs)))));1;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) && (ref1 in Track)));18
this/inv3;(all ref0:(one Exit),ref1:(one Signal),ref2:(one Track)|((ref0 -> ref2) !in (Track <: succs)));1;(all ref0:(one Track)|((all ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))) <=> (ref0 in Exit)));11
this/inv3;(all ref0:(one ((Track - Junction) - Entry))|(no ((Track <: succs) . ref0)));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));8
this/inv3;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) => ((ref0 !in (ref0 . (^ (Track <: succs)))) && (ref0 in Exit))));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));11
this/inv8;(all ref0:(one Entry)|(some ref1:(one Exit)|((ref0 -> ref1) in (* (Track <: succs)))));1;(all ref0:(one Entry),ref1:(one Exit)|((ref0 -> ref1) in (* (Track <: succs))));4
this/inv3;(all ref0:(one ((Track - Junction) - Entry))|(ref0 !in (ref0 . (Track <: succs))));1;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (Track <: succs)))));7
this/inv3;(all ref0:(one ((Track - Entry) - Junction))|((no (ref0 . (Track <: succs))) && (ref0 !in (ref0 . (Track <: succs)))));1;((all ref0:(one Track)|((no (ref0 . (Track <: succs))) => (ref0 in Exit))) && (no (Exit . (Track <: succs))));9
this/inv1;(all ref0:(one Track)|((ref0 in (Entry + Junction)) => (((# ((ref0 . (Track <: succs)) & Entry)) > 1) && ((# ((ref0 . (Track <: succs)) & Exit)) > 1))));1;(((# Entry) > 0) && ((# Exit) > 0));15
this/inv3;(all ref0:(one Exit)|(ref0 !in (ref0 . (^ (Track <: succs)))));1;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (^ (Track <: succs))))));7
this/inv3;(all ref0:(one Track)|((ref0 in Exit) => (all ref1:(one Signal),ref2:(one Track)|((ref0 != ref2) && ((ref0 -> ref1) !in (Track <: signals)) && ((ref2 -> ref0) !in (Track <: succs))))));1;((all ref0:(one Track)|((ref0 in Exit) => (all ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))))) && (all ref2:(one Track)|((all ref3:(one Track)|((ref2 -> ref3) !in (Track <: succs))) => (ref2 in Exit))));22
this/inv3;(all ref0:(one Exit)|((# (ref0 . (^ (Track <: succs)))) = 0));1;(all ref0:(one Track)|(((# (ref0 . (Track <: succs))) = 0) <=> (ref0 in Exit)));7
this/inv3;(all ref0:(one Track),ref1:(one Track)|(ref1 !in (ref0 . (Track <: succs))));1;(all ref0:(one Track)|((all ref1:(one Track)|(ref1 !in (ref0 . (Track <: succs)))) <=> (ref0 in Exit)));8
this/inv1;((Entry = (Track . (^ (Track <: succs)))) || (Exit = (Track . (^ (Track <: succs)))));1;(some (Entry -> Exit));13
this/inv4;(all ref0:(one Track)|((no ((^ (Track <: succs)) . ref0)) => (ref0 in Entry)));1;(all ref0:(one Track)|((no ((^ (Track <: succs)) . ref0)) <=> (ref0 in Entry)));4
this/inv3;((no (Track . (^ (Track <: succs)))) <=> (Track in Exit));1;(all ref0:(one Track)|((no (ref0 . (^ (Track <: succs)))) <=> (ref0 in Exit)));5
this/inv3;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) => ((some ref1:(one Entry)|(ref0 != ref1)) && (ref0 in Exit))));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));9
this/inv3;(all ref0:(one Exit)|((ref0 . (Track <: succs)) in none));1;(all ref0:(one Track)|(((ref0 . (Track <: succs)) in none) <=> (ref0 in Exit)));6
this/inv1;(all ref0:(one Track)|((ref0 in ((Entry + Junction) + Exit)) => (((# ((ref0 . (Track <: succs)) & Entry)) > 0) && ((# ((ref0 . (Track <: succs)) & Exit)) > 0))));1;(((# Entry) > 0) && ((# Exit) > 0));17
this/inv2;(some ref0:(one Track)|(all ref1:(one Track)|((ref0 . (Track <: signals)) != (ref1 . (Track <: signals)))));1;(all ref0:(one Signal)|(one ref1:(one Track)|(ref0 in (ref1 . (Track <: signals)))));8
this/inv3;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) => ((all ref1:(one Entry)|(ref0 != ref1)) && (ref0 in Exit))));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));9
this/inv3;(some ref0:(one Exit)|(all ref1:(one Track)|((ref0 in (ref1 . (Track <: signals))) => (no (ref1 . (Track <: succs))))));1;((all ref0:(one (Track - Exit))|(some (ref0 . (Track <: succs)))) && (no (Exit . (Track <: succs))));14
this/inv5;(all ref0:(one Junction)|(some ref1:(one Track)|(ref0 in ((Track <: succs) . ref1))));1;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});11
this/inv3;(all ref0:(one Exit),ref1:(one Semaphore),ref2:(one Signal),ref3:(one Speed),ref4:(one Track)|((ref0 != ref4) && ((ref0 -> ref1) !in (Track <: signals)) && ((ref0 -> ref2) !in (Track <: signals)) && ((ref0 -> ref3) !in (Track <: signals)) && ((ref0 -> ref4) !in (Track <: succs))));1;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (Track <: succs)))));30
this/inv3;(all ref0:(one Track)|((! (no (ref0 . (Track <: succs)))) <=> (ref0 = Exit)));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));5
this/inv3;(all ref0:(one Track)|((no (ref0 . (^ (Track <: succs)))) => ((all ref1:(one Entry)|(ref0 != ref1)) && (ref0 in Exit))));1;(all ref0:(one Track)|((no (ref0 . (^ (Track <: succs)))) <=> (ref0 in Exit)));9
this/inv3;(all ref0:(one (Track - Exit))|(lone (ref0 . (Track <: succs))));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));8
this/inv3;(all ref0:(one Exit)|(((ref0 !in Entry) && (ref0 !in Junction)) => ((no (ref0 . (^ (Track <: succs)))) && (ref0 !in (ref0 . (^ (Track <: succs)))))));1;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (^ (Track <: succs))))));19
this/inv3;(all ref0:(one ((Track - Junction) - Entry))|((# (ref0 . (Track <: succs))) = 0));1;(all ref0:(one Track)|(((# (ref0 . (Track <: succs))) = 0) <=> (ref0 in Exit)));6
this/inv10;(one (((Track - ((^ (Track <: succs)) . Junction)) . (Track <: signals)) :> Semaphore));1;(((Track <: succs) . Junction) in ((Track <: signals) . Semaphore));8
this/inv3;(all ref0:(one ((Track - Junction) - Entry))|(((# (ref0 . (Track <: succs))) = 0) => (ref0 in Exit)));1;(all ref0:(one Track)|(((# (ref0 . (Track <: succs))) = 0) <=> (ref0 in Exit)));4
this/inv3;(all ref0:(one Exit)|(((ref0 !in Entry) && (ref0 !in Junction)) => (no (ref0 . (^ (Track <: succs))))));1;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (^ (Track <: succs))))));12
this/inv1;(all ref0:(one Track)|((some ref0) => (((ref0 . (^ (Track <: succs))) = Entry) && ((ref0 . (^ (Track <: succs))) = Exit))));1;((some Entry) && (some Exit));16
this/inv3;(all ref0:(one Track)|((no (ref0 . (^ (Track <: succs)))) => ((all ref1:(one Entry),ref2:(one Junction)|((ref0 != ref1) && (ref0 != ref2))) && (ref0 in Exit))));1;(all ref0:(one Track)|((no (ref0 . (^ (Track <: succs)))) <=> (ref0 in Exit)));14
this/inv10;(one (((Track - ((~ (Track <: succs)) . Junction)) . (Track <: signals)) :> Semaphore));1;(((Track <: succs) . Junction) in ((Track <: signals) . Semaphore));8
this/inv4;(all ref0:(one Entry)|((# ((Track <: succs) . ref0)) = 0));1;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) = 0) <=> (ref0 in Entry)));6
this/inv3;(all ref0:(one univ)|(((no (ref0 . (^ (Track <: succs)))) && (ref0 !in Entry) && (ref0 !in Junction)) => (ref0 in Exit)));1;(all ref0:(one Track)|((no (ref0 . (^ (Track <: succs)))) <=> (ref0 in Exit)));11
this/inv1;(all ref0:(one Track)|((((ref0 . (^ (Track <: succs))) = Entry) || (ref0 = Entry)) && (((ref0 . (^ (Track <: succs))) = Exit) || (ref0 = Exit))));1;((some Entry) && (some Exit));21
this/inv3;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Entry)));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));4
this/inv10;(all ref0:(one Track)|(one ref1:(one Semaphore)|((Junction in (ref0 . (Track <: succs))) => (ref1 in (ref0 . (Track <: signals))))));1;(all ref0:(one Track)|((some ref1:(one Junction)|(ref1 in (ref0 . (Track <: succs)))) => (some ref2:(one Semaphore)|(ref2 in (ref0 . (Track <: signals))))));9
this/inv9;(all ref0:(one Track)|(some ref1:(one Track)|((((ref0 -> ref1) in (Track <: succs)) && (ref1 !in Junction)) => (all ref2:(one Signal)|((ref0 -> ref2) !in (Track <: signals))))));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|((ref0 -> ref1) in (Track <: succs)))) => (! (some ref2:(one Semaphore)|((ref0 -> ref2) in (Track <: signals))))));14
this/inv6;(all ref0:(one Track)|(some ref1:(one (ref0 . (Track <: signals)))|((ref0 in Entry) => (ref1 in Speed))));1;(all ref0:(one Track)|((ref0 in Entry) => (some ref1:(one Speed)|(ref1 in (ref0 . (Track <: signals))))));8
this/inv3;(all ref0:(one Track)|((no (ref0 . (^ (Track <: succs)))) => ((ref0 !in Entry) && (ref0 in Exit))));1;(all ref0:(one Track)|((no (ref0 . (^ (Track <: succs)))) <=> (ref0 in Exit)));8
this/inv10;(all ref0:(one Track)|((all ref1:(one Junction)|(ref1 in (ref0 . (Track <: succs)))) => (one ((Track <: signals) . Semaphore))));1;(((Track <: succs) . Junction) in ((Track <: signals) . Semaphore));9
this/inv6;(all ref0:(one Track)|(some ref1:(one (ref0 . (Track <: signals)))|((ref0 in Entry) <=> (ref1 in Speed))));1;(all ref0:(one Track)|(some ref1:(one Speed)|((ref0 in Entry) <=> (ref1 in (ref0 . (Track <: signals))))));8
this/inv4;(all ref0:(one Track)|((ref0 in Entry) => (ref0 !in (ref0 . (Track <: succs)))));1;(Entry = {ref0:(one Track)|(no ((Track <: succs) . ref0))});11
this/inv3;(all ref0:(one Track)|(((no (ref0 . (^ (Track <: succs)))) && (ref0 !in (ref0 . (^ (Track <: succs))))) => ((ref0 !in Entry) && (ref0 !in Junction) && (ref0 in Exit))));1;(all ref0:(one Track)|((no (ref0 . (^ (Track <: succs)))) <=> (ref0 in Exit)));18
this/inv4;(all ref0:(one univ)|(((no ((Track <: succs) . ref0)) && (ref0 in Track)) => (ref0 in Entry)));1;(all ref0:(one Track)|((no ((Track <: succs) . ref0)) <=> (ref0 in Entry)));8
this/inv2;(all ref0:(one Track),ref1:(one Track)|((! disj[ref0,ref1]) || (no ((ref0 . (Track <: signals)) & (ref1 . (Track <: signals))))));1;(all ref0:(one Signal)|(one ref1:(one Track)|(ref0 in (ref1 . (Track <: signals)))));14
this/inv3;(all ref0:(one Track)|(((no (ref0 . (^ (Track <: succs)))) && (ref0 !in (ref0 . (^ (Track <: succs))))) => (ref0 in Exit)));1;(all ref0:(one Track)|((no (ref0 . (^ (Track <: succs)))) <=> (ref0 in Exit)));11
this/inv9;(all ref0:(one Track)|(some ref1:(one Track)|((((ref0 -> ref1) in (Track <: succs)) && (ref1 !in Junction)) => (all ref2:(one Signal)|(((ref0 -> ref2) in (Track <: signals)) => (ref2 !in Semaphore))))));1;(all ref0:(one Track)|((all ref1:(one Track)|(((ref0 -> ref1) in (Track <: succs)) => (ref1 !in Junction))) => (all ref2:(one Signal)|(((ref0 -> ref2) in (Track <: signals)) => (ref2 !in Semaphore)))));8
this/inv1;(all ref0:(one Entry),ref1:(one Exit)|(one ref2:(one Track)|((ref0 in (ref2 . (Track <: succs))) && (ref1 in (ref2 . (Track <: succs))))));1;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) && (ref1 in Track)));13
this/inv3;(all ref0:(one Exit),ref1:(one Track)|((ref1 !in (ref0 . (^ (Track <: succs)))) => (no (ref0 . (^ (Track <: succs))))));1;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (^ (Track <: succs))))));12
this/inv8;(((Entry . (* (Track <: succs))) & Exit) = Exit);1;(all ref0:(one Entry)|(((ref0 . (* (Track <: succs))) & Exit) = Exit));3
this/inv3;(all ref0:(one Track)|((ref0 in Entry) => (no (ref0 . (Track <: succs)))));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));10
this/inv1;(all ref0:(one Entry)|((one Entry) && (one Exit)));1;((some Entry) && (some Exit));5
this/inv4;(all ref0:(one univ)|(((no ((Track <: succs) . ref0)) && (ref0 !in (ref0 . (^ (Track <: succs)))) && (ref0 in Track)) => (ref0 in Entry)));1;(all ref0:(one Track)|((ref0 !in (Track . (^ (Track <: succs)))) <=> (ref0 in Entry)));14
this/inv8;(all ref0:(one Entry)|(some ref1:(one (Exit - ref0))|(ref1 in (ref0 . (^ (Track <: succs))))));1;(all ref0:(one Entry),ref1:(one (Exit - ref0))|(ref1 in (ref0 . (^ (Track <: succs)))));4
this/inv9;(all ref0:(one Junction),ref1:(one Track)|((ref0 !in (ref1 . (Track <: succs))) => (all ref2:(one Signal)|(ref2 !in (ref1 . (Track <: signals))))));1;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));10
this/inv1;(one ref0:(one Track)|(ref0 in (Entry & Exit)));1;(some (Entry -> Exit));6
this/inv9;(all ref0:(one Track)|(some ref1:(one Track)|((((ref0 -> ref1) in (Track <: succs)) && (ref1 !in Junction)) => (all ref2:(one Signal)|(((ref0 -> ref2) in (Track <: signals)) => (ref2 in Speed))))));1;(all ref0:(one Track)|((all ref1:(one Track)|(((ref0 -> ref1) in (Track <: succs)) => (ref1 !in Junction))) => (all ref2:(one Signal)|(((ref0 -> ref2) in (Track <: signals)) => (ref2 !in Semaphore)))));12
this/inv5;(all ref0:(one Junction)|(some ref1:(one Track),ref2:(one Track)|((ref0 in ((ref1 . (Track <: succs)) . (integer/next[]))) && (ref0 in ((ref2 . (Track <: succs)) . (integer/next[]))))));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));17
this/inv8;(all ref0:(one Entry)|(some ref1:(one (Exit - Entry))|(ref1 in (ref0 . (^ (Track <: succs))))));1;(all ref0:(one Entry),ref1:(one (Exit - ref0))|(ref1 in (ref0 . (^ (Track <: succs)))));4
this/inv1;(all ref0:(one Entry)|((some Entry) && (some Exit)));1;((some Entry) && (some Exit));1
this/inv3;(all ref0:(one Track),ref1:(one Track)|((ref0 !in (ref1 . (^ (Track <: succs)))) => (ref1 in Exit)));1;(all ref0:(one Track)|((all ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))) <=> (ref0 in Exit)));11
this/inv2;(all ref0:(one Signal)|(ref0 in ((Track . (^ (Track <: succs))) . (Track <: signals))));1;(all ref0:(one Signal)|(one ref1:(one Track)|(ref0 in (ref1 . (Track <: signals)))));8
this/inv1;(one ref0:(one Entry)|(ref0 in Track));1;(some ref0:(one Entry),ref1:(one Exit)|((ref0 + ref1) in Track));5
this/inv8;(all ref0:(one (Entry - Exit))|(some ref1:(one (Exit - Entry))|(ref1 in (ref0 . (^ (Track <: succs))))));1;(all ref0:(one Entry),ref1:(one (Exit - ref0))|(ref1 in (ref0 . (^ (Track <: succs)))));4
this/inv1;(some ref0:(one Track)|(ref0 in (Entry & Exit)));1;(some (Entry -> Exit));6
this/inv9;(all ref0:(one Junction),ref1:(one Track)|((ref0 !in (ref1 . (^ (Track <: succs)))) => (all ref2:(one Signal)|(ref2 !in (ref1 . (Track <: signals))))));1;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));11
this/inv4;(all ref0:(one Entry)|(((ref0 !in Exit) || (ref0 in Exit)) && ((ref0 !in Junction) || (ref0 in Junction)) && (no (ref0 . (^ (Track <: succs))))));1;((all ref0:(one Track)|((no ((Track <: succs) . ref0)) => (ref0 in Entry))) && (no ((Track <: succs) . Entry)));21
this/inv5;(all ref0:(one Track)|(((# ((^ (Track <: succs)) . ref0)) > 1) => (ref0 in Junction)));1;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) <=> (ref0 in Junction)));5
this/inv2;(all ref0:(one Signal)|(lone ref1:(one Track)|(ref0 in (ref1 . (Track <: signals)))));1;(all ref0:(one Signal)|(one ref1:(one Track)|(ref0 in (ref1 . (Track <: signals)))));4
this/inv4;(all ref0:(one Track)|(((ref0 . (Track <: succs)) !in Entry) <=> (ref0 in Entry)));1;(all ref0:(one Track)|((no (ref0 . (~ (Track <: succs)))) <=> (ref0 in Entry)));6
this/inv3;(all ref0:(one Track),ref1:(one Track)|((ref0 !in Exit) => (some (ref0 . (^ (Track <: succs))))));1;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (^ (Track <: succs))))));5
this/inv4;(all ref0:(one Entry)|(((ref0 !in Exit) || (ref0 in Exit)) && ((ref0 !in Junction) || (ref0 in Junction)) && (no ((Track <: succs) . ref0))));1;(all ref0:(one Track)|(((no ((Track <: succs) . ref0)) => (ref0 in Entry)) && ((ref0 in Entry) => (no ((Track <: succs) . ref0)))));18
this/inv9;(all ref0:(one Track),ref1:(one Track)|((((ref0 -> ref1) in (Track <: succs)) && (ref1 !in Junction)) => (all ref2:(one Semaphore)|((ref0 -> ref2) !in (Track <: signals)))));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|((ref0 -> ref1) in (Track <: succs)))) => (! (some ref2:(one Semaphore)|((ref0 -> ref2) in (Track <: signals))))));14
this/inv8;(all ref0:(one Track)|((ref0 in (Entry - Exit)) => ((((ref0 . (^ (Track <: succs))) in Exit) && (ref0 in (Exit - Entry))) => ((ref0 . (^ (Track <: succs))) in Entry))));1;(all ref0:(one Track),ref1:(one (Track - ref0))|(((ref0 in Entry) && (ref1 in Exit)) => (ref1 in (ref0 . (^ (Track <: succs))))));20
this/inv5;(all ref0:(one Track)|(((lone ((Track <: succs) . ref0)) && (lone (ref0 . (Track <: succs)))) <=> (ref0 !in Junction)));1;(all ref0:(one Track)|((! (lone ((Track <: succs) . ref0))) <=> (ref0 in Junction)));10
this/inv8;(all ref0:(one Track)|((ref0 in (Entry - Exit)) => ((((ref0 . (^ (Track <: succs))) in Exit) && (ref0 in (Exit - Entry))) => (((^ (Track <: succs)) . ref0) in Entry))));1;(all ref0:(one Track),ref1:(one Track)|(((ref0 in Exit) && (ref1 in Entry)) => (ref0 in (ref1 . (* (Track <: succs))))));22
this/inv2;(all ref0:(one Signal),ref1:(one Track),ref2:(one Track)|(((ref1 -> ref0) in (Track <: signals)) && (ref1 = ref2) && ((ref2 -> ref0) in (Track <: signals))));1;(all ref0:(one Signal)|(one ref1:(one Track)|((ref1 -> ref0) in (Track <: signals))));14
this/inv9;(all ref0:(one Junction),ref1:(one Track)|((! (some ref2:(one Semaphore)|((ref1 -> ref2) in (Track <: signals)))) <=> (! ((ref1 -> ref0) in (Track <: succs)))));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|((ref0 -> ref1) in (Track <: succs)))) => (! (some ref2:(one Semaphore)|((ref0 -> ref2) in (Track <: signals))))));16
this/inv3;(all ref0:(one Track),ref1:(one Track)|((ref0 !in Exit) => (one (ref0 . (Track <: succs)))));1;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (Track <: succs)))));7
this/inv2;(all ref0:(one Signal)|(some ref1:(one Track)|(ref0 in ((Track <: signals) . ref1))));1;(all ref0:(one Signal)|(one ref1:(one Track)|(ref0 in (ref1 . (Track <: signals)))));6
this/inv9;(all ref0:(one Junction),ref1:(one Track)|((! ((ref1 -> ref0) in (Track <: succs))) => (all ref2:(one Semaphore)|(! ((ref1 -> ref2) in (Track <: signals))))));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|((ref0 -> ref1) in (Track <: succs)))) => (! (some ref2:(one Semaphore)|((ref0 -> ref2) in (Track <: signals))))));10
this/inv9;(all ref0:(one Track),ref1:(one (Junction - ref0))|((ref1 in (ref0 . (Track <: succs))) => (Semaphore in (ref0 . (Track <: signals)))));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|(ref1 in (ref0 . (Track <: succs))))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));10
this/inv2;(all ref0:(one Signal),ref1:(one Track)|((ref0 -> ref1) in (Track <: signals)));1;(all ref0:(one Signal)|(one ref1:(one Track)|((ref1 -> ref0) in (Track <: signals))));6
this/inv9;(! (some ref0:(one Junction),ref1:(one Track)|((some ref2:(one Semaphore)|((ref1 -> ref2) in (Track <: signals))) && ((ref1 -> ref0) in (Track <: succs)))));1;(all ref0:(one Track)|((ref0 in ((Track <: signals) . Semaphore)) => (ref0 in ((Track <: succs) . Junction))));17
this/inv3;(all ref0:(one Track),ref1:(one Track)|((ref0 !in Exit) => (one (ref0 . (^ (Track <: succs))))));1;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (^ (Track <: succs))))));7
this/inv3;(all ref0:(one Track)|((no ((Track <: succs) . ref0)) => ((Track - ref0) in Exit)));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));8
this/inv9;(! (some ref0:(one Track)|(all ref1:(one Junction)|((some ref2:(one Semaphore)|((ref0 -> ref2) in (Track <: signals))) && ((ref0 -> ref1) in (Track <: succs))))));1;(all ref0:(one Track)|((ref0 in ((Track <: signals) . Semaphore)) => (ref0 in ((Track <: succs) . Junction))));15
this/inv3;(all ref0:(one Track)|((ref0 in Exit) => ((# (ref0 . (^ (Track <: succs)))) = 0)));1;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (^ (Track <: succs))))));10
this/inv9;(all ref0:(one Track),ref1:(one (Junction - ref0))|((ref1 !in (ref0 . (Track <: succs))) => (Semaphore !in (ref0 . (Track <: signals)))));1;(all ref0:(one Track)|((all ref1:(one Junction)|(ref1 !in (ref0 . (Track <: succs)))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));7
this/inv2;(all ref0:(one Signal)|(some ref1:(one Track),ref2:(one Track)|(((ref0 in (ref1 . (Track <: signals))) && (ref0 in (ref2 . (Track <: signals)))) => (ref1 = ref2))));1;((all ref0:(one Signal),ref1:(one Track),ref2:(one Track)|(((ref0 in (ref1 . (Track <: signals))) && (ref0 in (ref2 . (Track <: signals)))) => (ref1 = ref2))) && (all ref3:(one Signal)|(some ref4:(one Track)|(ref3 in (ref4 . (Track <: signals))))));14
this/inv3;((all ref0:(one Track)|((ref0 in Exit) => (no (ref0 . (Track <: succs))))) && (no (Entry & Exit)) && (no (Entry & Junction)) && (no (Exit & Junction)));1;((all ref0:(one Track)|((ref0 in Exit) => (no (ref0 . (Track <: succs))))) && (all ref1:(one Track)|((no (ref1 . (Track <: succs))) => (ref1 in Exit))));19
this/inv2;(all ref0:(one Signal)|(one ref1:(one Track),ref2:(one Track)|(ref0 in (ref1 . (Track <: signals)))));1;(all ref0:(one Signal)|(one ref1:(one Track)|(ref0 in (ref1 . (Track <: signals)))));5
this/inv9;(all ref0:(one Track),ref1:(one (Junction - ref0))|((ref1 !in (ref0 . (^ (Track <: succs)))) => (Semaphore !in (ref0 . (Track <: signals)))));1;(all ref0:(one Track)|((all ref1:(one Junction)|(ref1 !in (ref0 . (Track <: succs)))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));8
this/inv9;(! (some ref0:(one Junction),ref1:(one Track)|((some ref2:(one Semaphore)|((ref1 -> ref2) in (Track <: signals))) && (ref0 in (ref1 . (^ (Track <: succs)))))));1;(all ref0:(one Track)|((ref0 in ((Track <: signals) . Semaphore)) => (ref0 in ((Track <: succs) . Junction))));16
this/inv6;(all ref0:(one Entry)|((ref0 in Track) => (some (Track . (Track <: signals)))));1;(all ref0:(one Track)|((ref0 in Entry) => (some ((ref0 . (Track <: signals)) & Speed))));8
this/inv3;((all ref0:(one Track)|((ref0 in Exit) => (no (ref0 . (Track <: succs))))) && (no (Entry & Exit)) && (no (Entry & Junction)) && (no ((Entry & Junction) & Exit)) && (no (Exit & Junction)));1;((all ref0:(one Track)|((ref0 in Exit) => (no (ref0 . (Track <: succs))))) && (all ref1:(one Track)|((no (ref1 . (Track <: succs))) => (ref1 in Exit))));25
this/inv2;(all ref0:(one Track),ref1:(one Track)|(no (((ref0 . (Track <: signals)) + ((ref0 . (^ (Track <: succs))) . (Track <: signals))) & ((ref1 . (Track <: signals)) + ((ref1 . (^ (Track <: succs))) . (Track <: signals))))));1;(all ref0:(one Signal)|(one ref1:(one Track)|(ref0 in (ref1 . (Track <: signals)))));23
this/inv9;(! (some ref0:(one Junction),ref1:(one Track)|((! ((ref1 -> ref0) in (Track <: succs))) && (some ref2:(one Semaphore)|((ref1 -> ref2) in (Track <: signals))))));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|((ref0 -> ref1) in (Track <: succs)))) => (! (some ref2:(one Semaphore)|((ref0 -> ref2) in (Track <: signals))))));14
this/inv4;(all ref0:(one Track)|((((# (ref0 . (Track <: succs))) = 0) => (ref0 in Entry)) && ((ref0 in Entry) => ((# (ref0 . (Track <: succs))) = 0))));1;(all ref0:(one Track)|((((# ((Track <: succs) . ref0)) = 0) => (ref0 in Entry)) && ((ref0 in Entry) => ((# ((Track <: succs) . ref0)) = 0))));6
this/inv2;(all ref0:(one Track),ref1:(one Track)|(lone (((ref0 . (Track <: signals)) + ((ref0 . (^ (Track <: succs))) . (Track <: signals))) & ((ref1 . (Track <: signals)) + ((ref1 . (^ (Track <: succs))) . (Track <: signals))))));1;(all ref0:(one Signal)|(one ref1:(one Track)|(ref0 in (ref1 . (Track <: signals)))));23
this/inv6;(all ref0:(one Entry)|((ref0 in Track) => (some (ref0 . (Track <: signals)))));1;(all ref0:(one Track)|((ref0 in Entry) => (some ((ref0 . (Track <: signals)) & Speed))));6
this/inv10;(all ref0:(one Track)|(some ref1:(one Semaphore)|((Junction in ((^ (Track <: succs)) . ref0)) => (ref1 in (ref0 . (Track <: signals))))));1;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (ref0 in ((Track <: signals) . Semaphore))));12
this/inv2;(all ref0:(one Signal)|(one ref1:(one Track)|(ref1 in ref0)));1;(all ref0:(one Signal)|(one ref1:(one Track)|((ref1 -> ref0) in (Track <: signals))));6
this/inv3;(all ref0:(one Track)|((ref0 in Exit) => (one (ref0 . (Track <: succs)))));1;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (Track <: succs)))));8
this/inv3;(all ref0:(one Track),ref1:(one Track)|(((ref0 != ref1) && (ref1 !in (ref0 . (Track <: succs)))) => (ref0 in Exit)));1;(all ref0:(one Track)|((all ref1:(one Track)|(ref1 !in (ref0 . (Track <: succs)))) <=> (ref0 in Exit)));10
this/inv5;(all ref0:(one Track)|((all ref1:(one Track)|(ref0 in (ref1 . (Track <: succs)))) <=> (ref0 in Junction)));1;(all ref0:(one Track)|((! (lone ((Track <: succs) . ref0))) <=> (ref0 in Junction)));9
this/inv2;(all ref0:(one Signal)|(some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: signals))) && (ref0 in (ref2 . (Track <: signals))) && (ref1 = ref2))));1;(all ref0:(one Signal)|(one ref1:(one Track)|(ref0 in (ref1 . (Track <: signals)))));14
this/inv9;(all ref0:(one Junction),ref1:(one Track)|((ref0 !in (ref1 . (Track <: succs))) => (all ref2:(one Semaphore)|(ref2 !in (ref1 . (^ (Track <: signals)))))));1;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));11
this/inv2;(all ref0:(one Signal),ref1:(one Track),ref2:(one Track)|(((ref0 in (ref1 . ((^ (Track <: succs)) . (Track <: signals)))) && (ref0 in (ref2 . ((^ (Track <: succs)) . (Track <: signals))))) => (ref1 = ref2)));1;((all ref0:(one Signal),ref1:(one Track),ref2:(one Track)|(((ref0 in (ref1 . (Track <: signals))) && (ref0 in (ref2 . (Track <: signals)))) => (ref1 = ref2))) && (all ref3:(one Signal)|(some ref4:(one Track)|(ref3 in (ref4 . (Track <: signals))))));20
this/inv9;(all ref0:(one Track)|(! (some ref1:(one Junction)|((ref1 in (ref0 . (Track <: succs))) => (! (some ref2:(one Semaphore)|((ref0 -> ref2) in (Track <: signals))))))));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|((ref0 -> ref1) in (Track <: succs)))) => (! (some ref2:(one Semaphore)|((ref0 -> ref2) in (Track <: signals))))));12
this/inv3;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) = 0) => (ref0 in Exit)));1;(all ref0:(one Track)|(((# (ref0 . (Track <: succs))) = 0) <=> (ref0 in Exit)));6
this/inv5;(all ref0:(one Track)|((((# ((Track <: succs) . ref0)) > 0) => (ref0 in Junction)) && ((ref0 in Junction) => ((# ((Track <: succs) . ref0)) > 0))));1;(all ref0:(one Track)|((((# ((Track <: succs) . ref0)) > 1) => (ref0 in Junction)) && ((ref0 in Junction) => ((# ((Track <: succs) . ref0)) > 1))));2
this/inv5;(all ref0:(one Track)|((some ref1:(one Track)|(ref1 in (ref0 . (Track <: succs)))) <=> (ref0 in Junction)));1;(all ref0:(one Track)|((! (lone ((Track <: succs) . ref0))) <=> (ref0 in Junction)));9
this/inv9;(all ref0:(one Track),ref1:(one (Junction - ref0))|((ref1 !in (ref0 . (^ (Track <: succs)))) => (Semaphore !in ((ref0 . (^ (Track <: signals))) :> Signal))));1;(all ref0:(one Track)|((all ref1:(one Junction)|(ref1 !in (ref0 . (Track <: succs)))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));11
this/inv2;((all ref0:(one Signal),ref1:(one Track),ref2:(one Track)|(((ref0 in (ref1 . ((^ (Track <: succs)) . (Track <: signals)))) && (ref0 in (ref2 . ((^ (Track <: succs)) . (Track <: signals))))) => (ref1 = ref2))) && (Signal in Track));1;((all ref0:(one Signal),ref1:(one Track),ref2:(one Track)|(((ref0 in (ref1 . (Track <: signals))) && (ref0 in (ref2 . (Track <: signals)))) => (ref1 = ref2))) && (all ref3:(one Signal)|(some ref4:(one Track)|(ref3 in (ref4 . (Track <: signals))))));20
this/inv5;(all ref0:(one Track)|((1 < (# ((Track <: succs) . ref0))) <=> (ref0 in Junction)));1;(all ref0:(one Track)|((2 < (# ((Track <: succs) . ref0))) <=> (ref0 in Junction)));2
this/inv9;(all ref0:(one Junction),ref1:(one Track)|((! ((ref1 -> ref0) in (^ (Track <: succs)))) => (! (some ref2:(one Semaphore)|((ref1 -> ref2) in (Track <: signals))))));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|((ref0 -> ref1) in (Track <: succs)))) => (! (some ref2:(one Semaphore)|((ref0 -> ref2) in (Track <: signals))))));11
this/inv5;((# (Junction . (Track <: succs))) > 2);1;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) <=> (ref0 in Junction)));7
this/inv2;((all ref0:(one Signal),ref1:(one Track),ref2:(one Track)|(((ref0 in (ref1 . ((^ (Track <: succs)) . (Track <: signals)))) && (ref0 in (ref2 . ((^ (Track <: succs)) . (Track <: signals))))) => (ref1 = ref2))) && (all ref3:(one Signal)|(ref3 in Track)));1;((all ref0:(one Signal),ref1:(one Track),ref2:(one Track)|(((ref0 in (ref1 . (Track <: signals))) && (ref0 in (ref2 . (Track <: signals)))) => (ref1 = ref2))) && (all ref3:(one Signal)|(some ref4:(one Track)|(ref3 in (ref4 . (Track <: signals))))));19
this/inv6;(all ref0:(one Track)|(some ref1:(one Signal)|(((ref0 in Entry) && (ref1 in Speed)) => (ref1 in (ref0 . (Track <: signals))))));1;(all ref0:(one Track)|((ref0 in Entry) => (some ref1:(one Speed)|(ref1 in (ref0 . (Track <: signals))))));8
this/inv5;(all ref0:(one Track)|((ref0 in Junction) => (some ref1:(one Track)|(ref0 in (ref1 . (Track <: succs))))));1;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});13
this/inv5;(all ref0:(one Track)|((! (lone (ref0 & (Track . (Track <: succs))))) <=> (ref0 in Junction)));1;(all ref0:(one Track)|((! (lone ((Track <: succs) . ref0))) <=> (ref0 in Junction)));6
this/inv4;(all ref0:(one Track),ref1:(one Track)|((! disj[ref0,ref1]) || ((ref0 in Entry) => (ref0 !in (ref1 . (^ (Track <: succs)))))));1;(all ref0:(one Track),ref1:(one Track)|((! disj[ref0,ref1]) || ((ref0 !in (Track . (^ (Track <: succs)))) <=> (ref0 in Entry))));14
this/inv9;(all ref0:(one Junction),ref1:(one Track)|((! (ref0 in (ref1 . (Track <: succs)))) => (! (some ref2:(one Semaphore)|((ref1 -> ref2) in (Track <: signals))))));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|((ref0 -> ref1) in (Track <: succs)))) => (! (some ref2:(one Semaphore)|((ref0 -> ref2) in (Track <: signals))))));10
this/inv5;(all ref0:(one Track)|((! (lone (ref0 & (Track . (^ (Track <: succs)))))) <=> (ref0 in Junction)));1;(all ref0:(one Track)|((! (lone ((Track <: succs) . ref0))) <=> (ref0 in Junction)));7
this/inv6;(all ref0:(one Entry)|(some ref1:(one Signal)|((ref1 in Speed) => (ref1 in (ref0 . (Track <: signals))))));1;(all ref0:(one Entry)|(some ref1:(one Speed)|(ref1 in (ref0 . (Track <: signals)))));8
this/inv5;((# ((Track <: succs) . Junction)) > 1);1;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) <=> (ref0 in Junction)));7
this/inv10;(all ref0:(one Track)|((Junction in (ref0 . (^ (Track <: succs)))) => (Semaphore in (ref0 . (Track <: signals)))));1;(all ref0:(one Track)|((some ref1:(one Junction)|(ref1 in (ref0 . (Track <: succs)))) => (some ref2:(one Semaphore)|(ref2 in (ref0 . (Track <: signals))))));9
this/inv4;(all ref0:(one Track),ref1:(one Track)|((! disj[ref0,ref1]) || ((ref0 !in (ref1 . (^ (Track <: succs)))) <=> (ref0 in Entry))));1;(all ref0:(one Track),ref1:(one Track)|((! disj[ref0,ref1]) || ((ref0 !in (Track . (^ (Track <: succs)))) <=> (ref0 in Entry))));6
this/inv3;(all ref0:(one Track)|((no (ref0 . (* (Track <: succs)))) => (ref0 in Exit)));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));5
this/inv10;(all ref0:(one Track)|(some ref1:(one (ref0 . (Track <: signals)))|((Junction in (ref0 . (^ (Track <: succs)))) => (ref1 in Semaphore))));1;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (ref0 in ((Track <: signals) . Semaphore))));12
this/inv3;(all ref0:(one Track),ref1:(one Track)|(((ref0 -> ref1) in (Track <: succs)) => (ref0 != ref1)));1;(all ref0:(one Track)|((all ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))) <=> (ref0 in Exit)));12
this/inv3;(all ref0:(one Exit)|((no (ref0 . (Track <: succs))) || (ref0 in Entry)));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));6
this/inv3;(all ref0:(one Exit),ref1:(one Track)|(ref0 !in (ref1 . (Track <: succs))));1;(Exit = (Track - ((Track <: succs) . Track)));10
this/inv5;(all ref0:(one Track)|((! (lone (((Track <: succs) . Track) & ref0))) <=> (ref0 in Junction)));1;(all ref0:(one Track)|((! (lone ((Track <: succs) . ref0))) <=> (ref0 in Junction)));6
this/inv10;(all ref0:(one Track)|(some ref1:(one (ref0 . (Track <: signals)))|((Junction in (ref0 . (Track <: succs))) => (ref1 in Semaphore))));1;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (ref0 in ((Track <: signals) . Semaphore))));11
this/inv3;(all ref0:(one Track)|(some ref1:(one Track)|(((no (ref0 . (Track <: succs))) && (ref0 in (ref1 . (^ (Track <: succs))))) => (ref0 in Exit))));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));12
this/inv5;(all ref0:(one Junction)|((# (Track . (Track <: succs))) > 2));1;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) <=> (ref0 in Junction)));8
this/inv5;(all ref0:(one Junction)|((# (ref0 . (Track <: succs))) > 2));1;(all ref0:(one Track)|(((# (ref0 . (~ (Track <: succs)))) > 1) <=> (ref0 in Junction)));7
this/inv9;(all ref0:(one Track)|(some ref1:(one Junction),ref2:(one Semaphore)|((ref1 in ((Track <: succs) . ref0)) => (ref2 !in (ref0 . (Track <: signals))))));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|(ref1 in (ref0 . (Track <: succs))))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));9
this/inv2;(one ref0:(one Track)|((ref0 . (Track <: signals)) in Track));1;((Track <: signals) in (Track one-> Signal));5
this/inv9;(all ref0:(one Junction),ref1:(one Semaphore),ref2:(one Track)|((ref1 !in (ref2 . (^ (Track <: succs)))) => (ref1 in (ref2 . (Track <: signals)))));1;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));15
this/inv9;(all ref0:(one Junction),ref1:(one Semaphore),ref2:(one Track)|((ref1 !in (ref2 . (^ (Track <: succs)))) => (ref1 !in (ref2 . (Track <: signals)))));1;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));13
this/inv9;(all ref0:(one Semaphore),ref1:(one Track)|((no (((Track <: succs) . ref1) & Junction)) <=> (ref0 !in (ref1 . (Track <: signals)))));1;(all ref0:(one Semaphore),ref1:(one Track)|((no ((ref1 . (Track <: succs)) & Junction)) => (ref0 !in (ref1 . (Track <: signals)))));8
this/inv2;(one ref0:(one Track)|((ref0 . (Track <: signals)) in (Track . (Track <: signals))));1;((Track <: signals) in (Track one-> Signal));7
this/inv3;(all ref0:(one Track)|((ref0 !in (ref0 . (Track <: succs))) <=> (ref0 in Exit)));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));5
this/inv3;((all ref0:(one Exit)|(no (ref0 . (Track <: succs)))) && (all ref1:(one Entry)|((ref1 !in Exit) && (ref1 !in Junction))));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));13
this/inv9;(all ref0:(one Junction),ref1:(one Semaphore),ref2:(one Track)|((ref0 !in (ref2 . (^ (Track <: succs)))) => (ref1 !in (ref2 . (^ (Track <: signals))))));1;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));12
this/inv3;(all ref0:(one Track)|((none = (ref0 . (Track <: succs))) => ((ref0 !in Entry) && (ref0 !in Junction))));1;(all ref0:(one Track)|((none = (ref0 . (Track <: succs))) <=> (ref0 in Exit)));12
this/inv2;(all ref0:(one Signal),ref1:(one Track)|(lone (ref1 . (Track <: signals))));1;(all ref0:(one Signal)|(one ((Track <: signals) . ref0)));7
this/inv5;(all ref0:(one Track)|((ref0 in Junction) => ((# ((Track <: succs) . ref0)) > 2)));1;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) <=> (ref0 in Junction)));10
this/inv3;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . ref0)) <=> (ref0 in Exit)));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));7
this/inv6;(all ref0:(one Track)|(one (ref0 . (Track <: signals))));1;(all ref0:(one Entry)|(some ref1:(one Speed)|(ref1 in (ref0 . (Track <: signals)))));6
this/inv5;(all ref0:(one Track),ref1:(one Track),ref2:(one Track)|(((ref0 in (ref1 . (^ (Track <: succs)))) && (ref0 in (ref2 . (^ (Track <: succs))))) <=> (ref0 in Junction)));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));11
this/inv10;(all ref0:(one Track)|(some ref1:(one Semaphore)|((Junction in (ref0 . (^ (Track <: succs)))) => (ref1 in (ref0 . (Track <: signals))))));1;(all ref0:(one Track)|((some ref1:(one Junction)|(ref1 in (ref0 . (Track <: succs)))) => (some ref2:(one Semaphore)|(ref2 in (ref0 . (Track <: signals))))));10
this/inv1;(lone ref0:(one Entry),ref1:(one Exit)|(ref0 in (Track . (Track <: succs))));1;(some ref0:(one Entry),ref1:(one Exit)|((ref0 + ref1) in Track));8
this/inv5;(all ref0:(one Track),ref1:(one Track),ref2:(one Track)|(((ref0 in (ref1 . (^ (Track <: succs)))) && (ref0 in (ref2 . (^ (Track <: succs)))) && (ref2 in (ref1 . (^ (Track <: succs))))) <=> (ref0 in Junction)));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));15
this/inv1;(lone ref0:(one Entry),ref1:(one Exit)|((ref0 in (Track . (Track <: succs))) || (ref1 in (Track . (Track <: succs)))));1;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) || (ref1 in Track)));8
this/inv8;(all ref0:(one Entry),ref1:(one Exit)|((ref0 in ((^ (Track <: succs)) . ref1)) && (ref1 in (ref0 . (^ (Track <: succs))))));1;(all ref0:(one Entry),ref1:(one Exit)|((ref0 = ref1) || (ref1 in (ref0 . (^ (Track <: succs))))));11
this/inv9;(all ref0:(one Track)|(((ref0 . (^ (Track <: succs))) in Junction) => ((ref0 . (Track <: signals)) in Semaphore)));1;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => ((ref0 . (Track <: signals)) in (Signal - Semaphore))));8
this/inv1;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in (Track . (Track <: succs))) || (ref1 in (Track . (Track <: succs)))));1;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) || (ref1 in Track)));8
this/inv8;(all ref0:(one Entry)|(Junction !in (ref0 . (^ (Track <: succs)))));1;(all ref0:(one Entry),ref1:(one (Exit - ref0))|(ref1 in (ref0 . (^ (Track <: succs)))));7
this/inv6;(all ref0:(one Track)|((one (ref0 . (Track <: signals))) <=> (ref0 in Entry)));1;(all ref0:(one Entry)|(some ref1:(one Speed)|(ref1 in (ref0 . (Track <: signals)))));10
this/inv5;(all ref0:(one Track),ref1:(one Track),ref2:(one Track)|(((ref0 in (ref1 . (^ (Track <: succs)))) && (ref0 in (ref2 . (^ (Track <: succs)))) && (ref2 in (ref1 . (Track <: succs)))) <=> (ref0 in Junction)));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));14
this/inv4;(all ref0:(one Track),ref1:(one Track)|((ref1 in (ref0 . (Track <: succs))) => (ref1 !in Entry)));1;(all ref0:(one Track)|((no (ref0 . (~ (Track <: succs)))) <=> (ref0 in Entry)));13
this/inv9;(all ref0:(one Track),ref1:(one Track)|(((((ref0 . (^ (Track <: succs))) in Junction) && (ref1 in (ref0 . (^ (Track <: succs))))) => ((ref0 . (Track <: signals)) in Semaphore)) || ((ref1 . (Track <: signals)) in Semaphore)));1;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => ((ref0 . (Track <: signals)) in (Signal - Semaphore))));22
this/inv9;(all ref0:(one Signal),ref1:(one Track)|((Junction !in (ref1 . (^ (Track <: succs)))) => ((ref0 !in (ref1 . (Track <: signals))) && (ref0 in Semaphore))));1;(all ref0:(one Semaphore),ref1:(one Track)|((no ((ref1 . (Track <: succs)) & Junction)) => (ref0 !in (ref1 . (Track <: signals)))));14
this/inv4;(some ref0:(one Track),ref1:(one Track)|((ref1 in (ref0 . (Track <: succs))) => (ref0 in Entry)));1;(all ref0:(one Track)|((no (ref0 . (~ (Track <: succs)))) <=> (ref0 in Entry)));9
this/inv5;(all ref0:(one Track),ref1:(one Track),ref2:(one Track)|(((ref0 !in (ref0 . (^ (Track <: succs)))) && (ref0 in (ref1 . (^ (Track <: succs)))) && (ref0 in (ref2 . (^ (Track <: succs)))) && (ref2 in (ref1 . (Track <: succs)))) <=> (ref0 in Junction)));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));20
this/inv6;(all ref0:(one Track)|((one ((ref0 . (Track <: signals)) & Speed)) <=> (ref0 in Entry)));1;(all ref0:(one Entry)|(some ((ref0 . (Track <: signals)) & Speed)));8
this/inv5;(all ref0:(one Junction)|((# (ref0 . (~ (Track <: succs)))) > 1));1;(all ref0:(one Track)|(((# (ref0 . (~ (Track <: succs)))) > 1) <=> (ref0 in Junction)));6
this/inv5;(Junction = ((Track - Exit) - Entry));1;(Junction = (Track - {ref0:(one Track)|(lone ((Track <: succs) . ref0))}));8
this/inv5;(all ref0:(one Track),ref1:(one Track),ref2:(one Track)|(((ref0 !in (ref0 . (^ (Track <: succs)))) && (ref0 in (ref2 . (Track <: succs))) && (ref2 in (ref1 . (Track <: succs)))) <=> (ref0 in Junction)));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));17
this/inv4;(all ref0:(one Track),ref1:(one Track)|(((ref0 != ref1) && (ref1 in (ref0 . (Track <: succs)))) => (ref0 in Entry)));1;(all ref0:(one Track)|((no (ref0 . (~ (Track <: succs)))) <=> (ref0 in Entry)));13
this/inv10;(all ref0:(one Track),ref1:(one Track)|((ref1 in (ref0 . (Track <: succs))) => (some ((ref0 . (Track <: signals)) & Semaphore))));1;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (some ((ref0 . (Track <: signals)) & Semaphore))));7
this/inv9;(all ref0:(one Junction),ref1:(one Semaphore),ref2:(one Track),ref3:(one Track)|(((ref0 !in (ref2 . (^ (Track <: succs)))) && (ref3 in (ref2 . (^ (Track <: succs))))) => ((ref1 !in (ref2 . (Track <: signals))) && (ref1 !in (ref3 . (Track <: signals))))));1;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));25
this/inv5;(all ref0:(one Track)|(((ref0 in (Track . (Track <: succs))) && (ref0 in (Track . (^ (Track <: succs))))) <=> (ref0 in Junction)));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));12
this/inv5;(all ref0:(one Junction)|(((# (ref0 . (~ (Track <: succs)))) > 1) <=> (ref0 in Junction)));1;(all ref0:(one Track)|(((# (ref0 . (~ (Track <: succs)))) > 1) <=> (ref0 in Junction)));2
this/inv5;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref1 != ref2) && (ref1 in (ref0 & (Track . (Track <: succs)))) && (ref2 in (ref0 & (Track . (Track <: succs)))))) <=> (ref0 in Junction)));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref1 != ref2) && ((ref1 -> ref0) in (Track <: succs)) && ((ref2 -> ref0) in (Track <: succs)))) <=> (ref0 in Junction)));14
this/inv6;(all ref0:(one Track)|((ref0 in Entry) => (one ((ref0 . (Track <: signals)) & Speed))));1;(all ref0:(one Track)|((ref0 in Entry) => (some ((ref0 . (Track <: signals)) & Speed))));4
this/inv5;(Junction = {ref0:(one Track)|(some ((Track <: succs) . ref0))});1;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});5
this/inv4;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . ref0)) <=> (ref0 in Entry)));1;(all ref0:(one Track)|((ref0 !in (Track . (Track <: succs))) <=> (ref0 in Entry)));4
this/inv10;(all ref0:(one Semaphore),ref1:(one Track),ref2:(one Track)|((ref2 in (ref1 . (Track <: succs))) => (ref0 in (ref1 . (Track <: signals)))));1;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (ref0 in ((Track <: signals) . Semaphore))));10
this/inv10;(all ref0:(one Junction),ref1:(one Track),ref2:(one Track)|(some ref3:(one Semaphore)|(((ref0 in (ref1 . (^ (Track <: succs)))) && (ref0 in (ref2 . (^ (Track <: succs)))) && (ref2 in (ref1 . (^ (Track <: succs))))) => (ref3 in (ref1 . (Track <: signals))))));1;(all ref0:(one Junction),ref1:(one Track)|(some ref2:(one Semaphore)|((ref0 in (ref1 . (Track <: succs))) => (ref2 in (ref1 . (Track <: signals))))));23
this/inv5;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref1 != ref2) && (ref1 in (ref0 & (Track . (Track <: succs)))) && (ref2 in (ref0 & (Track . (Track <: succs)))))) => (ref0 in Junction)));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref1 != ref2) && ((ref1 -> ref0) in (Track <: succs)) && ((ref2 -> ref0) in (Track <: succs)))) <=> (ref0 in Junction)));16
this/inv9;(all ref0:(one Junction),ref1:(one Track)|(((! ((ref1 -> ref0) in (Track <: succs))) => (! (some ref2:(one Semaphore)|((ref1 -> ref2) in (Track <: signals))))) || (no Junction)));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|((ref0 -> ref1) in (Track <: succs)))) => (! (some ref2:(one Semaphore)|((ref0 -> ref2) in (Track <: signals))))));13
this/inv10;(all ref0:(one Signal),ref1:(one Track),ref2:(one Track)|((ref2 in (ref1 . (Track <: succs))) => ((ref0 in (ref1 . (Track <: signals))) && (ref0 in Semaphore))));1;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (ref0 in ((Track <: signals) . Semaphore))));14
this/inv6;(all ref0:(one Track)|((ref0 in Entry) <=> (some ((ref0 . (Track <: signals)) & Speed))));1;(all ref0:(one Track)|((ref0 in Entry) => (some ((ref0 . (Track <: signals)) & Speed))));4
this/inv10;(all ref0:(one Signal),ref1:(one Track),ref2:(one Track)|((ref2 in (ref1 . (Track <: succs))) => ((ref0 in (ref1 . (Track <: signals))) => (ref0 in Semaphore))));1;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (ref0 in ((Track <: signals) . Semaphore))));14
this/inv5;(all ref0:(one Track)|(some ref1:(one Track),ref2:(one Track)|(((ref0 != ref1) && (ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref1 . (Track <: succs)))) <=> (ref0 in Junction))));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));14
this/inv1;(all ref0:(one Track)|((ref0 in Entry) || (ref0 in Exit) || (some ((ref0 . (Track <: succs)) & Entry)) || (some ((ref0 . (Track <: succs)) & Exit))));1;((some (Entry & Track)) && (some (Exit & Track)));17
this/inv4;(all ref0:(one Entry)|(no (ref0 . (^ (~ (Track <: succs))))));1;(all ref0:(one Track)|((no (ref0 . (~ (Track <: succs)))) <=> (ref0 in Entry)));7
this/inv5;(all ref0:(one Track),ref1:(one Track),ref2:(one Track)|((! disj[ref0,ref1,ref2]) || (((ref0 !in (ref0 . (Track <: succs))) && (ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs)))) <=> (ref0 in Junction))));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));20
this/inv3;(all ref0:(one (Track - (Track . (Track <: succs))))|(ref0 in Exit));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));7
this/inv4;(all ref0:(one Track)|(no ((ref0 . (Track <: succs)) & Entry)));1;(Entry = {ref0:(one Track)|(no ((Track <: succs) . ref0))});8
this/inv10;(all ref0:(one Junction),ref1:(one ((Track <: succs) . ref0))|(some (ref1 . (Track <: signals))));1;(all ref0:(one ((Track <: succs) . Junction))|(some ((ref0 . (Track <: signals)) & Semaphore)));7
this/inv5;(all ref0:(one Track)|((ref0 !in Junction) => ((no ((Track <: succs) . ref0)) && (one ((Track <: succs) . ref0)))));1;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});14
this/inv5;(all ref0:(one Track)|(some ref1:(one Track),ref2:(one Track)|(((ref0 != ref1) && (ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs)))) <=> (ref0 in Junction))));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));12
this/inv10;(all ref0:(one Junction),ref1:(one Signal),ref2:(one ((Track <: succs) . ref0))|((ref1 in (ref2 . (Track <: signals))) && (ref1 in Semaphore)));1;(all ref0:(one Junction),ref1:(one ((Track <: succs) . ref0))|(some ref2:(one Signal)|((ref2 in (ref1 . (Track <: signals))) && (ref2 in Semaphore))));12
this/inv4;(all ref0:(one Track),ref1:(one (Track - ref0))|((ref0 in Entry) => (ref0 !in (ref1 . (Track <: succs)))));1;(all ref0:(one Track)|((all ref1:(one Track)|(ref0 !in (ref1 . (Track <: succs)))) <=> (ref0 in Entry)));12
this/inv4;(all ref0:(one Track)|(Entry !in (ref0 . (Track <: succs))));1;(Entry = {ref0:(one Track)|(no ((Track <: succs) . ref0))});7
this/inv3;(all ref0:(one (Track - (Track . (Track <: succs))))|(Exit in ref0));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));9
this/inv5;(all ref0:(one Track),ref1:(one Track),ref2:(one Track)|((! disj[ref0,ref1,ref2]) || (((one (ref1 . (Track <: succs))) && (one (ref2 . (Track <: succs))) && (ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs)))) <=> (ref0 in Junction))));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));23
this/inv3;(all ref0:(one Track)|(Exit !in ((Track <: succs) . ref0)));1;(Exit = (Track - ((Track <: succs) . Track)));7
this/inv3;(all ref0:(one Track)|(some ref1:(one Track)|(all ref2:(one Track)|(((ref0 != ref2) && ((ref0 -> ref1) in (Track <: succs)) && ((ref1 -> ref2) !in (Track <: succs))) => (ref1 in Exit)))));1;((all ref0:(one Exit),ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))) && (all ref2:(one Track)|((all ref3:(one Track)|((ref2 -> ref3) !in (Track <: succs))) => (ref2 in Exit))));20
this/inv3;(all ref0:(one Track)|(Exit !in (ref0 . (Track <: succs))));1;(Exit = (Track - ((Track <: succs) . Track)));7
this/inv4;(all ref0:(one (Track - Entry))|(Entry !in (ref0 . (Track <: succs))));1;(Entry = {ref0:(one Track)|(no ((Track <: succs) . ref0))});7
this/inv9;((all ref0:(one Junction),ref1:(one Track)|((! ((ref1 -> ref0) in (Track <: succs))) => (! (some ref2:(one Semaphore)|((ref1 -> ref2) in (Track <: signals)))))) || ((no Junction) && (no Semaphore)));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|((ref0 -> ref1) in (Track <: succs)))) => (! (some ref2:(one Semaphore)|((ref0 -> ref2) in (Track <: signals))))));16
this/inv1;(some ref0:(one Entry),ref1:(one Track)|(one ref2:(one Exit)|(((ref0 -> ref1) in (Track <: succs)) && ((ref1 -> ref2) in (Track <: succs)))));1;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) && (ref1 in Track)));13
this/inv5;(all ref0:(one Track),ref1:(one Track),ref2:(one Track)|((! disj[ref0,ref1,ref2]) || ((one (ref1 . (Track <: succs))) && (one (ref2 . (Track <: succs))) && (ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs)))) || ((ref0 in Junction) <=> (ref0 in (Track . (^ (Track <: succs)))))));1;((all ref0:(one Track),ref1:(one Track),ref2:(one Track)|((! disj[ref1,ref2]) || (((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs)))) => (ref0 in Junction)))) && (all ref3:(one Junction)|((# ((Track <: succs) . ref3)) > 1)));29
this/inv9;(all ref0:(one Track)|((Junction !in (ref0 . (Track <: succs))) => (no ref1:(one Semaphore)|(ref1 in (ref0 . (Track <: signals))))));1;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => (! (some ref1:(one Semaphore)|(ref1 in (ref0 . (Track <: signals)))))));10
this/inv9;((all ref0:(one Junction),ref1:(one Track)|((! ((ref1 -> ref0) in (Track <: succs))) => (! (some ref2:(one Semaphore)|((ref1 -> ref2) in (Track <: signals)))))) || ((no (Track <: signals)) && (no Junction)));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|((ref0 -> ref1) in (Track <: succs)))) => (! (some ref2:(one Semaphore)|((ref0 -> ref2) in (Track <: signals))))));16
this/inv4;(all ref0:(one Entry)|(ref0 !in ((Track <: succs) . Entry)));1;((all ref0:(one (Track - Entry))|(some ((Track <: succs) . ref0))) && (no ((Track <: succs) . Entry)));8
this/inv3;(all ref0:(one Track)|(((# (ref0 . (Track <: succs))) = 0) => (ref0 in (Exit & Track))));1;(all ref0:(one Track)|(((# (ref0 . (Track <: succs))) = 0) <=> (ref0 in Exit)));6
this/inv9;((some Junction) implies (all ref0:(one Junction),ref1:(one Track)|((! ((ref1 -> ref0) in (Track <: succs))) => (! (some ref2:(one Semaphore)|((ref1 -> ref2) in (Track <: signals)))))) else (no (Track <: signals)));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|((ref0 -> ref1) in (Track <: succs)))) => (! (some ref2:(one Semaphore)|((ref0 -> ref2) in (Track <: signals))))));13
this/inv3;((no (Exit . (Track <: succs))) && (Exit = (Track - (Track . (Track <: succs)))));1;((no (Exit . (Track <: succs))) && (Exit = (Track - {ref0:(one Track)|(some (ref0 . (Track <: succs)))})));4
this/inv9;((Junction . (Track <: succs)) !in (Semaphore . (Track <: signals)));1;(((Track <: signals) . Semaphore) in ((Track <: succs) . Junction));10
this/inv5;(all ref0:(one Track)|((ref0 in Junction) => (some (((Track <: succs) . (Track <: succs)) . ref0))));1;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});11
this/inv3;(all ref0:(one Track)|((ref0 . (Track <: succs)) !in Exit));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));7
this/inv5;(all ref0:(one Track)|((ref0 in Junction) => (some ref1:(one Track),ref2:(one Track)|((ref1 != ref2) && ((ref1 -> ref0) in (Track <: succs)) && ((ref2 -> ref0) in (Track <: succs))))));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref1 != ref2) && ((ref1 -> ref0) in (Track <: succs)) && ((ref2 -> ref0) in (Track <: succs)))) <=> (ref0 in Junction)));14
this/inv10;(all ref0:(one Junction),ref1:(one Track)|(some ref2:(one Semaphore)|((ref0 in ((Track <: succs) . ref1)) => (ref2 in (ref1 . (Track <: signals))))));1;(all ref0:(one Junction),ref1:(one Track)|(some ref2:(one Semaphore)|((ref0 in (ref1 . (Track <: succs))) => (ref2 in (ref1 . (Track <: signals))))));8
this/inv9;(all ref0:(one Track)|((some (Junction <: (ref0 . (Track <: succs)))) => (no ((ref0 . (Track <: signals)) & Semaphore))));1;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => (no ((ref0 . (Track <: signals)) & Semaphore))));8
this/inv9;(all ref0:(one Junction),ref1:(one ((Track <: succs) . ref0))|(some ref2:(one Semaphore)|(ref2 in (ref1 . (Track <: signals)))));1;(((Track <: signals) . Semaphore) in ((Track <: succs) . Junction));9
this/inv4;(all ref0:(one Entry)|(ref0 !in (Entry . (Track <: succs))));1;(all ref0:(one Track)|((ref0 !in (Track . (Track <: succs))) <=> (ref0 in Entry)));8
this/inv1;(some ref0:(one Entry),ref1:(one Exit),ref2:(one Track)|(((ref0 -> ref2) in (Track <: succs)) && ((ref2 -> ref1) in (Track <: succs))));1;(some ref0:(one Entry),ref1:(one Exit)|((ref0 in Track) && (ref1 in Track)));13
this/inv4;(all ref0:(one Track)|(no (ref0 & (Track . (Track <: succs)))));1;(all ref0:(one Track)|((no (ref0 & (Track . (Track <: succs)))) <=> (ref0 in Entry)));6
this/inv9;((Track - (Junction . (Track <: succs))) !in (Semaphore . (Track <: signals)));1;(no (((Track - ((Track <: succs) . Junction)) . (Track <: signals)) :> Semaphore));9
this/inv4;(all ref0:(one Track)|((none in ((Track <: succs) . ref0)) <=> (ref0 in Entry)));1;(all ref0:(one Track)|((no ((Track <: succs) . ref0)) <=> (ref0 in Entry)));5
this/inv3;(none = Exit);1;(Exit = (Track - ((Track <: succs) . Track)));6
this/inv9;(all ref0:(one Track)|((some ((ref0 . (Track <: succs)) & Junction)) => (no ((ref0 . (Track <: signals)) & Semaphore))));1;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => (no ((ref0 . (Track <: signals)) & Semaphore))));4
this/inv9;((Track - ((Track <: succs) . Junction)) !in ((Track <: signals) . Semaphore));1;(no (((Track - ((Track <: succs) . Junction)) . (Track <: signals)) :> Semaphore));5
this/inv9;(all ref0:(one Junction),ref1:(one ((Track <: succs) . ref0))|(no ref2:(one Semaphore)|(ref2 in (ref1 . (Track <: signals)))));1;(((Track <: signals) . Semaphore) in ((Track <: succs) . Junction));9
this/inv8;(all ref0:(one Track)|((ref0 in Exit) => (ref0 in (Entry . (^ (Track <: succs))))));1;(all ref0:(one Entry)|(Exit in (ref0 + (ref0 . (^ (Track <: succs))))));10
this/inv4;(Exit = (Track - {ref0:(one Track)|(no ((Track <: succs) . ref0))}));1;(Entry = (Track - {ref0:(one Track)|(some ((Track <: succs) . ref0))}));6
this/inv9;(all ref0:(one Semaphore),ref1:(one Track)|((some ref2:(one Junction)|(ref2 in (ref1 . (Track <: succs)))) <=> (ref0 !in (ref1 . (Track <: signals)))));1;(all ref0:(one Semaphore),ref1:(one Track)|((no ((ref1 . (Track <: succs)) & Junction)) => (ref0 !in (ref1 . (Track <: signals)))));12
this/inv4;(Entry = (Track - {ref0:(one Track)|(no ((Track <: succs) . ref0))}));1;(Entry = (Track - {ref0:(one Track)|(some ((Track <: succs) . ref0))}));4
this/inv8;((Entry = Exit) || (Exit in (Entry . (^ (Track <: succs)))));1;(all ref0:(one Entry)|(Exit in (ref0 . (* (Track <: succs)))));9
this/inv9;(((Track <: succs) . Junction) in ((Track <: signals) . Semaphore));1;(((Track <: signals) . Semaphore) in ((Track <: succs) . Junction));6
this/inv8;(all ref0:(one Entry),ref1:(one Exit)|(Exit in (Entry . (^ (Track <: succs)))));1;(all ref0:(one Entry)|(Exit in (ref0 . (* (Track <: succs)))));7
this/inv4;(all ref0:(one Entry)|(no ref1:(one Track)|(ref0 in (ref1 . (Track <: succs)))));1;(all ref0:(one Track)|((! (some ref1:(one Track)|(ref0 in (ref1 . (Track <: succs))))) <=> (ref0 in Entry)));9
this/inv3;(all ref0:(one Exit),ref1:(one (Track - ref0))|((ref0 -> ref1) !in (Track <: succs)));1;(all ref0:(one Track)|((all ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))) <=> (ref0 in Exit)));8
this/inv4;(all ref0:(one Track)|(no ref1:(one Track)|((ref0 in Entry) => (ref0 in (ref1 . (Track <: succs))))));1;(Entry = {ref0:(one Track)|(no ((Track <: succs) . ref0))});12
this/inv9;(all ref0:(one Junction)|(no (((ref0 . (~ (Track <: succs))) . (Track <: signals)) & Semaphore)));1;(no (((Track - ((Track <: succs) . Junction)) . (Track <: signals)) :> Semaphore));8
this/inv1;(some ref0:(one Track)|((one ((Track <: succs) . ref0)) && (one (ref0 . (Track <: succs)))));1;((some Entry) && (some Exit));13
this/inv5;(all ref0:(one Track),ref1:(one Track),ref2:(one Track)|(((ref0 != ref1) && (ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2)) <=> (ref0 in Junction)));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));9
this/inv1;(some ref0:(one Track)|((lone ((Track <: succs) . ref0)) && (lone (ref0 . (Track <: succs)))));1;((some Entry) && (some Exit));13
this/inv1;(all ref0:(one Track)|(lone ref1:(one Entry),ref2:(one Exit)|((ref1 in (ref0 . (Track <: succs))) && (ref2 in (ref0 . (Track <: succs))))));1;(some ref0:(one Track)|((some ref1:(one Track)|(ref1 in Exit)) && (ref0 in Entry)));13
this/inv3;(all ref0:(one Track)|(((# (ref0 . (Track <: succs))) = 0) && (ref0 in Exit)));1;(all ref0:(one Track)|(((# (ref0 . (Track <: succs))) = 0) <=> (ref0 in Exit)));4
this/inv8;(all ref0:(one Track)|((one ((ref0 . (^ (Track <: succs))) & Exit)) <=> (ref0 in Entry)));1;(all ref0:(one Entry)|(((ref0 + (ref0 . (^ (Track <: succs)))) & Exit) = Exit));11
this/inv3;(all ref0:(one Track)|(((# (ref0 . (Track <: succs))) = 0) && (Exit in ref0)));1;(all ref0:(one Track)|(((# (ref0 . (Track <: succs))) = 0) <=> (ref0 in Exit)));6
this/inv6;(all ref0:(one Entry)|((ref0 . (Track <: signals)) in Signal));1;(all ref0:(one Entry)|(some ref1:(one Speed)|(ref1 in (ref0 . (Track <: signals)))));5
this/inv8;(all ref0:(one Entry),ref1:(one Exit)|((ref1 in (ref0 . (^ (Track <: succs)))) && (ref1 in (Track . (^ (Track <: succs))))));1;(all ref0:(one Entry),ref1:(one (Exit - ref0))|(ref1 in (ref0 . (^ (Track <: succs)))));11
this/inv6;(all ref0:(one Entry)|((one (ref0 . (Track <: signals))) && ((ref0 . (Track <: signals)) in Signal)));1;(all ref0:(one Entry)|(some ref1:(one Speed)|(ref1 in (ref0 . (Track <: signals)))));10
this/inv5;(all ref0:(one Track)|((all ref1:(one Track),ref2:(one Track)|(((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs)))) => (ref1 != ref2))) <=> (ref0 in Junction)));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));9
this/inv3;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) = 0) && (Exit in ref0)));1;(all ref0:(one Track)|(((# (ref0 . (Track <: succs))) = 0) <=> (ref0 in Exit)));8
this/inv8;(all ref0:(one Entry),ref1:(one Exit)|((ref1 in (ref0 . (^ (Track <: succs)))) && (ref1 in ((Track . (^ (Track <: succs))) - Exit))));1;(all ref0:(one Entry),ref1:(one (Exit - ref0))|(ref1 in (ref0 . (^ (Track <: succs)))));13
this/inv8;(all ref0:(one Track)|((ref0 in Entry) => (lone ((ref0 . (^ (Track <: succs))) & Exit))));1;(all ref0:(one Entry)|(((ref0 + (ref0 . (^ (Track <: succs)))) & Exit) = Exit));11
this/inv9;(all ref0:(one Semaphore),ref1:(one Track)|((some ref2:(one Junction)|(ref2 !in (ref1 . (Track <: succs)))) <=> (ref0 !in (ref1 . (Track <: signals)))));1;(all ref0:(one Semaphore),ref1:(one Track)|((no ((ref1 . (Track <: succs)) & Junction)) => (ref0 !in (ref1 . (Track <: signals)))));12
this/inv8;(all ref0:(one Entry),ref1:(one Exit)|((ref0 != ref1) && (ref1 in (ref0 . (^ (Track <: succs)))) && (ref1 in ((Track . (^ (Track <: succs))) - Exit))));1;(all ref0:(one Entry),ref1:(one Exit)|((ref0 != ref1) => (ref1 in (ref0 . (^ (Track <: succs))))));14
this/inv8;(Exit in (Entry . (Track <: succs)));1;(all ref0:(one Entry)|(Exit in (ref0 . (* (Track <: succs)))));4
this/inv9;(all ref0:(one Semaphore),ref1:(one Track)|((all ref2:(one Junction)|(ref2 !in (ref1 . (Track <: succs)))) <=> (ref0 !in (ref1 . (Track <: signals)))));1;(all ref0:(one Semaphore),ref1:(one Track)|((no ((ref1 . (Track <: succs)) & Junction)) => (ref0 !in (ref1 . (Track <: signals)))));12
this/inv3;(all ref0:(one Exit)|(no (ref0 . (* (Track <: succs)))));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));7
this/inv3;((all ref0:(one Track)|((no (ref0 . (Track <: succs))) => (ref0 in Exit))) && (all ref1:(one Track)|(ref1 !in (ref1 . (Track <: succs)))));1;((all ref0:(one Track)|((no (ref0 . (Track <: succs))) => (ref0 in Exit))) && (all ref1:(one Exit)|(no (ref1 . (Track <: succs)))));7
this/inv8;(all ref0:(one Entry),ref1:(one Exit)|((ref1 in (ref0 . (^ (Track <: succs)))) && (ref1 in ((Track . (^ (Track <: succs))) - Exit)) && (Entry != Exit)));1;(all ref0:(one Entry),ref1:(one (Exit - ref0))|(ref1 in (ref0 . (^ (Track <: succs)))));16
this/inv8;(all ref0:(one Track)|((ref0 in Entry) => (some ((ref0 . (^ (Track <: succs))) & Exit))));1;(all ref0:(one Entry)|(((ref0 + (ref0 . (^ (Track <: succs)))) & Exit) = Exit));11
this/inv3;(all ref0:(one (((Exit & Track) - Junction) - Entry))|(no (ref0 . (Track <: succs))));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));6
this/inv9;(all ref0:(one Junction),ref1:(one Semaphore),ref2:(one Track)|((ref0 !in (ref2 . (Track <: succs))) => (ref1 !in ((ref2 . (Track <: succs)) . (Track <: signals)))));1;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));12
this/inv9;(all ref0:(one Track)|((Junction !in (ref0 . (Track <: succs))) => ((ref0 . (Track <: signals)) !in Semaphore)));1;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));8
this/inv3;(all ref0:(one (Exit & Track))|((# (ref0 . (Track <: succs))) = 0));1;(all ref0:(one Track)|(((# (ref0 . (Track <: succs))) = 0) <=> (ref0 in Exit)));6
this/inv4;(all ref0:(one Track)|(! (some ref1:(one Track)|(((ref1 -> ref0) in (Track <: succs)) => (ref0 in Entry)))));1;(all ref0:(one Track)|((all ref1:(one Track)|((ref1 -> ref0) !in (Track <: succs))) <=> (ref0 in Entry)));9
this/inv3;(all ref0:(one (Exit & Track))|((# ((Track <: succs) . ref0)) = 0));1;(Exit = (Track - ((Track <: succs) . Track)));8
this/inv1;(all ref0:(one Track)|(one ref1:(one Entry),ref2:(one Exit)|(((ref0 -> ref1) in (Track <: succs)) && ((ref0 -> ref2) in (Track <: succs)))));1;(some ref0:(one Track)|((some ref1:(one Track)|(ref1 in Exit)) && (ref0 in Entry)));13
this/inv9;(all ref0:(one Junction),ref1:(one Semaphore),ref2:(one Track)|((ref0 in (ref2 . (Track <: succs))) => (ref1 in (ref2 . (Track <: signals)))));1;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));14
this/inv4;((all ref0:(one Track)|(! (some ref1:(one Track)|(((ref1 -> ref0) in (Track <: succs)) => (ref0 in Entry))))) && (all ref2:(one Track)|(some ref3:(one Track)|(((ref3 -> ref2) in (Track <: succs)) => (! (ref2 in Entry))))));1;((all ref0:(one Entry),ref1:(one Track)|((ref1 -> ref0) !in (Track <: succs))) && (all ref2:(one Track)|((all ref3:(one Track)|((ref3 -> ref2) !in (Track <: succs))) => (ref2 in Entry))));18
this/inv9;(all ref0:(one Junction),ref1:(one Semaphore),ref2:(one Track)|((ref0 !in (ref2 . (^ (Track <: succs)))) <=> (ref1 !in (ref2 . (Track <: signals)))));1;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));13
this/inv3;(all ref0:(one Exit)|((no (ref0 . (Track <: succs))) && (ref0 in Track)));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));6
this/inv3;(all ref0:(one Exit)|(ref0 in Track));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));9
this/inv9;(all ref0:(one Junction),ref1:(one Semaphore),ref2:(one Track)|((ref0 in (ref2 . (Track <: succs))) <=> (ref1 in (ref2 . (Track <: signals)))));1;(((Track <: signals) . Semaphore) in ((Track <: succs) . Junction));15
this/inv9;(all ref0:(one Junction),ref1:(one Semaphore),ref2:(one Track)|((ref0 !in (Track . (^ (Track <: succs)))) <=> (ref1 !in (Track . (Track <: signals)))));1;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));13
this/inv3;(((Track <: succs) . Exit) = none);1;(Exit = (Track - ((Track <: succs) . Track)));6
this/inv9;(all ref0:(one Junction),ref1:(one Semaphore),ref2:(one Track)|((ref2 in (ref0 . (^ (Track <: succs)))) => ((ref2 -> ref1) !in (Track <: signals))));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|(ref1 in (ref0 . (Track <: succs))))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));14
this/inv3;(all ref0:(one (Track - Exit))|(some ((Track <: succs) . ref0)));1;(Exit = (Track - ((Track <: succs) . Track)));8
this/inv9;(all ref0:(one Junction),ref1:(one Semaphore),ref2:(one Track)|((ref0 !in (Track . (^ (Track <: succs)))) => (ref1 !in (Track . (Track <: signals)))));1;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));11
this/inv8;(all ref0:(one Entry),ref1:(one Exit)|((ref0 != ref1) && (ref0 in (ref1 . (^ (Track <: succs))))));1;(all ref0:(one Entry),ref1:(one Exit)|((ref0 != ref1) => (ref1 in (ref0 . (^ (Track <: succs))))));10
this/inv9;(all ref0:(one Junction),ref1:(one Semaphore),ref2:(one Track)|((ref2 !in (ref0 . (^ (Track <: succs)))) => ((ref2 -> ref1) !in (Track <: signals))));1;(all ref0:(one Track)|((all ref1:(one Junction)|(ref1 !in (ref0 . (Track <: succs)))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));13
this/inv3;(all ref0:(one (Track - Exit))|((# ((Track <: succs) . ref0)) > 0));1;(all ref0:(one Track)|((0 > (# (ref0 . (Track <: succs)))) <=> (ref0 in Exit)));10
this/inv8;(all ref0:(one Track),ref1:(one Track)|((ref0 in Entry) && (ref1 in (ref0 . (^ (Track <: succs)))) && (ref1 in Exit)));1;(all ref0:(one Entry),ref1:(one (Exit - ref0))|(ref1 in (ref0 . (^ (Track <: succs)))));11
this/inv8;(all ref0:(one Track)|((ref0 in Entry) && (ref0 in Exit)));1;((Entry -> Exit) in (* (Track <: succs)));10
this/inv3;(all ref0:(one (Track - Exit))|((# (ref0 . (Track <: succs))) > 0));1;(all ref0:(one Track)|((0 > (# (ref0 . (Track <: succs)))) <=> (ref0 in Exit)));8
this/inv10;(all ref0:(one Junction),ref1:(one Semaphore),ref2:(one Track)|((ref0 in (ref2 . (Track <: succs))) <=> (ref1 in (ref2 . (Track <: signals)))));1;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (ref0 in ((Track <: signals) . Semaphore))));12
this/inv10;(all ref0:(one Junction),ref1:(one Semaphore),ref2:(one Track)|((ref0 in (ref2 . (Track <: succs))) => ((ref2 -> ref1) in (Track <: signals))));1;(all ref0:(one Junction),ref1:(one Track)|(some ref2:(one Semaphore)|((ref0 in (ref1 . (Track <: succs))) => (ref2 in (ref1 . (Track <: signals))))));10
this/inv5;(all ref0:(one Junction)|(some ref1:(one Track),ref2:(one Track)|(((ref1 -> ref0) in (Track <: succs)) && ((ref2 -> ref1) in (Track <: succs)))));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref1 != ref2) && ((ref1 -> ref0) in (Track <: succs)) && ((ref2 -> ref0) in (Track <: succs)))) <=> (ref0 in Junction)));15
this/inv5;(all ref0:(one Junction)|(some ref1:(one Track),ref2:(one Track)|(((ref1 -> ref0) in (Track <: succs)) && ((ref2 -> ref1) in (Track <: succs)) && disj[ref1,ref2])));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|(((ref0 -> ref1) in (~ (Track <: succs))) && ((ref0 -> ref2) in (~ (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));18
this/inv3;((all ref0:(one Exit)|((ref0 !in Entry) && (ref0 !in Junction))) && (all ref1:(one Track)|(((# (ref1 . (Track <: succs))) = 0) => (ref1 in Exit))));1;((all ref0:(one Track)|((ref0 in Exit) => ((# (ref0 . (Track <: succs))) = 0))) && (all ref1:(one Track)|(((# (ref1 . (Track <: succs))) = 0) => (ref1 in Exit))));17
this/inv5;(all ref0:(one Junction)|(some ref1:(one Track),ref2:(one Track)|(((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs)))) => (ref0 != ref2))));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));15
this/inv5;(all ref0:(one Junction)|(some ref1:(one Track),ref2:(one Track)|((ref0 != ref1) && ((ref1 -> ref0) in (Track <: succs)) && ((ref2 -> ref1) in (Track <: succs)) && disj[ref1,ref2])));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref1 != ref2) && ((ref1 -> ref0) in (Track <: succs)) && ((ref2 -> ref0) in (Track <: succs)))) <=> (ref0 in Junction)));17
this/inv5;(all ref0:(one Junction)|(some ref1:(one Track),ref2:(one Track)|((ref0 != ref2) && (ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))))));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));16
this/inv3;((all ref0:(one Exit)|(ref0 !in Entry)) && (all ref1:(one Track)|(((# (ref1 . (Track <: succs))) = 0) => (ref1 in Exit))));1;(all ref0:(one Exit),ref1:(one Track)|((no (ref0 . (Track <: succs))) && ((no (ref1 . (Track <: succs))) => (ref1 in Exit))));13
this/inv8;(all ref0:(one Track),ref1:(one Track)|((! disj[ref0,ref1]) || (((ref0 in Entry) && (ref1 in Exit)) => (ref1 in ((Track <: succs) . ref0)))));1;(all ref0:(one Track),ref1:(one Track)|((! disj[ref0,ref1]) || (((ref0 in Entry) && (ref1 in Exit)) => (ref1 in (ref0 . (^ (Track <: succs)))))));7
this/inv1;(all ref0:(one Track)|(((# ((((^ (Track <: succs)) . ref0) + (ref0 . (^ (Track <: succs)))) & Entry)) > 0) && ((# ((((^ (Track <: succs)) . ref0) + (ref0 . (^ (Track <: succs)))) & Junction)) > 0)));1;(((# Entry) > 0) && ((# Exit) > 0));23
this/inv8;((Entry . (^ (Track <: succs))) = Exit);1;(all ref0:(one Entry)|(((ref0 + (ref0 . (^ (Track <: succs)))) & Exit) = Exit));7
this/inv8;((Entry . (* (Track <: succs))) = Exit);1;(all ref0:(one Entry)|(((ref0 . (* (Track <: succs))) & Exit) = Exit));5
this/inv1;(all ref0:(one Track)|(((# ((((^ (Track <: succs)) . ref0) + (ref0 . (^ (Track <: succs)))) & Exit)) > 0) && ((# ((((^ (Track <: succs)) . ref0) + (ref0 . (^ (Track <: succs)))) & Junction)) > 0)));1;(((# Entry) > 0) && ((# Exit) > 0));25
this/inv3;(all ref0:(one Track)|(no ((Track <: succs) . ref0)));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));8
this/inv1;(all ref0:(one Track)|(((# ((((^ (Track <: succs)) . ref0) + (ref0 . (^ (Track <: succs)))) & Entry)) > 0) && ((# ((((^ (Track <: succs)) . ref0) + (ref0 . (^ (Track <: succs)))) & Exit)) > 0)));1;(((# Entry) > 0) && ((# Exit) > 0));21
this/inv5;(all ref0:(one Junction)|(some ref1:(one Track),ref2:(one Track)|((ref0 != ref1) && (ref0 != ref2) && (ref1 != ref2) && ((ref1 -> ref0) in (Track <: succs)) && ((ref2 -> ref1) in (Track <: succs)) && disj[ref1,ref2])));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref1 != ref2) && ((ref1 -> ref0) in (Track <: succs)) && ((ref2 -> ref0) in (Track <: succs)))) <=> (ref0 in Junction)));21
this/inv3;(all ref0:(one Exit)|(no (((Track <: succs) . Track) & ref0)));1;(Exit = (Track - ((Track <: succs) . Track)));8
this/inv5;((! (some ref0:(one Junction)|((ref0 -> ref0) in (Track <: succs)))) && (all ref1:(one Junction)|(some ref2:(one Track),ref3:(one Track)|((ref1 != ref2) && (ref1 != ref3) && (ref2 != ref3) && ((ref2 -> ref1) in (Track <: succs)) && ((ref3 -> ref2) in (Track <: succs)) && disj[ref2,ref3]))));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref1 != ref2) && ((ref1 -> ref0) in (Track <: succs)) && ((ref2 -> ref0) in (Track <: succs)))) <=> (ref0 in Junction)));31
this/inv1;(all ref0:(one Track)|(((# (((^ (Track <: succs)) . ref0) & Exit)) > 0) && ((# ((((^ (Track <: succs)) . ref0) + (ref0 . (^ (Track <: succs)))) & Entry)) > 0)));1;(((# Entry) > 0) && ((# Exit) > 0));20
this/inv1;(all ref0:(one Track)|(((# ((((* (Track <: succs)) . ref0) + (ref0 . (* (Track <: succs)))) & Entry)) > 0) && ((# ((((* (Track <: succs)) . ref0) + (ref0 . (* (Track <: succs)))) & Exit)) > 0)));1;(((# Entry) > 0) && ((# Exit) > 0));21
this/inv3;(all ref0:(one Exit)|(no (ref0 & (Track . (Track <: succs)))));1;(Exit = (Track - (Track . (~ (Track <: succs)))));9
this/inv4;(all ref0:(one Entry),ref1:(one Entry)|((ref0 -> ref1) !in (Track <: succs)));1;(all ref0:(one Track)|((all ref1:(one Track)|(ref0 !in (ref1 . (Track <: succs)))) <=> (ref0 in Entry)));10
this/inv9;(all ref0:(one Junction),ref1:(one Semaphore),ref2:(one (Track - Exit))|((ref0 !in (ref2 . (Track <: succs))) => (ref1 !in (ref2 . (Track <: signals)))));1;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));10
this/inv9;(all ref0:(one Track)|(! (some ref1:(one Junction)|((ref1 in (ref0 . (Track <: succs))) => (Semaphore !in (ref0 . (Track <: signals)))))));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|(ref1 in (ref0 . (Track <: succs))))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));9
this/inv4;(all ref0:(one Entry),ref1:(one Entry)|((ref0 -> ref1) in (Track <: succs)));1;(all ref0:(one Track)|((! (some ref1:(one Track)|(ref0 in (ref1 . (Track <: succs))))) <=> (ref0 in Entry)));11
this/inv1;(all ref0:(one Track)|(((# ((ref0 . (Track <: succs)) & Entry)) > 0) && ((# ((ref0 . (Track <: succs)) & Exit)) > 0)));1;(((# Entry) > 0) && ((# Exit) > 0));9
this/inv3;(all ref0:(one Exit)|(ref0 !in ((Track <: succs) . Track)));1;(Exit = (Track - ((Track <: succs) . Track)));7
this/inv9;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) || (one ((ref0 . (Track <: signals)) & Semaphore))));1;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => (no ((ref0 . (Track <: signals)) & Semaphore))));6
this/inv9;(all ref0:(one Junction),ref1:(one Semaphore),ref2:(one ((Track - Exit) - Entry))|((ref0 !in (ref2 . (Track <: succs))) => (ref1 !in (ref2 . (Track <: signals)))));1;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));10
this/inv3;((all ref0:(one Track)|(((# (ref0 . (Track <: succs))) = 0) => (ref0 in Exit))) && (all ref1:(one Exit)|(no Entry)));1;(all ref0:(one Track)|(((# (ref0 . (Track <: succs))) = 0) <=> (ref0 in Exit)));8
this/inv1;(one ref0:(one Track)|((some (((Track <: succs) . ref0) & Entry)) && (some ((ref0 . (Track <: succs)) & Exit))));1;((some (Entry & Track)) && (some (Exit & Track)));9
this/inv9;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) || (some ((ref0 . (Track <: signals)) & Semaphore))));1;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => (no ((ref0 . (Track <: signals)) & Semaphore))));6
this/inv1;(all ref0:(one Track)|(((# ((((Track <: succs) . ref0) + (ref0 . (Track <: succs))) & Entry)) > 0) && ((# ((((Track <: succs) . ref0) + (ref0 . (Track <: succs))) & Exit)) > 0)));1;(((# Entry) > 0) && ((# Exit) > 0));17
this/inv3;((all ref0:(one Track)|(((# (ref0 . (Track <: succs))) = 0) => (ref0 in Exit))) && (all ref1:(one Exit)|(ref1 !in Entry)));1;(all ref0:(one Track)|(((# (ref0 . (Track <: succs))) = 0) <=> (ref0 in Exit)));9
this/inv3;(all ref0:(one Track)|((ref0 in Exit) => (ref0 !in (Track . (Track <: succs)))));1;(Exit = (Track - (Track . (~ (Track <: succs)))));10
this/inv3;(all ref0:(one Exit)|((# (ref0 . (Track <: succs))) = 1));1;(all ref0:(one Track)|(((# (ref0 . (Track <: succs))) = 0) <=> (ref0 in Exit)));6
this/inv9;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => (some ((ref0 . (Track <: signals)) & Semaphore))));1;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => (no ((ref0 . (Track <: signals)) & Semaphore))));4
this/inv1;(all ref0:(one Track)|(((# (((^ (Track <: succs)) . ref0) & Entry)) > 0) && ((# ((ref0 . (^ (Track <: succs))) & Exit)) > 0)));1;(((# Entry) > 0) && ((# Exit) > 0));11
this/inv5;(all ref0:(one Track),ref1:(one Track),ref2:(one Track)|((! disj[ref0,ref1,ref2]) || (((ref0 in (ref1 . (^ (Track <: succs)))) && (ref0 in (ref2 . (^ (Track <: succs))))) <=> (ref0 in Junction))));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));17
this/inv1;(all ref0:(one Track)|(((# (((* (Track <: succs)) . ref0) & Entry)) > 0) && ((# ((ref0 . (* (Track <: succs))) & Exit)) > 0)));1;(((# Entry) > 0) && ((# Exit) > 0));11
this/inv5;((! (some ref0:(one Junction)|((ref0 -> ref0) in (Track <: succs)))) && (! (some ref1:(one Junction)|(lone (ref1 . (Track <: succs))))));1;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});14
this/inv9;(all ref0:(one Junction),ref1:(one Junction),ref2:(one Semaphore),ref3:(one Track)|((! disj[ref0,ref1]) || (((ref0 + ref1) !in (ref3 . (Track <: succs))) => (ref2 !in (ref3 . (Track <: signals))))));1;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));18
this/inv1;(all ref0:(one Track)|(((# ((((* (Track <: succs)) . ref0) + ref0) & Entry)) > 0) && ((# ((ref0 + (ref0 . (^ (Track <: succs)))) & Exit)) > 0)));1;(((# Entry) > 0) && ((# Exit) > 0));15
this/inv3;((all ref0:(one Track)|(((# (ref0 . (Track <: succs))) = 0) => (ref0 in Exit))) && (all ref1:(one Exit)|(ref1 !in Junction)) && (all ref2:(one Exit)|(ref2 !in Entry)));1;(all ref0:(one Track)|(((# (ref0 . (Track <: succs))) = 0) <=> (ref0 in Exit)));13
this/inv9;(all ref0:(one Semaphore),ref1:(one Track),ref2:(one (ref1 . (Track <: succs)))|((ref2 !in Junction) => (ref0 !in (ref1 . (Track <: signals)))));1;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));10
this/inv5;(! (some ref0:(one Junction)|(lone (ref0 . (Track <: succs)))));1;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});6
this/inv8;(one (Entry & Exit));1;((Entry -> Exit) in (* (Track <: succs)));6
this/inv3;(all ref0:(one (Track - Exit))|(some ref1:(one Track)|(ref1 in (ref0 . (Track <: succs)))));1;(all ref0:(one Track)|(((ref0 . (Track <: succs)) in none) <=> (ref0 in Exit)));9
this/inv9;(all ref0:(one Semaphore),ref1:(one (Signal - Junction)),ref2:(one Track)|((ref1 in (ref2 . (Track <: succs))) => (ref0 !in (ref2 . (Track <: signals)))));1;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));12
this/inv9;(all ref0:(one Semaphore),ref1:(one Track),ref2:(one (ref1 . (Track <: succs)))|((ref2 !in Junction) => (no ((ref1 . (Track <: signals)) & Semaphore))));1;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => (no ((ref0 . (Track <: signals)) & Semaphore))));13
this/inv3;((all ref0:(one Track)|(((# (ref0 . (Track <: succs))) = 0) => (ref0 in Exit))) && (all ref1:(one Exit)|(no (ref1 . (Track <: succs)))) && (all ref2:(one Exit)|(ref2 !in Junction)));1;((all ref0:(one Track)|((no (ref0 . (Track <: succs))) => (ref0 in Exit))) && (all ref1:(one Exit)|(no (ref1 . (Track <: succs)))));12
this/inv3;((all ref0:(one Track)|(ref0 !in (ref0 . (^ (Track <: succs))))) && (all ref1:(one Track)|((no (ref1 . (Track <: succs))) => (ref1 in Exit))));1;(all ref0:(one Exit),ref1:(one Track)|((no (ref0 . (Track <: succs))) && ((no (ref1 . (Track <: succs))) => (ref1 in Exit))));8
this/inv3;(all ref0:(one ((Track - Entry) - Junction))|(ref0 in Exit));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));7
this/inv5;(! (some ref0:(one Junction)|(lone (ref0 . (^ (Track <: succs))))));1;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});7
this/inv1;(all ref0:(one Track)|(((# ((((^ (Track <: succs)) . ref0) + ref0) & Entry)) > 0) && ((# ((ref0 + (ref0 . (^ (Track <: succs)))) & Exit)) > 0)));1;(((# Entry) > 0) && ((# Exit) > 0));15
this/inv5;(all ref0:(one Track)|((ref0 in (Track . (^ (Track <: succs)))) => ((# (Track . (^ (Track <: succs)))) > 1)));1;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) <=> (ref0 in Junction)));16
this/inv3;(all ref0:(one Track)|(((ref0 !in Junction) && (ref0 in Exit)) => (no (ref0 . (Track <: succs)))));1;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (Track <: succs)))));12
this/inv9;(all ref0:(one Semaphore),ref1:(one Track),ref2:(one (Track - Junction))|((ref2 in (ref1 . (Track <: succs))) => (ref0 !in (ref1 . (Track <: signals)))));1;(all ref0:(one Semaphore),ref1:(one Track)|((no ((ref1 . (Track <: succs)) & Junction)) => (ref0 !in (ref1 . (Track <: signals)))));10
this/inv5;(all ref0:(one Junction)|(! (one ((Track <: succs) . ref0))));1;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});6
this/inv4;(all ref0:(one Track),ref1:(one Track)|(((ref0 -> ref1) in (Track <: succs)) => (ref0 in Entry)));1;(all ref0:(one Track)|((! (some ref1:(one Track)|(ref0 in (ref1 . (Track <: succs))))) <=> (ref0 in Entry)));9
this/inv3;((all ref0:(one Track)|(((# (ref0 . (Track <: succs))) = 0) => (ref0 in Exit))) && (all ref1:(one Exit)|(no (ref1 . (Track <: succs)))) && (all ref2:(one Exit)|(ref2 !in Junction)) && (all ref3:(one Exit)|(ref3 !in Entry)));1;((all ref0:(one Track)|((no (ref0 . (Track <: succs))) => (ref0 in Exit))) && (all ref1:(one Exit)|(no (ref1 . (Track <: succs)))));16
this/inv5;(all ref0:(one Junction)|((# (ref0 . (^ (Track <: succs)))) > 1));1;(all ref0:(one Track)|(((# (ref0 . (~ (Track <: succs)))) > 1) <=> (ref0 in Junction)));8
this/inv5;(all ref0:(one Junction)|((ref0 in (Track . (^ (Track <: succs)))) => ((# (Track . (^ (Track <: succs)))) > 1)));1;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) <=> (ref0 in Junction)));16
this/inv3;(all ref0:(one ((Track - Entry) - Junction))|(no ((Track <: succs) . ref0)));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));8
this/inv9;(all ref0:(one Track),ref1:(one (Track - Junction))|((ref1 !in (ref0 . (Track <: succs))) => (no (ref0 . (Track <: signals)))));1;(all ref0:(one Track)|((all ref1:(one Junction)|(ref1 !in (ref0 . (Track <: succs)))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));8
this/inv3;(all ref0:(one Track)|((ref0 in Exit) => ((no (ref0 . (Track <: succs))) && (ref0 in (Track . (Track <: succs))))));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));12
this/inv5;(all ref0:(one Exit)|(one ref1:(one Track)|(ref0 in (ref1 . (Track <: succs)))));1;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});11
this/inv3;((all ref0:(one Exit)|(no (ref0 . (Track <: succs)))) && (all ref1:(one Exit)|(ref1 !in Junction)) && (all ref2:(one Exit)|(ref2 !in Entry)));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));15
this/inv1;(all ref0:(one Track)|(((# Entry) > 0) && ((# Exit) > 0)));1;(((# Entry) > 0) && ((# Exit) > 0));1
this/inv5;(all ref0:(one Junction)|(! (lone ((((Track <: succs) . ref0) & Track) - ref0))));1;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});8
this/inv3;(all ref0:(one ((Track - Entry) - Junction))|((no (ref0 . (Track <: succs))) || (ref0 in (ref0 . (Track <: succs)))));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));8
this/inv10;(all ref0:(one Track)|(((ref0 . (Track <: succs)) = Junction) => (some ((ref0 . (Track <: signals)) & Semaphore))));1;(all ref0:(one Track)|((some ((ref0 . (Track <: succs)) & Junction)) => (some ((ref0 . (Track <: signals)) & Semaphore))));5
this/inv5;((all ref0:(one Exit)|(one ref1:(one Track)|(ref0 in (ref1 . (Track <: succs))))) && (all ref2:(one Junction)|(some ref3:(one Track),ref4:(one Track)|((ref2 != ref3) && (ref2 != ref4) && (ref2 in (ref3 . (Track <: succs))) && (ref2 in (ref4 . (Track <: succs))) && (ref3 != ref4)))));1;((all ref0:(one ((Track - Junction) - Entry))|(one ref1:(one Track)|(ref0 in (ref1 . (Track <: succs))))) && (all ref2:(one Junction)|(some ref3:(one Track),ref4:(one Track)|((ref2 in (ref3 . (Track <: succs))) && (ref2 in (ref4 . (Track <: succs))) && (ref3 != ref4)))));16
this/inv9;(all ref0:(one Junction)|((ref0 -> Semaphore) !in (Track <: signals)));1;(((Track <: signals) . Semaphore) in ((Track <: succs) . Junction));11
this/inv3;(all ref0:(one ((Track - Entry) - Junction))|((no ((ref0 . (Track <: succs)) & Track)) || (ref0 in (ref0 . (Track <: succs)))));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));10
this/inv9;(all ref0:(one Junction),ref1:(one Track)|((ref0 !in ((Track <: succs) . ref1)) => (no (ref1 . (Track <: signals)))));1;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));10
this/inv9;(all ref0:(one Track)|((no (((Track <: succs) . ref0) & Junction)) => (no (ref0 . (Track <: signals)))));1;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => (no ((ref0 . (Track <: signals)) & Semaphore))));6
this/inv5;(all ref0:(one Track),ref1:(one Track),ref2:(one Track)|((! disj[ref0,ref1,ref2]) || (((ref0 in (ref1 . (^ (Track <: succs)))) && (ref0 in (ref2 . (^ (Track <: succs))))) => (ref0 in Junction))));1;((all ref0:(one Track),ref1:(one Track),ref2:(one Track)|((! disj[ref1,ref2]) || (((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs)))) => (ref0 in Junction)))) && (all ref3:(one Junction)|((# ((Track <: succs) . ref3)) > 1)));17
this/inv9;(all ref0:(one (Track - Junction))|((ref0 -> Semaphore) !in (Track <: signals)));1;(((Track <: signals) . Semaphore) in ((Track <: succs) . Junction));11
this/inv5;((all ref0:(one Exit)|(lone ref1:(one Track)|(ref0 in (ref1 . (Track <: succs))))) && (all ref2:(one Junction)|(some ref3:(one Track),ref4:(one Track)|((ref2 != ref3) && (ref2 != ref4) && (ref2 in (ref3 . (Track <: succs))) && (ref2 in (ref4 . (Track <: succs))) && (ref3 != ref4)))));1;((all ref0:(one ((Track - Junction) - Entry))|(one ref1:(one Track)|(ref0 in (ref1 . (Track <: succs))))) && (all ref2:(one Junction)|(some ref3:(one Track),ref4:(one Track)|((ref2 in (ref3 . (Track <: succs))) && (ref2 in (ref4 . (Track <: succs))) && (ref3 != ref4)))));16
this/inv1;(Exit in Track);1;(some (Entry -> Exit));5
this/inv9;(all ref0:(one Track),ref1:(one (Track - Junction))|(((ref0 -> ref1) in (Track <: succs)) => (Semaphore !in (ref0 . (Track <: signals)))));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|(ref1 in (ref0 . (Track <: succs))))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));12
this/inv10;((((Track <: succs) . Junction) -> Semaphore) in (Track <: signals));1;(((Track <: succs) . Junction) in ((Track <: signals) . Semaphore));4
this/inv9;(all ref0:(one Track)|(some ref1:(one Junction)|((ref1 !in (ref0 . (Track <: succs))) => (no (ref0 . (Track <: signals))))));1;(all ref0:(one Track)|((all ref1:(one Junction)|(ref1 !in (ref0 . (Track <: succs)))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));8
this/inv3;(all ref0:(one Track)|((some (ref0 . (Track <: succs))) => (ref0 !in Exit)));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));8
this/inv9;(all ref0:(one Track),ref1:(one Track)|((((ref0 -> ref1) in (Track <: succs)) && (ref1 !in Junction)) => (Semaphore !in (ref0 . (Track <: signals)))));1;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));15
this/inv9;(all ref0:(one Track)|(((ref0 . (Track <: succs)) != Junction) => ((ref0 . (Track <: signals)) != Semaphore)));1;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => (no ((ref0 . (Track <: signals)) & Semaphore))));8
this/inv10;(((Junction . (Track <: succs)) -> Semaphore) in (Track <: signals));1;(((Track <: succs) . Junction) in ((Track <: signals) . Semaphore));6
this/inv3;(all ref0:(one Track)|((no (ref0 . (~ (Track <: succs)))) => (ref0 in Exit)));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));5
this/inv9;(all ref0:(one Track)|(((ref0 . (Track <: succs)) != Junction) => (no ((ref0 . (Track <: signals)) & Semaphore))));1;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => (no ((ref0 . (Track <: signals)) & Semaphore))));5
this/inv9;(all ref0:(one Track),ref1:(one Track)|((! disj[ref0,ref1]) || ((((ref0 -> ref1) !in (Track <: succs)) && (ref1 !in Junction)) => (Semaphore !in (ref0 . (Track <: signals)))) || ((ref0 -> ref1) !in (Track <: succs))));1;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));25
this/inv3;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) || ((ref0 in Exit) => (ref0 in (ref0 . (Track <: succs))))));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));10
this/inv9;(all ref0:(one Junction),ref1:(one Track)|(some ref2:(one Semaphore)|((ref0 in (ref1 . (^ (Track <: succs)))) => ((ref1 -> ref2) in (Track <: signals)))));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|((ref0 -> ref1) in (Track <: succs)))) => (! (some ref2:(one Semaphore)|((ref0 -> ref2) in (Track <: signals))))));13
this/inv3;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) || ((ref0 in Exit) => (ref0 in ((Track <: succs) . ref0)))));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));10
this/inv3;((all ref0:(one Exit)|((# (ref0 . (Track <: succs))) = 0)) && (all ref1:(one Exit)|(ref1 !in Junction)));1;((all ref0:(one Exit)|((# (ref0 . (Track <: succs))) = 0)) && (all ref1:(one (Track - Exit))|(some ref2:(one Track)|(ref2 in (ref1 . (Track <: succs))))));11
this/inv9;(all ref0:(one Track)|(no ref1:(one Junction)|((ref1 in (ref0 . (Track <: succs))) => (no ref2:(one Semaphore)|(ref2 in (ref0 . (Track <: signals)))))));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|(ref1 in (ref0 . (Track <: succs))))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));9
this/inv8;(all ref0:(one Track)|((some ((ref0 . (Track <: succs)) & Entry)) => ((ref0 . (^ (Track <: succs))) = Entry)));1;(all ref0:(one Track)|((some (ref0 & Entry)) => (Exit in (ref0 . (* (Track <: succs))))));10
this/inv9;(all ref0:(one Track),ref1:(one Track)|((! disj[ref0,ref1]) || ((Junction !in (ref0 . (Track <: succs))) => (Semaphore !in (ref0 . (Track <: signals))))));1;(all ref0:(one Track)|((all ref1:(one Junction)|(ref1 !in (ref0 . (Track <: succs)))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));14
this/inv4;(all ref0:(one Track)|((ref0 in Entry) => (ref0 !in ((Track <: succs) . ref0))));1;(Entry = {ref0:(one Track)|(no ((Track <: succs) . ref0))});9
this/inv3;(all ref0:(one Exit)|((ref0 -> Track) !in (Track <: succs)));1;(Exit = (Track - ((Track <: succs) . Track)));9
this/inv8;(all ref0:(one Exit)|(ref0 in Entry));1;((Entry -> Exit) in (* (Track <: succs)));6
this/inv8;(all ref0:(one Track)|((some (ref0 & Entry)) => ((ref0 . (^ (Track <: succs))) = Entry)));1;(all ref0:(one Track)|((some (ref0 & Entry)) => (Exit in (ref0 . (* (Track <: succs))))));8
this/inv9;(all ref0:(one Track)|(Semaphore !in (ref0 . (Track <: signals))));1;(((Track <: signals) . Semaphore) in ((Track <: succs) . Junction));9
this/inv9;(all ref0:(one Semaphore),ref1:(one Track)|((ref1 -> ref0) !in (Track <: signals)));1;(((Track <: signals) . Semaphore) in ((Track <: succs) . Junction));12
this/inv8;(all ref0:(one Track)|((some ((ref0 & Entry) & Exit)) || ((some (ref0 & Entry)) => (some ((ref0 . (^ (Track <: succs))) & Exit)))));1;(all ref0:(one Track)|((some (ref0 & Entry)) => (Exit in (ref0 . (* (Track <: succs))))));16
this/inv3;(all ref0:(one Track)|((ref0 in Exit) => (ref0 !in (ref0 . (^ (Track <: succs))))));1;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (^ (Track <: succs))))));9
this/inv9;(all ref0:(one Semaphore),ref1:(one Track)|((ref1 -> ref0) in (Track <: signals)));1;(((Track <: signals) . Semaphore) in ((Track <: succs) . Junction));10
this/inv9;(all ref0:(one (Track - Exit))|((no ((ref0 . (Track <: succs)) & Junction)) => (no (ref0 . (Track <: signals)))));1;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => (no ((ref0 . (Track <: signals)) & Semaphore))));4
this/inv8;(all ref0:(one (1 . (^ (Track <: succs)))),ref1:(one Track)|((some (ref1 & Entry)) => (some (ref0 & Exit))));1;((Entry -> Exit) in (* (Track <: succs)));13
this/inv9;(all ref0:(one Track)|(((no ((ref0 . (Track <: succs)) & Junction)) => (no (ref0 . (Track <: signals)))) || (ref0 in Exit)));1;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => (no ((ref0 . (Track <: signals)) & Semaphore))));8
this/inv3;(all ref0:(one Exit)|((no (ref0 . (Track <: succs))) && (ref0 in (Track . (Track <: succs)))));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));8
this/inv10;(all ref0:(one Track)|(((ref0 . (Track <: succs)) in Junction) => (one ((ref0 . (Track <: signals)) & Semaphore))));1;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (some ((ref0 . (Track <: signals)) & Semaphore))));6
this/inv8;(all ref0:(one Track),ref1:(one (ref0 . (^ (Track <: succs))))|((some (ref0 & Entry)) => (some (ref1 & Exit))));1;(all ref0:(one Track)|((some (ref0 & Entry)) => (Exit in (ref0 . (* (Track <: succs))))));11
this/inv9;(all ref0:(one Track)|((no ((ref0 . (~ (Track <: succs))) & Junction)) => (no (ref0 . (Track <: signals)))));1;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => (no ((ref0 . (Track <: signals)) & Semaphore))));5
this/inv10;(all ref0:(one Track)|(one (((Track <: succs) . ref0) & Junction)));1;(all ref0:(one ((Track <: succs) . Junction))|(some ((ref0 . (Track <: signals)) & Semaphore)));8
this/inv4;(all ref0:(one Track)|((ref0 in Entry) => (no (ref0 . (~ (Track <: succs))))));1;(Entry = {ref0:(one Track)|(no ((Track <: succs) . ref0))});9
this/inv8;(all ref0:(one Track),ref1:(one (ref0 . (^ (Track <: succs))))|(((ref0 != ref1) && (some (ref0 & Entry))) => (some (ref1 & Exit))));1;(all ref0:(one Track)|((some (ref0 & Entry)) => (Exit in (ref0 . (* (Track <: succs))))));15
this/inv10;(all ref0:(one Junction),ref1:(one Track)|(some ref2:(one Semaphore)|((ref0 in (ref1 . (Track <: succs))) => (ref0 in (ref1 . (Track <: signals))))));1;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (ref0 in ((Track <: signals) . Semaphore))));8
this/inv10;(all ref0:(one Track)|(((ref0 . (~ (Track <: succs))) in Junction) => (some ((ref0 . (Track <: signals)) & Semaphore))));1;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (some ((ref0 . (Track <: signals)) & Semaphore))));5
this/inv8;(all ref0:(one Track),ref1:(one (ref0 . (^ (Track <: succs))))|(((ref0 != ref1) && (some (ref0 & Entry))) => (ref1 = Exit)));1;(all ref0:(one Track)|((some (ref0 & Entry)) => (Exit in (ref0 . (* (Track <: succs))))));14
this/inv5;(all ref0:(one Junction)|(lone ((Track <: succs) . ref0)));1;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});5
this/inv9;(all ref0:(one Semaphore),ref1:(one Track)|(((ref1 !in (Track . (^ (Track <: succs)))) && (ref1 in Junction)) => (ref0 !in (Track . (Track <: signals)))));1;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));14
this/inv8;(all ref0:(one Track),ref1:(one (ref0 . (^ (Track <: succs))))|(((ref0 != ref1) && (some (ref0 & Entry))) => (Exit in ref1)));1;(all ref0:(one Track)|((some (ref0 & Entry)) => (Exit in (ref0 . (* (Track <: succs))))));12
this/inv10;(all ref0:(one Track)|((some ref1:(one Track)|(((ref0 -> ref1) in (Track <: succs)) && (ref1 in Junction))) => (some ref2:(one Signal)|(((ref0 -> ref2) in (Track <: signals)) && (ref2 !in Semaphore)))));1;(all ref0:(one Track)|((some ref1:(one Track)|(((ref0 -> ref1) in (Track <: succs)) && (ref1 in Junction))) => (some ref2:(one Signal)|(((ref0 -> ref2) in (Track <: signals)) && (ref2 in Semaphore)))));8
this/inv9;(all ref0:(one Semaphore),ref1:(one Track)|(((ref1 !in (Track . (^ (Track <: succs)))) && (ref1 in Junction)) <=> (ref0 !in (Track . (Track <: signals)))));1;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));16
this/inv10;(all ref0:(one Track)|((one ((ref0 . (Track <: succs)) & Junction)) => (some ((ref0 . (Track <: signals)) & Semaphore))));1;(all ref0:(one Track)|((some ((ref0 . (Track <: succs)) & Junction)) => (some ((ref0 . (Track <: signals)) & Semaphore))));4
this/inv9;(all ref0:(one Junction),ref1:(one Semaphore),ref2:(one Track)|((ref1 !in (ref2 . (Track <: signals))) <=> (ref2 !in (ref2 . (Track <: succs)))));1;(((Track <: signals) . Semaphore) in ((Track <: succs) . Junction));13
this/inv9;(all ref0:(one Junction),ref1:(one Track)|(some ref2:(one Semaphore)|((ref0 !in (ref1 . (Track <: succs))) => (Semaphore !in (ref1 . (Track <: signals))))));1;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));10
this/inv8;(all ref0:(one Track),ref1:(one (ref0 . (^ (Track <: succs))))|((some (ref0 & Entry)) => (Exit in ref1)));1;(all ref0:(one Track)|((some (ref0 & Entry)) => (Exit in (ref0 . (* (Track <: succs))))));8
this/inv8;(all ref0:(one Entry)|((ref0 . (^ (Track <: succs))) in (ref0 + Exit)));1;(all ref0:(one Entry),ref1:(one (Exit - ref0))|(ref1 in (ref0 . (^ (Track <: succs)))));7
this/inv5;(all ref0:(one (Track - Junction))|(one ref1:(one Track)|(ref1 in (ref1 . (Track <: succs)))));1;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});11
this/inv3;(all ref0:(one Track)|(((no ((Track <: succs) . ref0)) || (ref0 in ((Track <: succs) . ref0))) => (ref0 in Exit)));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));12
this/inv8;(all ref0:(one Entry)|((ref0 + (ref0 . (^ (Track <: succs)))) in Exit));1;(all ref0:(one Entry)|(Exit in (ref0 + (ref0 . (^ (Track <: succs))))));4
this/inv8;(all ref0:(one Track),ref1:(one (ref0 . (^ (Track <: succs))))|((some (ref0 & Entry)) => (ref1 = Exit)));1;(all ref0:(one Track)|((some (ref0 & Entry)) => (Exit in (ref0 . (* (Track <: succs))))));10
this/inv9;(all ref0:(one Junction),ref1:(one Track)|((ref0 !in (ref1 . (Track <: succs))) => (Semaphore !in (ref1 . (Track <: signals)))));1;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));9
this/inv9;(all ref0:(one Junction),ref1:(one Semaphore),ref2:(one Track),ref3:(one Track)|((! disj[ref2,ref3]) || (((ref3 !in (ref2 . (Track <: succs))) && (ref3 in Junction)) => (ref1 !in (ref2 . (Track <: signals))))));1;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));22
this/inv5;(all ref0:(one ((Track - Junction) - Entry))|(one ref1:(one Track)|(ref0 in (ref1 . (Track <: succs)))));1;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});11
this/inv8;(all ref0:(one Track)|((some (ref0 & Entry)) => ((ref0 . (^ (Track <: succs))) = Exit)));1;(all ref0:(one Track)|((some (ref0 & Entry)) => (Exit in (ref0 . (* (Track <: succs))))));8
this/inv5;((all ref0:(one ((Track - Junction) - Entry))|(one ref1:(one Track)|(ref0 in (ref1 . (Track <: succs))))) && (all ref2:(one Junction)|(some ref3:(one Track),ref4:(one Track)|((ref2 != ref3) && (ref2 != ref4) && (ref2 in (ref3 . (Track <: succs))) && (ref2 in (ref4 . (Track <: succs))) && (ref3 != ref4)))));1;((all ref0:(one ((Track - Junction) - Entry))|(one ref1:(one Track)|(ref0 in (ref1 . (Track <: succs))))) && (all ref2:(one Junction)|(some ref3:(one Track),ref4:(one Track)|((ref2 in (ref3 . (Track <: succs))) && (ref2 in (ref4 . (Track <: succs))) && (ref3 != ref4)))));16
this/inv3;(all ref0:(one Track)|(((no (ref0 . (Track <: succs))) && (ref0 in (ref0 . (Track <: succs)))) => (ref0 in Exit)));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));10
this/inv3;(all ref0:(one Track),ref1:(one (Track - ref0))|((ref0 in Exit) => (ref1 !in (ref0 . (Track <: succs)))));1;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (Track <: succs)))));10
this/inv8;(all ref0:(one Entry),ref1:(one Exit)|(ref0 in (ref1 . (^ (~ (Track <: succs))))));1;(all ref0:(one Entry)|(Exit in (ref0 + (ref0 . (^ (Track <: succs))))));8
this/inv8;((all ref0:(one Entry)|((ref0 . (^ (Track <: succs))) in Exit)) && (all ref1:(one Track)|((ref1 in Entry) => (ref1 !in Exit))));1;(all ref0:(one Entry),ref1:(one (Exit - ref0))|(ref1 in (ref0 . (^ (Track <: succs)))));14
this/inv3;(all ref0:(one Track),ref1:(one Track)|(((ref0 -> ref1) !in (Track <: succs)) <=> (ref0 in Exit)));1;(all ref0:(one Track)|((all ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))) <=> (ref0 in Exit)));4
this/inv8;(all ref0:(one Track)|((some (ref0 & Entry)) => (Exit in (ref0 . (^ (Track <: succs))))));1;(all ref0:(one Track)|((some (ref0 & Entry)) => (Exit in (ref0 . (* (Track <: succs))))));4
this/inv3;(all ref0:(one Track)|(some ref1:(one (Track - ref0))|((ref0 in Exit) => (ref1 !in (ref0 . (Track <: succs))))));1;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (Track <: succs)))));10
this/inv8;(all ref0:(one Track)|((some (ref0 & Entry)) => ((some (ref0 & Exit)) || (Exit in (ref0 . (^ (Track <: succs)))))));1;(all ref0:(one Track)|((some (ref0 & Entry)) => (Exit in (ref0 . (* (Track <: succs))))));9
this/inv5;(all ref0:(one Junction)|(! (lone ((^ (Track <: succs)) . ref0))));1;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});5
this/inv8;((all ref0:(one Entry)|((ref0 . (^ (Track <: succs))) in Exit)) && (all ref1:(one Entry)|(ref1 !in Exit)));1;(all ref0:(one Entry),ref1:(one (Exit - ref0))|(ref1 in (ref0 . (^ (Track <: succs)))));10
this/inv5;(all ref0:(one Track)|(! (lone ((Track <: succs) . ref0))));1;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});4
this/inv8;(all ref0:(one Track)|((some (ref0 & Entry)) => ((some (ref0 & Exit)) || (Exit in (ref0 . (* (Track <: succs)))))));1;(all ref0:(one Track)|((some (ref0 & Entry)) => (Exit in (ref0 . (* (Track <: succs))))));7
this/inv3;(all ref0:(one Track)|(some ref1:(one (Track - ref0))|((ref0 in Exit) => (ref1 !in (ref0 . (^ (Track <: succs)))))));1;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (^ (Track <: succs))))));10
this/inv4;(all ref0:(one Entry)|(ref0 !in ((Track <: succs) . Track)));1;(Entry = (Track - ((~ (Track <: succs)) . Track)));8
this/inv3;((all ref0:(one Exit),ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))) && (all ref2:(one Track),ref3:(one Track)|(((ref2 -> ref3) !in (Track <: succs)) => (ref2 in Exit))));1;((all ref0:(one Exit),ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))) && (all ref2:(one Track)|((all ref3:(one Track)|((ref2 -> ref3) !in (Track <: succs))) => (ref2 in Exit))));8
this/inv8;(all ref0:(one Entry)|(Exit in ((ref0 . (^ (Track <: succs))) & Exit)));1;(all ref0:(one Entry)|(Exit in (ref0 . (* (Track <: succs)))));6
this/inv3;((all ref0:(one Track)|((ref0 in Exit) => (all ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))))) && (all ref2:(one Track),ref3:(one Track)|(((ref2 -> ref3) !in (Track <: succs)) => (ref2 in Exit))));1;((all ref0:(one Track)|((ref0 in Exit) => (all ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))))) && (all ref2:(one Track)|((all ref3:(one Track)|((ref2 -> ref3) !in (Track <: succs))) => (ref2 in Exit))));8
this/inv3;(all ref0:(one Track)|((ref0 in Exit) => (no (((ref0 . (Track <: succs)) & Track) - ref0))));1;(Exit = (Track - ((Track <: succs) . Track)));12
this/inv3;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) => (((ref0 in Entry) && (ref0 in Exit) && (ref0 in Junction)) || (ref0 in Exit))));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));15
this/inv3;(all ref0:(one Track)|(((ref0 in Entry) && (ref0 in Exit) && (ref0 in Junction)) || ((no (ref0 . (Track <: succs))) => (ref0 in Exit))));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));15
this/inv3;(all ref0:(one Track)|((ref0 in Exit) => (no (((ref0 . (^ (Track <: succs))) & Track) - ref0))));1;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (^ (Track <: succs))))));12
this/inv3;(all ref0:(one Track)|(((ref0 in (ref0 . (Track <: succs))) && (ref0 in Entry) && (ref0 in Exit) && (ref0 in Junction)) || ((no (ref0 . (Track <: succs))) => (ref0 in Exit))));1;(all ref0:(one Track)|(((no (ref0 . (Track <: succs))) => (ref0 in Exit)) && ((ref0 in Exit) => (no (ref0 . (Track <: succs))))));19
this/inv5;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|(disj[ref1,ref2] && ((ref1 + ref2) in (ref0 . (Track <: succs))))) <=> (ref0 in Entry)));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|(disj[ref1,ref2] && ((ref1 + ref2) in ((Track <: succs) . ref0)))) <=> (ref0 in Junction)));10
this/inv3;(all ref0:(one Track)|(((ref0 in Exit) => (no ((ref0 . (Track <: succs)) & Track))) && (some (ref0 . (~ (Track <: succs))))));1;((all ref0:(one Track)|((ref0 in Exit) => (no (ref0 . (Track <: succs))))) && (all ref1:(one Track)|((no (ref1 . (Track <: succs))) => (ref1 in Exit))));14
this/inv9;(all ref0:(one Junction),ref1:(one Track)|((ref0 in (ref1 . (Track <: succs))) => (Semaphore !in (ref1 . (Track <: signals)))));1;(all ref0:(one Semaphore),ref1:(one Track)|((no ((ref1 . (Track <: succs)) & Junction)) => (ref0 !in (ref1 . (Track <: signals)))));11
this/inv5;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|(disj[ref1,ref2] && ((ref1 + ref2) in ((Track <: succs) . ref0)))) <=> (ref0 in Entry)));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|(disj[ref1,ref2] && ((ref1 + ref2) in ((Track <: succs) . ref0)))) <=> (ref0 in Junction)));8
this/inv3;(all ref0:(one Exit)|(((ref0 in (ref0 . (Track <: succs))) && (ref0 in Entry) && (ref0 in Junction)) || (no (ref0 . (Track <: succs)))));1;(all ref0:(one Track)|(((no (ref0 . (Track <: succs))) => (ref0 in Exit)) && ((ref0 in Exit) => (no (ref0 . (Track <: succs))))));14
this/inv9;(all ref0:(one Junction),ref1:(one Track)|((ref0 in ((Track <: succs) . ref1)) => (Semaphore !in (ref1 . (Track <: signals)))));1;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));11
this/inv3;(all ref0:(one Track)|((ref0 in Exit) => (ref0 !in ((Track <: succs) . ref0))));1;(Exit = (Track - ((Track <: succs) . Track)));11
this/inv3;(all ref0:(one Track)|((ref0 in Exit) => (ref0 !in (Exit . (Track <: succs)))));1;(Exit = (Track - ((Track <: succs) . Track)));11
this/inv9;(all ref0:(one Junction),ref1:(one Track)|((ref0 in ((Track <: succs) . ref1)) <=> (Semaphore !in (ref1 . (Track <: signals)))));1;(all ref0:(one Track)|((ref0 !in ((Track <: succs) . Junction)) => (ref0 !in ((Track <: signals) . Semaphore))));13
this/inv3;(all ref0:(one Track)|((ref0 in Exit) => (((ref0 in (ref0 . (Track <: succs))) && (ref0 in Entry) && (ref0 in Junction)) || (no (ref0 . (Track <: succs))))));1;(all ref0:(one Track)|(((no (ref0 . (Track <: succs))) => (ref0 in Exit)) && ((ref0 in Exit) => (no (ref0 . (Track <: succs))))));18
this/inv3;(all ref0:(one Track)|((((ref0 in (ref0 . (Track <: succs))) && (ref0 in Entry) && (ref0 in Junction)) || (no (ref0 . (Track <: succs)))) => (ref0 in Exit)));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));17
this/inv4;(all ref0:(one (Track - Entry))|(Entry !in (ref0 . (^ (Track <: succs)))));1;(Entry = (Track - (Track . (^ (Track <: succs)))));7
this/inv3;(all ref0:(one Track)|((ref0 in (ref0 . (Track <: succs))) => (ref0 !in Exit)));1;(all ref0:(one Track)|(((ref0 . (Track <: succs)) in none) <=> (ref0 in Exit)));8
this/inv3;(all ref0:(one Track)|((Exit in (ref0 . (Track <: signals))) => (no (ref0 . (Track <: succs)))));1;((all ref0:(one (Track - Exit))|(some (ref0 . (Track <: succs)))) && (no (Exit . (Track <: succs))));11
this/inv8;(all ref0:(one Entry)|((ref0 . (^ (Track <: succs))) in (Exit - ref0)));1;(all ref0:(one Entry),ref1:(one (Exit - ref0))|(ref1 in (ref0 . (^ (Track <: succs)))));7
this/inv5;(all ref0:(one Track),ref1:(one Track),ref2:(one Track)|((! disj[ref0,ref1,ref2]) || (((ref2 in (ref0 . (Track <: succs))) && (ref2 in (ref1 . (Track <: succs)))) => (ref2 = Junction))));1;(all ref0:(one Track)|((some ref1:(one (ref0 . (~ (Track <: succs)))),ref2:(one (ref0 . (~ (Track <: succs))))|(ref1 != ref2)) <=> (ref0 in Junction)));26
this/inv3;(all ref0:(one Track)|((((ref0 in (ref0 . (Track <: succs))) && (ref0 in Entry) && (ref0 in Exit) && (ref0 in Junction)) || (no (ref0 . (Track <: succs)))) => (ref0 in Exit)));1;(all ref0:(one Track)|(((no (ref0 . (Track <: succs))) => (ref0 in Exit)) && ((ref0 in Exit) => (no (ref0 . (Track <: succs))))));19
this/inv3;(all ref0:(one Signal),ref1:(one Track)|(((ref0 = Exit) && (ref0 in (ref1 . (Track <: signals)))) => (no (ref1 . (Track <: succs)))));1;(Exit = (Track - ((Track <: succs) . Track)));17
this/inv9;(all ref0:(one Track)|((Junction in ((Track <: succs) . ref0)) => (no ((ref0 . (Track <: signals)) & Semaphore))));1;(all ref0:(one Track)|((ref0 in (Track - ((Track <: succs) . Junction))) => (no ((ref0 . (Track <: signals)) & Semaphore))));8
this/inv3;(all ref0:(one Exit),ref1:(one Track)|((ref0 in ref1) => (ref0 !in (ref1 . (Track <: succs)))));1;(Exit = (Track - ((Track <: succs) . Track)));14
this/inv9;(all ref0:(one Track)|((no ((ref0 . (Track <: signals)) & Semaphore)) <=> (Junction in (ref0 . (Track <: succs)))));1;(((Track <: signals) . Semaphore) in ((Track <: succs) . Junction));12
this/inv3;(all ref0:(one Track)|(((ref0 . (Track <: signals)) = Exit) => ((ref0 . (Track <: signals)) = Exit)));1;(all ref0:(one Track)|((none = (ref0 . (Track <: succs))) <=> (ref0 in Exit)));12
this/inv3;(all ref0:(one Track),ref1:(one Track)|(((ref1 -> ref0) in (Track <: succs)) => (ref0 in Exit)));1;(all ref0:(one Track)|(((ref0 . (Track <: succs)) in none) <=> (ref0 in Exit)));9
this/inv5;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|(disj[ref1,ref2] && ((ref1 & ref2) in ((Track <: succs) . ref0)))) <=> (ref0 in Junction)));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|(disj[ref1,ref2] && ((ref1 + ref2) in ((Track <: succs) . ref0)))) <=> (ref0 in Junction)));8
this/inv3;(all ref0:(one Track),ref1:(one Track)|(((ref1 -> ref0) !in (Track <: succs)) => (ref0 in Exit)));1;(all ref0:(one Track)|((all ref1:(one Track)|(ref1 !in (ref0 . (Track <: succs)))) <=> (ref0 in Exit)));8
this/inv5;(all ref0:(one Track)|((ref0 in Junction) => (some (ref0 . (^ (Track <: succs))))));1;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});12
this/inv3;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) => (Exit in (ref0 . (Track <: signals)))));1;(all ref0:(one Track)|((no (ref0 . (Track <: succs))) <=> (ref0 in Exit)));8
this/inv3;(all ref0:(one Track),ref1:(one Track)|((((ref0 -> ref1) in (Track <: succs)) && ((ref1 -> ref0) !in (Track <: succs))) => (ref0 in Exit)));1;(all ref0:(one Track)|((all ref1:(one Track)|(ref1 !in (ref0 . (Track <: succs)))) <=> (ref0 in Exit)));14
this/inv3;(all ref0:(one Track),ref1:(one Track)|(((ref0 -> ref1) in (Track <: succs)) => (ref1 != Exit)));1;(all ref0:(one Track)|((all ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))) <=> (ref0 in Exit)));12
this/inv5;((all ref0:(one Junction)|((ref0 !in (Track . (Track <: succs))) => (ref0 in Entry))) && (all ref1:(one Entry)|(ref1 !in (Track . (Track <: succs)))));1;(all ref0:(one Track)|((! (lone ((Track <: succs) . ref0))) <=> (ref0 in Junction)));19
this/inv5;(all ref0:(one Track)|((ref0 in Junction) => (some (Track . (^ (Track <: succs))))));1;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});12
this/inv5;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref1 in (ref0 . (^ (~ (Track <: succs))))) && (ref2 in (ref0 . (^ (~ (Track <: succs))))))) <=> (ref0 in Junction)));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref1 in (ref0 . (~ (Track <: succs)))) && (ref2 in (ref0 . (~ (Track <: succs)))) && disj[ref1,ref2])) <=> (ref0 in Junction)));11
this/inv3;(all ref0:(one Track)|((Exit in Track) => (no (ref0 . (Track <: succs)))));1;(Exit = (Track - ((Track <: succs) . Track)));8
this/inv3;(all ref0:(one Track),ref1:(one Track)|((((ref0 -> ref1) !in (Track <: succs)) && ((ref1 -> ref0) in (Track <: succs))) => (ref0 in Exit)));1;(all ref0:(one Track)|((all ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))) <=> (ref0 in Exit)));12
this/inv5;(all ref0:(one Track)|((ref0 in Junction) => (some ref1:(one Track),ref2:(one Track)|((ref1 in (ref0 . (^ (~ (Track <: succs))))) && (ref2 in (ref0 . (^ (~ (Track <: succs)))))))));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref1 in (ref0 . (~ (Track <: succs)))) && (ref2 in (ref0 . (~ (Track <: succs)))) && disj[ref1,ref2])) <=> (ref0 in Junction)));19
this/inv4;(all ref0:(one Track),ref1:(one Track)|((ref0 !in (ref1 . (* (Track <: succs)))) <=> (ref0 in Entry)));1;(all ref0:(one Track)|((all ref1:(one Track)|(ref0 !in (ref1 . (Track <: succs)))) <=> (ref0 in Entry)));5
this/inv3;(all ref0:(one Track),ref1:(one Track)|(((ref0 -> ref1) in (Track <: succs)) => (ref0 != Exit)));1;(all ref0:(one Track)|((all ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))) <=> (ref0 in Exit)));10
this/inv8;(all ref0:(one Exit)|(some ref1:(one Entry)|(ref0 in (ref1 . (* (Track <: succs))))));1;(all ref0:(one Entry),ref1:(one Exit)|((ref0 -> ref1) in (* (Track <: succs))));6
this/inv5;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref1 in (ref0 . (~ (Track <: succs)))) && (ref2 in (ref0 . (~ (Track <: succs)))))) <=> (ref0 in Junction)));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref1 in (ref0 . (~ (Track <: succs)))) && (ref2 in (ref0 . (~ (Track <: succs)))) && disj[ref1,ref2])) <=> (ref0 in Junction)));9
this/inv3;(all ref0:(one Track),ref1:(one (Track - ref0))|((((ref0 -> ref1) !in (Track <: succs)) && ((ref1 -> ref0) in (Track <: succs))) => (ref0 in Exit)));1;(all ref0:(one Track)|((all ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))) <=> (ref0 in Exit)));12
this/inv3;(all ref0:(one Track),ref1:(one (Track - ref0))|((((ref0 -> ref1) in (Track <: succs)) && ((ref1 -> ref0) !in (Track <: succs))) => (ref0 in Exit)));1;(all ref0:(one Track)|((all ref1:(one Track)|(ref1 !in (ref0 . (Track <: succs)))) <=> (ref0 in Exit)));14
this/inv3;(all ref0:(one Track),ref1:(one Track)|(((ref0 -> ref1) in (Track <: succs)) => (ref1 !in Exit)));1;(all ref0:(one Track)|((all ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))) <=> (ref0 in Exit)));12
this/inv5;(all ref0:(one Track)|((ref0 in (some (Track . (^ (Track <: succs))))) <=> (ref0 in Junction)));1;(all ref0:(one Track)|((! (lone ((Track <: succs) . ref0))) <=> (ref0 in Junction)));10
this/inv10;(all ref0:(one Junction),ref1:(one Track)|(some ref2:(one (ref1 . (Track <: signals)))|(((ref0 != ref1) && (ref0 in (ref1 . (Track <: succs)))) => (ref2 in Semaphore))));1;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (ref0 in ((Track <: signals) . Semaphore))));14
this/inv5;((all ref0:(one Track),ref1:(one Track),ref2:(one Track)|(((ref0 != ref1) && (ref0 in ((ref1 . (Track <: succs)) & (ref1 . (Track <: succs)))) && (ref1 != ref2)) => (ref0 in Junction))) && (all ref3:(one Junction),ref4:(one Track),ref5:(one Track)|((ref3 in (ref4 . (Track <: succs))) => ((ref3 in (ref5 . (Track <: succs))) && (ref4 != ref5)))));1;((all ref0:(one Junction)|(some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2)))) && (all ref3:(one Track),ref4:(one Track),ref5:(one Track)|(((ref3 in (ref4 . (Track <: succs))) && (ref3 in (ref5 . (Track <: succs))) && (ref4 != ref5)) => (ref3 in Junction))));31
this/inv10;(all ref0:(one Junction),ref1:(one Track)|(some ref2:(one (ref1 . (Track <: signals)))|((ref0 in (ref1 . (Track <: succs))) => (ref2 in Semaphore))));1;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (ref0 in ((Track <: signals) . Semaphore))));10
this/inv5;(all ref0:(one Track)|(((# (Track . (^ (Track <: succs)))) > int[((# ((Track . (^ (Track <: succs))) - ref0)) + 1)]) <=> (ref0 in Junction)));1;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) <=> (ref0 in Junction)));14
this/inv5;(all ref0:(one Junction),ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) => ((ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));13
this/inv3;(all ref0:(one Track),ref1:(one Track)|((Exit in ref0) => (ref0 !in (ref1 . (^ (Track <: succs))))));1;(Exit = (Track - ((Track <: succs) . Track)));13
this/inv5;(all ref0:(one Track)|((int[((# ((Track . (^ (Track <: succs))) - ref0)) + 1)] < (# (Track . (^ (Track <: succs))))) <=> (ref0 in Junction)));1;(all ref0:(one Track)|((2 < (# ((Track <: succs) . ref0))) <=> (ref0 in Junction)));14
this/inv3;(all ref0:(one Track)|((ref0 in Exit) => (0 > (# (ref0 . (Track <: succs))))));1;(all ref0:(one Track)|((0 > (# (ref0 . (Track <: succs)))) <=> (ref0 in Exit)));10
this/inv5;(all ref0:(one Track)|(((# (Track . (^ (Track <: succs)))) > int[((# ((Track . (^ (Track <: succs))) - ref0)) + 2)]) <=> (ref0 in Junction)));1;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) <=> (ref0 in Junction)));14
this/inv3;(all ref0:(one Track)|(some ref1:(one Track)|((Exit in ref0) => (ref0 !in (ref1 . (^ (Track <: succs)))))));1;(Exit = (Track - ((Track <: succs) . Track)));13
this/inv5;((all ref0:(one Junction),ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) => ((ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2)))) && (all ref3:(one Track),ref4:(one Track)|(((ref3 != ref4) && (ref3 !in (ref4 . (Track <: succs)))) => (ref3 !in Junction))));1;((all ref0:(one Junction)|(some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2)))) && (all ref3:(one Track),ref4:(one Track),ref5:(one Track)|(((ref3 in (ref4 . (Track <: succs))) && (ref3 in (ref5 . (Track <: succs))) && (ref4 != ref5)) => (ref3 in Junction))));27
this/inv5;((all ref0:(one Track)|((ref0 in Junction) <=> (ref0 in (Track . (^ (Track <: succs)))))) && (all ref1:(one Track),ref2:(one Track),ref3:(one Track)|((! disj[ref1,ref2,ref3]) || (((ref1 in (ref2 . (^ (Track <: succs)))) && (ref1 in (ref3 . (^ (Track <: succs))))) => (ref1 in Junction)))));1;((all ref0:(one Junction)|((# ((Track <: succs) . ref0)) > 1)) && (all ref1:(one Track),ref2:(one Track),ref3:(one Track)|((! disj[ref2,ref3]) || (((ref2 + ref3) in ((Track <: succs) . ref1)) => (ref1 in Junction)))));35
this/inv5;(all ref0:(one Junction)|((# (Track . (^ (Track <: succs)))) > int[((# ((Track . (^ (Track <: succs))) - ref0)) + 2)]));1;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) <=> (ref0 in Junction)));18
this/inv3;(all ref0:(one Track)|((ref0 !in (Track . (^ (Track <: succs)))) => (Exit in ref0)));1;(all ref0:(one Track)|((no (ref0 . (^ (Track <: succs)))) <=> (ref0 in Exit)));11
this/inv3;(all ref0:(one Exit),ref1:(one Track)|((ref0 in (ref1 . (Track <: signals))) => (no ((Track <: succs) . ref1))));1;((all ref0:(one (Track - Exit))|(some (ref0 . (Track <: succs)))) && (no (Exit . (Track <: succs))));14
this/inv3;(all ref0:(one univ)|((all ref1:(one univ)|(((ref0 -> ref1) !in (Track <: succs)) && (ref1 in Track))) <=> (ref0 in Exit)));1;(all ref0:(one Track)|((all ref1:(one Track)|((ref0 -> ref1) !in (Track <: succs))) <=> (ref0 in Exit)));8
this/inv10;(all ref0:(one Track)|((lone ((ref0 . (Track <: succs)) & Junction)) => (lone ((ref0 . (Track <: signals)) & Semaphore))));1;(all ref0:(one Track)|((some ((ref0 . (Track <: succs)) & Junction)) => (some ((ref0 . (Track <: signals)) & Semaphore))));6
this/inv9;(no ((((Track <: succs) . Junction) . (Track <: signals)) & Semaphore));1;(no (((Track - ((Track <: succs) . Junction)) . (Track <: signals)) :> Semaphore));4
this/inv5;(all ref0:(one Track)|((! (lone ((Track <: succs) . ref0))) => (ref0 in Junction)));1;(all ref0:(one Track)|((! (lone ((Track <: succs) . ref0))) <=> (ref0 in Junction)));4
this/inv3;(all ref0:(one Exit)|(0 > (# (ref0 . (Track <: succs)))));1;(all ref0:(one Track)|((0 > (# (ref0 . (Track <: succs)))) <=> (ref0 in Exit)));6
this/inv10;(all ref0:(one Track)|((some ((ref0 . (Track <: succs)) & Junction)) => (lone ((ref0 . (Track <: signals)) & Semaphore))));1;(all ref0:(one Track)|((some ((ref0 . (Track <: succs)) & Junction)) => (some ((ref0 . (Track <: signals)) & Semaphore))));4
this/inv3;((all ref0:(one Track)|((ref0 !in (Track . (^ (Track <: succs)))) => (Exit in ref0))) && (all ref1:(one Track)|((Exit in ref1) => (ref1 !in (Track . (^ (Track <: succs)))))));1;(all ref0:(one Track)|(((no (ref0 . (Track <: succs))) => (ref0 in Exit)) && ((ref0 in Exit) => (no (ref0 . (Track <: succs))))));19
this/inv5;(all ref0:(one Junction)|(int[((# ((Track . (^ (Track <: succs))) - ref0)) + 1)] < (# (Track . (^ (Track <: succs))))));1;(all ref0:(one Track)|((2 < (# ((Track <: succs) . ref0))) <=> (ref0 in Junction)));18
this/inv5;((all ref0:(one Track),ref1:(one Track),ref2:(one Track)|(((ref0 != ref1) && (ref0 in ((ref1 . (Track <: succs)) & (ref1 . (Track <: succs)))) && (ref1 != ref2)) => (ref0 in Junction))) && (all ref3:(one Junction),ref4:(one Track),ref5:(one Track)|((ref3 in (ref4 . (Track <: succs))) => ((ref3 in (ref5 . (Track <: succs))) && (ref4 != ref5)))) && (all ref6:(one Track)|((ref6 !in (Track . (Track <: succs))) => (ref6 !in Junction))));1;((all ref0:(one Junction)|(some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2)))) && (all ref3:(one Track),ref4:(one Track),ref5:(one Track)|(((ref3 in (ref4 . (Track <: succs))) && (ref3 in (ref5 . (Track <: succs))) && (ref4 != ref5)) => (ref3 in Junction))));41
this/inv10;(some ((((Track <: succs) . Junction) . (Track <: signals)) & Semaphore));1;(all ref0:(one ((Track <: succs) . Junction))|(some ((ref0 . (Track <: signals)) & Semaphore)));5
this/inv3;(all ref0:(one Track),ref1:(one Track)|((Exit in ref0) => (ref1 !in (ref0 . (^ (Track <: succs))))));1;(all ref0:(one Track)|((ref0 !in Exit) <=> (some (ref0 . (^ (Track <: succs))))));12
this/inv9;(all ref0:(one Track)|((no ((ref0 . (* (Track <: succs))) & Junction)) => (no ((ref0 . (Track <: signals)) & Semaphore))));1;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => (no ((ref0 . (Track <: signals)) & Semaphore))));3
this/inv5;(all ref0:(one Track),ref1:(one (Track - ref0)),ref2:(one (Track - ref0))|(((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs)))) <=> (ref0 in Junction)));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));9
this/inv5;((all ref0:(one Junction),ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) => ((ref0 != ref1) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2)))) && (all ref3:(one Track)|((ref3 !in (Track . (Track <: succs))) => (ref3 !in Junction))));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));25
this/inv5;(all ref0:(one Track)|(some ref1:(one (Track - ref0)),ref2:(one (Track - ref0))|(((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs)))) <=> (ref0 in Junction))));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));9
this/inv9;(all ref0:(one Track)|((! (some ((ref0 . (^ (Track <: succs))) & Junction))) => (! (some ((ref0 . (Track <: signals)) & Semaphore)))));1;(all ref0:(one Track)|((! (some ((ref0 . (Track <: succs)) & Junction))) => (! (some ((ref0 . (Track <: signals)) & Semaphore)))));3
this/inv4;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 0) <=> (ref0 in Entry)));1;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) = 0) <=> (ref0 in Entry)));4
this/inv5;(all ref0:(one Track)|((ref0 !in (Track . (Track <: succs))) => (ref0 !in Junction)));1;(all ref0:(one Track)|((! (lone ((Track <: succs) . ref0))) <=> (ref0 in Junction)));12
this/inv4;(all ref0:(one Track),ref1:(one Track)|((Entry in ref0) => (ref1 !in (ref0 . (^ (Track <: succs))))));1;(Entry = (Track - (Track . (^ (Track <: succs)))));12
this/inv3;((no (Exit . (Track <: succs))) && (some (Entry . (Track <: succs))) && (some (Junction . (Track <: succs))));1;((all ref0:(one (Track - Exit))|(some (ref0 . (Track <: succs)))) && (no (Exit . (Track <: succs))));11
this/inv4;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) < 0) <=> (ref0 in Entry)));1;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) = 0) <=> (ref0 in Entry)));4
this/inv5;((all ref0:(one Track)|((ref0 !in (Track . (Track <: succs))) => (ref0 !in Junction))) && (all ref1:(one Track),ref2:(one Track)|(some ref3:(one Track)|(((ref1 != ref2) && (ref1 !in (ref3 . (Track <: succs))) && (ref1 in (ref2 . (Track <: succs))) && (ref2 != ref3)) => (ref1 !in Junction)))));1;((all ref0:(one ((Track - Junction) - Entry))|(one ref1:(one Track)|(ref0 in (ref1 . (Track <: succs))))) && (all ref2:(one Junction)|(some ref3:(one Track),ref4:(one Track)|((ref2 in (ref3 . (Track <: succs))) && (ref2 in (ref4 . (Track <: succs))) && (ref3 != ref4)))));32
this/inv4;(all ref0:(one Track),ref1:(one Track)|((ref1 !in (ref0 . (^ (Track <: succs)))) => (Entry in ref0)));1;(all ref0:(one Track)|((all ref1:(one Track)|((ref1 -> ref0) !in (Track <: succs))) <=> (ref0 in Entry)));11
this/inv9;(all ref0:(one Track),ref1:(one Track)|(some ref2:(one Signal)|((((ref0 -> ref1) !in (Track <: succs)) && (ref1 in Junction)) => (((ref0 -> ref2) !in (Track <: signals)) && (ref2 in Semaphore)))));1;(all ref0:(one Track)|((all ref1:(one Track)|(((ref0 -> ref1) in (Track <: succs)) => (ref1 !in Junction))) => (all ref2:(one Signal)|(((ref0 -> ref2) in (Track <: signals)) => (ref2 !in Semaphore)))));18
this/inv9;(all ref0:(one Track),ref1:(one (ref0 . (Track <: signals)))|(((ref0 . (Track <: succs)) !in Junction) => (ref1 !in Semaphore)));1;(all ref0:(one Track),ref1:(one (ref0 . (Track <: signals)))|((no ((ref0 . (Track <: succs)) & Junction)) => (ref1 !in Semaphore)));7
this/inv9;(all ref0:(one Track),ref1:(one Track)|(some ref2:(one Signal)|((((ref0 -> ref1) in (Track <: succs)) && (ref1 in Junction)) => (((ref0 -> ref2) in (Track <: signals)) && (ref2 in Semaphore)))));1;(all ref0:(one Track)|((all ref1:(one Track)|(((ref0 -> ref1) in (Track <: succs)) => (ref1 !in Junction))) => (all ref2:(one Signal)|(((ref0 -> ref2) in (Track <: signals)) => (ref2 !in Semaphore)))));14
this/inv5;((all ref0:(one Track)|((ref0 !in (Track . (Track <: succs))) => (ref0 !in Junction))) && (all ref1:(one Track),ref2:(one Track),ref3:(one Track)|(((ref1 != ref2) && (ref1 !in (ref3 . (Track <: succs))) && (ref1 in (ref2 . (Track <: succs))) && (ref2 != ref3)) <=> (ref1 !in Junction))));1;((all ref0:(one ((Track - Junction) - Entry))|(one ref1:(one Track)|(ref0 in (ref1 . (Track <: succs))))) && (all ref2:(one Junction)|(some ref3:(one Track),ref4:(one Track)|((ref2 in (ref3 . (Track <: succs))) && (ref2 in (ref4 . (Track <: succs))) && (ref3 != ref4)))));32
this/inv9;(all ref0:(one Track)|(some ref1:(one Junction)|((ref1 in (ref0 . (Track <: succs))) => (Semaphore !in (ref0 . (Track <: signals))))));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|(ref1 in (ref0 . (Track <: succs))))) => (all ref2:(one Semaphore)|(ref2 !in (ref0 . (Track <: signals))))));8
this/inv5;((all ref0:(one Track)|((ref0 !in (Track . (Track <: succs))) => (ref0 !in Junction))) && (all ref1:(one Track),ref2:(one Track),ref3:(one Track)|(((ref1 != ref2) && (ref1 != ref3) && (ref1 !in (ref3 . (Track <: succs))) && (ref1 in (ref2 . (Track <: succs))) && (ref2 != ref3)) <=> (ref1 !in Junction))));1;((all ref0:(one ((Track - Junction) - Entry))|(one ref1:(one Track)|(ref0 in (ref1 . (Track <: succs))))) && (all ref2:(one Junction)|(some ref3:(one Track),ref4:(one Track)|((ref2 in (ref3 . (Track <: succs))) && (ref2 in (ref4 . (Track <: succs))) && (ref3 != ref4)))));35
this/inv9;(all ref0:(one Track)|(((ref0 . (Track <: succs)) in Junction) => (! (Semaphore in (ref0 . (Track <: signals))))));1;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => (! (some ref1:(one Semaphore)|(ref1 in (ref0 . (Track <: signals)))))));8
this/inv9;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => (Semaphore !in (ref0 . (Track <: signals)))));1;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => (all ref1:(one Semaphore)|(ref1 !in (ref0 . (Track <: signals))))));5
this/inv10;(all ref0:(one Track)|(one ref1:(one (ref0 . (Track <: signals)))|((some ((ref0 . (Track <: succs)) & Junction)) => (ref1 in Semaphore))));1;(all ref0:(one Track)|((some ((ref0 . (Track <: succs)) & Junction)) => (some ((ref0 . (Track <: signals)) & Semaphore))));10
this/inv9;(all ref0:(one Track)|(((ref0 . (^ (Track <: succs))) in Junction) => (! (Semaphore in (ref0 . (Track <: signals))))));1;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => (! (some ref1:(one Semaphore)|(ref1 in (ref0 . (Track <: signals)))))));9
this/inv9;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) <=> (Semaphore !in (ref0 . (Track <: signals)))));1;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => (all ref1:(one Semaphore)|(ref1 !in (ref0 . (Track <: signals))))));7
this/inv5;(all ref0:(one Track)|(some ref1:(one Track),ref2:(one Track)|((Junction in ref0) => ((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2)))));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));14
this/inv5;(all ref0:(one Track),ref1:(one Track),ref2:(one Track)|((ref0 in Junction) => (((ref1 -> ref0) in (Track <: succs)) && ((ref2 -> ref0) in (Track <: succs)))));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref1 != ref2) && ((ref1 -> ref0) in (Track <: succs)) && ((ref2 -> ref0) in (Track <: succs)))) <=> (ref0 in Junction)));17
this/inv10;(all ref0:(one Track)|(some ref1:(one (ref0 . (Track <: signals)))|(((# ((ref0 . (Track <: succs)) & Junction)) > 0) => (ref1 in Semaphore))));1;(all ref0:(one Track)|(((# ((ref0 . (Track <: succs)) & Junction)) > 0) => (some ((ref0 . (Track <: signals)) & Semaphore))));10
this/inv5;(all ref0:(one Track)|((Junction in ref0) => (some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2)))));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));14
this/inv9;(all ref0:(one Junction),ref1:(one Track)|((ref0 in (ref1 . (^ (Track <: succs)))) => (! (Semaphore in (ref1 . (Track <: signals))))));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|((ref0 -> ref1) in (Track <: succs)))) => (! (some ref2:(one Semaphore)|((ref0 -> ref2) in (Track <: signals))))));15
this/inv5;((all ref0:(one Track),ref1:(one Track),ref2:(one Track)|(((ref0 != ref1) && (ref0 in ((ref1 . (Track <: succs)) & (ref1 . (Track <: succs)))) && (ref1 != ref2)) => (ref0 in Junction))) && (all ref3:(one Track)|((ref3 !in (Track . (Track <: succs))) => (ref3 !in Junction))) && (all ref4:(one Track),ref5:(one Track),ref6:(one Track)|(((ref4 != ref5) && (ref4 !in (ref6 . (Track <: succs))) && (ref4 in (ref5 . (Track <: succs))) && (ref5 != ref6)) => (ref4 !in Junction))));1;((all ref0:(one Junction)|(some ref1:(one Track),ref2:(one Track)|((ref0 in ((ref1 . (Track <: succs)) & (ref2 . (Track <: succs)))) && (ref1 != ref2)))) && (all ref3:(one Track),ref4:(one Track),ref5:(one Track)|(((ref3 in ((ref4 . (Track <: succs)) & (ref5 . (Track <: succs)))) && (ref4 != ref5)) => (ref3 in Junction))));49
this/inv5;(all ref0:(one Track),ref1:(one Track),ref2:(one Track)|((ref0 in Junction) => (((ref0 -> ref0) !in (Track <: succs)) && ((ref1 -> ref0) in (Track <: succs)) && ((ref2 -> ref0) in (Track <: succs)))));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref1 != ref2) && ((ref1 -> ref0) in (Track <: succs)) && ((ref2 -> ref0) in (Track <: succs)))) <=> (ref0 in Junction)));22
this/inv9;(all ref0:(one Junction),ref1:(one Track)|((ref0 in (ref1 . (Track <: succs))) => (! (Semaphore in (ref1 . (Track <: signals))))));1;(all ref0:(one Track)|((! (some ref1:(one Junction)|((ref0 -> ref1) in (Track <: succs)))) => (! (some ref2:(one Semaphore)|((ref0 -> ref2) in (Track <: signals))))));14
this/inv9;(all ref0:(one Track),ref1:(one Track)|((! disj[ref0,ref1]) || ((no ((ref0 . (Track <: signals)) & Semaphore)) <=> (no ((ref0 . (Track <: succs)) & ref1)))));1;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => (no ((ref0 . (Track <: signals)) & Semaphore))));18
this/inv5;(all ref0:(one Track)|((Junction in ref0) => (some ref1:(one Track),ref2:(one Track)|((ref0 != ref1) && (ref0 != ref2) && (ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2)))));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));20
this/inv9;(all ref0:(one Junction),ref1:(one Track)|((ref0 in (ref1 . (Track <: succs))) => (no ((ref1 . (Track <: signals)) & Semaphore))));1;(all ref0:(one Track)|((ref0 in (Track - ((Track <: succs) . Junction))) => (no ((ref0 . (Track <: signals)) & Semaphore))));9
this/inv9;(all ref0:(one Track),ref1:(one Track)|((! disj[ref0,ref1]) || (((no ((ref0 . (Track <: succs)) & ref1)) && (ref1 in Junction)) <=> (no ((ref0 . (Track <: signals)) & Semaphore)))));1;(all ref0:(one Track)|((no ((ref0 . (Track <: succs)) & Junction)) => (no ((ref0 . (Track <: signals)) & Semaphore))));16
this/inv5;(all ref0:(one Junction),ref1:(one Track),ref2:(one Track)|(ref0 in ((ref1 . (Track <: succs)) & (ref2 . (Track <: succs)))));1;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});16
this/inv10;(all ref0:(one Track)|(one ref1:(one Semaphore)|(((ref0 . (Track <: succs)) in Junction) => (ref1 in (ref0 . (Track <: signals))))));1;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (ref0 in ((Track <: signals) . Semaphore))));9
this/inv5;(all ref0:(one Track)|((ref0 in Junction) => ((# (Track . (Track <: succs))) > 1)));1;(all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) <=> (ref0 in Junction)));12
this/inv5;(all ref0:(one Track),ref1:(one Track),ref2:(one Track)|((ref0 in ((ref1 . (Track <: succs)) & (ref2 . (Track <: succs)))) <=> (ref0 in Junction)));1;(all ref0:(one Track)|((some ref1:(one (ref0 . (~ (Track <: succs)))),ref2:(one (ref0 . (~ (Track <: succs))))|(ref1 != ref2)) <=> (ref0 in Junction)));14
this/inv5;(all ref0:(one Track),ref1:(one Track),ref2:(one Track)|((ref0 in Junction) => (ref0 in ((ref1 . (Track <: succs)) & (ref2 . (Track <: succs))))));1;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});18
this/inv9;(all ref0:(one Semaphore),ref1:(one Track)|((! ((ref1 . (Track <: succs)) in Junction)) => (ref0 !in (ref1 . (Track <: signals)))));1;(all ref0:(one Semaphore),ref1:(one Track)|((no ((ref1 . (Track <: succs)) & Junction)) => (ref0 !in (ref1 . (Track <: signals)))));8
this/inv5;(all ref0:(one Track)|((one ((Track <: succs) . ref0)) => (ref0 !in Junction)));1;(all ref0:(one Track)|((! (lone ((Track <: succs) . ref0))) <=> (ref0 in Junction)));9
this/inv9;(all ref0:(one Junction)|(((ref0 . (Track <: succs)) . (Track <: signals)) !in Semaphore));1;(no (((Track - ((Track <: succs) . Junction)) . (Track <: signals)) :> Semaphore));8
this/inv9;(all ref0:(one Track)|(((ref0 . (Track <: signals)) !in Semaphore) <=> ((ref0 . (^ (Track <: succs))) !in Junction)));1;(((Track <: signals) . Semaphore) in ((Track <: succs) . Junction));12
this/inv5;(all ref0:(one Track)|((lone ((Track <: succs) . ref0)) => (ref0 !in Junction)));1;(all ref0:(one Track)|((! (lone ((Track <: succs) . ref0))) <=> (ref0 in Junction)));7
this/inv10;(all ref0:(one Track),ref1:(one Track)|(((ref1 in (ref0 . (Track <: succs))) && (Junction in ref1)) => (Semaphore in (ref0 . (Track <: signals)))));1;(all ref0:(one Track),ref1:(one Track)|(((ref1 in (ref0 . (Track <: succs))) && (ref1 in Junction)) => (some ((ref0 . (Track <: signals)) & Semaphore))));11
this/inv5;(all ref0:(one Junction)|(some ((ref0 . (Track <: succs)) . (Track <: succs))));1;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});11
this/inv10;(all ref0:(one Track)|(((ref0 . (Track <: signals)) in Semaphore) <=> (ref0 in ((Track <: succs) . Junction))));1;(((Track <: signals) . Semaphore) = ((Track <: succs) . Junction));9
this/inv5;(all ref0:(one Junction)|(some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (^ (Track <: succs)))) && (ref0 in (ref2 . (^ (Track <: succs)))))));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));15
this/inv5;(all ref0:(one Junction)|(some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (^ (Track <: succs)))) && (ref0 in (ref2 . (^ (Track <: succs)))) && (ref1 != ref2))));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));12
this/inv10;(all ref0:(one Track)|(((ref0 . (Track <: signals)) in Semaphore) && (ref0 in ((Track <: succs) . Junction))));1;(((Track <: signals) . Semaphore) = ((Track <: succs) . Junction));9
this/inv5;(all ref0:(one Track)|(((ref0 !in Exit) && (ref0 in Junction)) <=> (some ((Track <: succs) . ref0))));1;(all ref0:(one Track)|((! (lone ((Track <: succs) . ref0))) <=> (ref0 in Junction)));13
this/inv10;(all ref0:(one Track)|((ref0 in (Junction . (Track <: succs))) => ((ref0 . (Track <: signals)) in Semaphore)));1;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (ref0 in ((Track <: signals) . Semaphore))));6
this/inv5;(all ref0:(one Track)|(((ref0 !in Entry) && (ref0 !in Exit) && (ref0 in Junction)) <=> (some ((Track <: succs) . ref0))));1;(all ref0:(one Track)|((! (lone ((Track <: succs) . ref0))) <=> (ref0 in Junction)));16
this/inv10;(all ref0:(one Track)|((ref0 in (Junction . (~ (Track <: succs)))) => ((ref0 . (Track <: signals)) in Semaphore)));1;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (ref0 in ((Track <: signals) . Semaphore))));7
this/inv5;((all ref0:(one Junction)|((# ((Track <: succs) . ref0)) > 2)) && (all ref1:(one Track)|(((# ((Track <: succs) . ref1)) > 2) => (ref1 in Junction))));1;((all ref0:(one Junction)|((# ((Track <: succs) . ref0)) > 1)) && (all ref1:(one Track)|(((# ((Track <: succs) . ref1)) > 1) => (ref1 in Junction))));4
this/inv8;(all ref0:(one Entry),ref1:(one Exit)|((ref0 != ref1) && (ref1 in (ref0 . (Track <: succs)))));1;(all ref0:(one Entry),ref1:(one Exit)|((ref0 != ref1) => (ref1 in (ref0 . (^ (Track <: succs))))));7
this/inv10;(all ref0:(one Track)|((some (ref0 & (Junction . (~ (Track <: succs))))) => ((ref0 . (Track <: signals)) in Semaphore)));1;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (ref0 in ((Track <: signals) . Semaphore))));10
this/inv5;(all ref0:(one ((Track - Entry) - Exit))|((ref0 in Junction) <=> (some ((Track <: succs) . ref0))));1;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});9
this/inv10;(all ref0:(one Track)|((some (((Track <: succs) . Junction) & ref0)) => ((ref0 . (Track <: signals)) in Semaphore)));1;(all ref0:(one Track)|((some (((Track <: succs) . Junction) & ref0)) => (some ((ref0 . (Track <: signals)) & Semaphore))));5
this/inv8;(all ref0:(one Entry),ref1:(one Exit)|((ref0 = ref1) || (ref1 in (ref0 . (Track <: succs)))));1;(all ref0:(one Entry),ref1:(one Exit)|((ref0 = ref1) || (ref1 in (ref0 . (^ (Track <: succs))))));5
this/inv5;(all ref0:(one Track)|((((# ((Track <: succs) . ref0)) != 1) && (some (ref0 . (Track <: succs)))) <=> (ref0 in Junction)));1;(all ref0:(one Track)|((((# ((Track <: succs) . ref0)) != 0) && ((# ((Track <: succs) . ref0)) != 1)) <=> (ref0 in Junction)));8
this/inv8;((Track -> Track) in (^ (Track <: succs)));1;((Entry -> Exit) in (* (Track <: succs)));6
this/inv5;(all ref0:(one Junction)|(ref0 in (Track . (Track <: succs))));1;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});10
this/inv5;(((# ((Track <: succs) . Junction)) > 1) && (all ref0:(one Track)|(((# ((Track <: succs) . ref0)) > 1) => (ref0 in Junction))));1;((all ref0:(one Junction)|((# ((Track <: succs) . ref0)) > 1)) && (all ref1:(one Track)|(((# ((Track <: succs) . ref1)) > 1) => (ref1 in Junction))));9
this/inv5;(all ref0:(one Track)|((((# ((Track <: succs) . ref0)) != 0) && ((# ((Track <: succs) . ref0)) != 1) && (some (ref0 . (Track <: succs)))) <=> (ref0 in Junction)));1;(all ref0:(one Track)|((((# ((Track <: succs) . ref0)) != 0) && ((# ((Track <: succs) . ref0)) != 1)) <=> (ref0 in Junction)));6
this/inv5;(all ref0:(one Junction)|(some (ref0 & (Track . (Track <: succs)))));1;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});11
this/inv8;(all ref0:(one Track),ref1:(one Track)|(ref1 in (ref0 . (* (Track <: succs)))));1;(all ref0:(one Entry),ref1:(one Exit)|(ref1 in (ref0 . (* (Track <: succs)))));4
this/inv5;(all ref0:(one Track)|((ref0 in (Track . (Track <: succs))) => (ref0 in Junction)));1;(all ref0:(one Track)|((! (lone ((Track <: succs) . ref0))) <=> (ref0 in Junction)));10
this/inv8;(Track in (Entry . (* (Track <: succs))));1;((Entry -> Exit) in (* (Track <: succs)));4
this/inv5;(all ref0:(one Junction)|(ref0 in ((Entry . (Track <: succs)) . (^ (Track <: succs)))));1;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});13
this/inv5;(((Entry . (Track <: succs)) . (^ (Track <: succs))) = Junction);1;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});10
this/inv5;(all ref0:(one Track)|(lone ref1:(one Track)|((ref1 in (ref0 . (Track <: succs))) => (ref0 in Junction))));1;(all ref0:(one Track)|((! (lone ((Track <: succs) . ref0))) <=> (ref0 in Junction)));11
this/inv10;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (Semaphore in (ref0 . (Track <: signals)))));1;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (ref0 in ((Track <: signals) . Semaphore))));6
this/inv8;(all ref0:(one Track),ref1:(one Track)|((ref0 in Entry) => ((ref1 in (ref0 . (^ (Track <: succs)))) && (ref1 in Exit))));1;(all ref0:(one Entry),ref1:(one Exit)|((ref0 != ref1) => (ref1 in (ref0 . (^ (Track <: succs))))));12
this/inv5;(all ref0:(one Track),ref1:(one Track),ref2:(one Track)|(((ref0 in (ref1 . (Track <: succs))) && (ref1 in (ref2 . (Track <: succs)))) <=> (ref0 in Junction)));1;(all ref0:(one Track)|((some ref1:(one Track),ref2:(one Track)|((ref0 in (ref1 . (Track <: succs))) && (ref0 in (ref2 . (Track <: succs))) && (ref1 != ref2))) <=> (ref0 in Junction)));11
this/inv8;(Entry in (Exit . (* (Track <: succs))));1;((Entry -> Exit) in (* (Track <: succs)));2
this/inv5;(all ref0:(one Track)|(ref0 in (Track . (Track <: succs))));1;(Junction = {ref0:(one Track)|(! (lone ((Track <: succs) . ref0)))});10
this/inv5;(all ref0:(one Track)|(((# (ref0 . (^ (Track <: succs)))) > 1) <=> (ref0 in Junction)));1;(all ref0:(one Track)|(((# (ref0 . (~ (Track <: succs)))) > 1) <=> (ref0 in Junction)));4
this/inv10;(all ref0:(one Track)|((((ref0 . (Track <: succs)) !in Exit) && ((ref0 . (Track <: succs)) in Junction)) => (Semaphore in (ref0 . (Track <: signals)))));1;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (ref0 in ((Track <: signals) . Semaphore))));14
this/inv10;(all ref0:(one Junction),ref1:(one Track)|(one ref2:(one Semaphore)|((ref1 in (ref0 . (Track <: succs))) => (ref2 in (ref1 . (Track <: signals))))));1;(all ref0:(one Track)|((some ref1:(one Junction)|(ref1 in (ref0 . (Track <: succs)))) => (some ref2:(one Semaphore)|(ref2 in (ref0 . (Track <: signals))))));8
this/inv10;(all ref0:(one Track)|(some ref1:(one Junction)|((ref1 !in (ref0 . (Track <: succs))) => (Semaphore !in (ref0 . (Track <: signals))))));1;(all ref0:(one Track)|((some ref1:(one Junction)|(ref1 in (ref0 . (Track <: succs)))) => (some ref2:(one Semaphore)|(ref2 in (ref0 . (Track <: signals))))));11
this/inv10;(all ref0:(one Junction),ref1:(one Track)|(some ref2:(one Semaphore)|((no (ref0 . (Track <: signals))) && (ref2 in (ref1 . (Track <: signals))))));1;(all ref0:(one Junction),ref1:(one ((Track <: succs) . ref0))|(some ref2:(one Semaphore)|(ref2 in (ref1 . (Track <: signals)))));11
this/inv10;(all ref0:(one Junction),ref1:(one Track)|((ref0 !in (ref1 . (Track <: succs))) => (Semaphore !in (ref1 . (Track <: signals)))));1;(all ref0:(one Junction),ref1:(one Track)|(some ref2:(one Semaphore)|((ref0 in (ref1 . (Track <: succs))) => (ref2 in (ref1 . (Track <: signals))))));11
this/inv10;(all ref0:(one Track)|(some ref1:(one Semaphore)|((ref0 in (Junction . (Track <: succs))) => (ref1 in (ref0 . (Track <: signals))))));1;(all ref0:(one Track)|((ref0 in ((Track <: succs) . Junction)) => (ref0 in ((Track <: signals) . Semaphore))));9
this/inv10;(all ref0:(one Track)|((one (((Track <: succs) . ref0) & Junction)) => (one ((ref0 . (Track <: signals)) & Semaphore))));1;(all ref0:(one Track)|((some ((ref0 . (Track <: succs)) & Junction)) => (some ((ref0 . (Track <: signals)) & Semaphore))));8
this/inv10;(all ref0:(one Junction),ref1:(one (Track - Exit))|((ref0 in (ref1 . (Track <: succs))) => (Semaphore in (ref1 . (Track <: signals)))));1;(all ref0:(one Junction),ref1:(one Track)|(some ref2:(one Semaphore)|((ref0 in (ref1 . (Track <: succs))) => (ref2 in (ref1 . (Track <: signals))))));7
this/inv8;(no Signal);1;((Entry -> Exit) in (* (Track <: succs)));8
this/inv10;(all ref0:(one (Junction - Exit)),ref1:(one Track)|((ref0 in (ref1 . (Track <: succs))) => (Semaphore in (ref1 . (Track <: signals)))));1;(all ref0:(one Junction),ref1:(one Track)|(some ref2:(one Semaphore)|((ref0 in (ref1 . (Track <: succs))) => (ref2 in (ref1 . (Track <: signals))))));7
this/inv8;((all ref0:(one Entry),ref1:(one Exit)|(ref1 in (ref0 . (^ (Track <: succs))))) && (no Signal));1;(all ref0:(one Entry),ref1:(one (Exit - ref0))|(ref1 in (ref0 . (^ (Track <: succs)))));7
this/inv8;(all ref0:(one Track)|(Track in (ref0 . (^ (Track <: succs)))));1;(all ref0:(one Entry),ref1:(one (Exit - ref0))|(ref1 in (ref0 . (^ (Track <: succs)))));5
this/inv10;(all ref0:(one Junction),ref1:(one Track)|(((ref0 !in Exit) && (ref0 in (ref1 . (Track <: succs)))) => (Semaphore in (ref1 . (Track <: signals)))));1;(all ref0:(one Junction),ref1:(one Track)|(some ref2:(one Semaphore)|((ref0 in (ref1 . (Track <: succs))) => (ref2 in (ref1 . (Track <: signals))))));11
this/inv8;((no Semaphore) && (no Signal) && (no Speed));1;((Entry -> Exit) in (* (Track <: succs)));13
this/inv10;(all ref0:(one Track)|(((ref0 . (Track <: succs)) !in Junction) => ((ref0 . (Track <: signals)) !in Semaphore)));1;(all ref0:(one Track)|((some ((ref0 . (Track <: succs)) & Junction)) => (some ((ref0 . (Track <: signals)) & Semaphore))));8
this/inv10;(all ref0:(one Track)|(((ref0 . (Track <: succs)) !in Junction) => (Semaphore !in (ref0 . (Track <: signals)))));1;(all ref0:(one Track)|((some ((ref0 . (Track <: succs)) & Junction)) => (some ((ref0 . (Track <: signals)) & Semaphore))));10
this/inv10;(all ref0:(one Track)|(some ref1:(one Track)|(((one (ref0 & Junction)) && (ref0 in (ref1 . (^ (Track <: succs))))) => (Semaphore in (ref0 . (Track <: signals))))));1;(all ref0:(one Track),ref1:(one Track)|(((one (ref1 & Junction)) && (ref1 in (ref0 . (Track <: succs)))) => (some ref2:(one Semaphore)|(ref2 in (ref0 . (Track <: signals))))));14
this/inv10;(all ref0:(one Track)|(some ref1:(one Track)|(((one (ref1 & Junction)) && (ref0 in (ref1 . (^ (Track <: succs))))) => (Semaphore in (ref0 . (Track <: signals))))));1;(all ref0:(one Track),ref1:(one Track)|(((one (ref1 & Junction)) && (ref1 in (ref0 . (Track <: succs)))) => (some ref2:(one Semaphore)|(ref2 in (ref0 . (Track <: signals))))));12
this/inv10;(all ref0:(one Track)|(some ref1:(one Track)|(((one (ref1 & Junction)) && (ref1 in (ref0 . (Track <: succs)))) => (some ref2:(one Signal)|((ref2 in (ref0 . (Track <: signals))) && (ref2 in Semaphore))))));1;(all ref0:(one Track),ref1:(one Track)|(((one (ref1 & Junction)) && (ref1 in (ref0 . (Track <: succs)))) => (some ref2:(one Semaphore)|(ref2 in (ref0 . (Track <: signals))))));10
this/inv10;(all ref0:(one Track)|(some ref1:(one Track)|(((ref1 in (ref0 . (Track <: succs))) && (some (ref1 & Junction))) => (Semaphore in (ref0 . (Track <: signals))))));1;(all ref0:(one Track),ref1:(one Track)|(((ref1 in (ref0 . (Track <: succs))) && (ref1 in Junction)) => (some ((ref0 . (Track <: signals)) & Semaphore))));12
this/inv10;(all ref0:(one Track),ref1:(one Track)|(((one (ref1 & Junction)) && (ref1 in (ref0 . (Track <: succs)))) => (lone ref2:(one Semaphore)|(ref2 in (ref0 . (Track <: signals))))));1;(all ref0:(one Track),ref1:(one Track)|(((one (ref1 & Junction)) && (ref1 in (ref0 . (Track <: succs)))) => (some ref2:(one Semaphore)|(ref2 in (ref0 . (Track <: signals))))));6
this/inv10;(all ref0:(one Track),ref1:(one Track)|(((one (ref1 & Junction)) && (ref1 in (ref0 . (Track <: succs)))) => (one ref2:(one Semaphore)|(ref2 in (ref0 . (Track <: signals))))));1;(all ref0:(one Track),ref1:(one Track)|(((one (ref1 & Junction)) && (ref1 in (ref0 . (Track <: succs)))) => (some ref2:(one Semaphore)|(ref2 in (ref0 . (Track <: signals))))));6
this/inv10;(all ref0:(one Track)|(some ref1:(one Track)|(((one (ref1 & Junction)) && (ref1 in (ref0 . (Track <: succs)))) => (some ref2:(one Semaphore)|(ref2 in (ref0 . (Track <: signals)))))));1;(all ref0:(one Track),ref1:(one Track)|(((one (ref1 & Junction)) && (ref1 in (ref0 . (Track <: succs)))) => (some ref2:(one Semaphore)|(ref2 in (ref0 . (Track <: signals))))));6
this/inv10;(all ref0:(one Track),ref1:(one Track)|(some ref2:(one Semaphore)|(((one (ref1 & Junction)) && (ref1 in (ref0 . (Track <: succs)))) => (ref2 in (ref0 . (Track <: signals))))));1;(all ref0:(one Track),ref1:(one Track)|(((one (ref1 & Junction)) && (ref1 in (ref0 . (Track <: succs)))) => (some ref2:(one Semaphore)|(ref2 in (ref0 . (Track <: signals))))));6
this/inv8;(all ref0:(one Track)|((one (ref0 & Exit)) => (Entry in (ref0 . (^ (Track <: succs))))));1;(all ref0:(one Track)|((some (ref0 & Entry)) => (Exit in (ref0 . (* (Track <: succs))))));10
this/inv8;(all ref0:(one Track)|(((no (ref0 & Entry)) && (one (ref0 & Exit))) => (ref0 in (Track . (^ (Track <: succs))))));1;(all ref0:(one Track),ref1:(one Track)|(((one (ref0 & Entry)) && (one (ref1 & Exit)) && (ref0 != ref1)) => (ref1 in (ref0 . (^ (Track <: succs))))));14
this/inv8;(all ref0:(one Track)|((one (ref0 & Exit)) => (one (ref0 & Entry))));1;(all ref0:(one Entry)|(Exit in (ref0 . (* (Track <: succs)))));13
this/inv8;(all ref0:(one Track)|(((one (ref0 & Exit)) => (one (ref0 & Entry))) || (ref0 in (Track . (^ (Track <: succs))))));1;(all ref0:(one Entry)|(Exit in (ref0 + (ref0 . (^ (Track <: succs))))));16
this/inv8;(all ref0:(one Track),ref1:(one Track)|(((one (ref0 & Entry)) && (one (ref1 & Exit))) => (ref0 in (ref1 . (^ (Track <: succs))))));1;(all ref0:(one Track),ref1:(one Track)|(((one (ref0 & Entry)) && (one (ref1 & Exit)) && (ref0 != ref1)) => (ref1 in (ref0 . (^ (Track <: succs))))));11
this/inv8;(all ref0:(one Track),ref1:(one Track)|((((one (ref0 & Entry)) && (one (ref1 & Exit))) => (ref0 in (ref1 . (^ (Track <: succs))))) || (ref0 = ref1)));1;(all ref0:(one Track),ref1:(one Track)|(((one (ref0 & Entry)) && (one (ref1 & Exit)) && (ref0 != ref1)) => (ref1 in (ref0 . (^ (Track <: succs))))));15
this/inv8;(all ref0:(one Track),ref1:(one Track)|(((one (ref0 & Entry)) && (one (ref1 & Exit)) && (ref0 != ref1)) => (ref0 in (ref1 . (^ (Track <: succs))))));1;(all ref0:(one Track),ref1:(one Track)|(((one (ref0 & Entry)) && (one (ref1 & Exit)) && (ref0 != ref1)) => (ref1 in (ref0 . (^ (Track <: succs))))));8
